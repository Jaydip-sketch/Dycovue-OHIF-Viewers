{"version":3,"file":"5886.bundle.332f0285d6baa3ea19fe.js","mappings":"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,EAAG,EAAG,GACV,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK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","sources":["webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/drawImageSync.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/calculateTransform.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GenerateImageType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/Settings.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/imageLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/FrameRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/PointsManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/ProgressiveIterator.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/RLEVoxelMap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/actorCheck.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/applyPreset.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/autoLoad.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/buildMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateSpacingBetweenImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clamp.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/colormap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createLinearRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/decimate.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepClone.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/fnv1aHash.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestImageId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageDataMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageSliceDataForVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSliceRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSpacingInNormalDirection.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getTargetVolumeAndSpacingInNormalDir.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVoiFromSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeActorCorners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeSliceRangeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportScrollInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasFloatScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasNaNValues.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageIdToURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageRetrieveMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/TargetEventListeners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/MultiTargetEventListenerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getMinMax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRuntimeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calibratedPixelSpacingMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isOpposite.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/indexWithinDimensions.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportsContainingSameVolumes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isPTPrescaledWithSUV.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasGPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasCPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/loadImageToCanvas.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/asArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/historyMemo/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/worldToImageCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageToWorldCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithImageURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestStackImageIndexForPoint.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getCurrentVolumeViewportSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/spatialRegistrationMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateViewportsSpatialRegistration.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageCornersInWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageLegacy.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isValidVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isVideoTransferSyntax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertStackToVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertVolumeToStackViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/roundNumber.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertToGrayscale.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRandomSampleFromArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/color.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/splitImageIdsBy4DTags.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getDynamicVolumeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scroll.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/jumpToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSubVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeDirectionVectors.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateNeighborhoodStats.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getPixelSpacingInformation.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportModality.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/invertRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/logger.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/makeVolumeMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/planar.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/snapFocalPointToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transferFunctionUtils.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformCanvasToIJK.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformIndexToWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformWorldToIndex.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updateVTKImageDataWithCornerstoneImage.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/windowLevel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackContextPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@kitware/vtk.js/Filters/General/ContourLoopExtraction.js","webpack:///../../../node_modules/@cornerstonejs/polymorphic-segmentation/dist/esm/workers/polySegConverters.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddRepresentationData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapBaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js","webpack:///../../../node_modules/@kitware/vtk.js/Rendering/Core/ColorTransferFunction.js","webpack:///../../../node_modules/gl-matrix/esm/vec3.js","webpack:///../../../node_modules/d3-array/src/zip.js","webpack:///../../../node_modules/d3-interpolate/src/quantize.js"],"sourcesContent":["import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nimport VoxelManagerEnum from '../enums/VoxelManagerEnum';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd, voxelRepresentation } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        voxelRepresentation,\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        referencedImageId: referencedImageId,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, voxelRepresentation, referencedImageId, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const id = imageId;\n    const voxelManager = (voxelRepresentation === VoxelManagerEnum.RLE &&\n        VoxelManager.createRLEImageVoxelManager({ dimensions, id })) ||\n        VoxelManager.createImageVoxelManager({\n            height,\n            width,\n            numberOfComponents,\n            scalarData: scalarDataToUse,\n            id,\n        });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n        referencedImageId,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            if (!requestDetails) {\n                return;\n            }\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","export default class FrameRange {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    static imageIdToFrames(imageId) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        if (range.length === 1) {\n            return range[0];\n        }\n        return range;\n    }\n    static imageIdToFrameEnd(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[1] : range;\n    }\n    static imageIdToFrameStart(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[0] : range;\n    }\n    static framesToString(range) {\n        if (Array.isArray(range)) {\n            return `${range[0]}-${range[1]}`;\n        }\n        return String(range);\n    }\n    static framesToImageId(imageId, range) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const newRangeString = this.framesToString(range);\n        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);\n    }\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    getTypedArray() {\n        return this.data;\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128, points) {\n        initialSize = Math.max(initialSize, points?.length || 0);\n        const newPoints = new PointsManager({ initialSize, dimensions: 3 });\n        if (points) {\n            points.forEach((point) => newPoints.push(point));\n        }\n        return newPoints;\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","const ADJACENT_ALL = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [0, 0, 1],\n];\nconst ADJACENT_SINGLE_PLANE = [\n    [0, -1, 0],\n    [0, 1, 0],\n];\nconst ADJACENT_IN = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n];\nconst ADJACENT_OUT = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\nexport default class RLEVoxelMap {\n    static copyMap(destination, source) {\n        for (const [index, row] of source.rows) {\n            destination.rows.set(index, structuredClone(row));\n        }\n    }\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numComps = 1;\n        this.pixelDataConstructor = Uint8Array;\n        this.updateScalarData = function (scalarData) {\n            scalarData.fill(0);\n            const callback = (index, rle, row) => {\n                const { start, end, value } = rle;\n                for (let i = start; i < end; i++) {\n                    scalarData[index + i] = value;\n                }\n            };\n            this.forEach(callback);\n        };\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value ?? this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                return;\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev?.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    static { this.getScalarData = function (ArrayType = Uint8ClampedArray) {\n        const scalarData = new ArrayType(this.frameSize);\n        this.map.updateScalarData(scalarData);\n        return scalarData;\n    }; }\n    toIJK(index) {\n        const i = index % this.jMultiple;\n        const j = ((index - i) / this.jMultiple) % this.height;\n        const k = Math.floor(index / this.kMultiple);\n        return [i, j, k];\n    }\n    toIndex([i, j, k]) {\n        return i + k * this.kMultiple + j * this.jMultiple;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    has(index) {\n        const i = index % this.jMultiple;\n        const j = (index - i) / this.jMultiple;\n        const rle = this.getRLE(i, j);\n        return rle?.value !== undefined;\n    }\n    delete(index) {\n        const i = index % this.width;\n        const j = (index - i) / this.width;\n        const row = this.rows.get(j);\n        if (!row) {\n            return;\n        }\n        const rleIndex = this.findIndex(row, i);\n        const rle = row[rleIndex];\n        if (!rle || rle.start > i) {\n            return;\n        }\n        if (rle.end === i + 1) {\n            rle.end--;\n            if (rle.start >= rle.end) {\n                row.splice(rleIndex, 1);\n                if (!row.length) {\n                    this.rows.delete(j);\n                }\n            }\n            return;\n        }\n        if (rle.start === i) {\n            rle.start++;\n            return;\n        }\n        const newRle = {\n            value: rle.value,\n            start: i + 1,\n            end: rle.end,\n        };\n        rle.end = i;\n        row.splice(rleIndex + 1, 0, newRle);\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    forEach(callback, options) {\n        const rowModified = options?.rowModified;\n        for (const [baseIndex, row] of this.rows) {\n            const rowToUse = rowModified ? [...row] : row;\n            for (const rle of rowToUse) {\n                callback(baseIndex * this.width, rle, row);\n            }\n        }\n    }\n    forEachRow(callback) {\n        for (const [baseIndex, row] of this.rows) {\n            callback(baseIndex * this.width, row);\n        }\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numComps);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numComps } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numComps === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numComps;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numComps) {\n                        for (let comp = 0; comp < numComps; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n    floodFill(i, j, k, value, options) {\n        const rle = this.getRLE(i, j, k);\n        if (!rle) {\n            throw new Error(`Initial point ${i},${j},${k} isn't in the RLE`);\n        }\n        const stack = [[rle, j, k]];\n        const replaceValue = rle.value;\n        if (replaceValue === value) {\n            throw new Error(`source (${replaceValue}) and destination (${value}) are identical`);\n        }\n        return this.flood(stack, replaceValue, value, options);\n    }\n    flood(stack, sourceValue, value, options) {\n        let sum = 0;\n        const { planar = true, diagonals = true, singlePlane = false, } = options || {};\n        const childOptions = { planar, diagonals, singlePlane };\n        while (stack.length) {\n            const top = stack.pop();\n            const [current] = top;\n            if (current.value !== sourceValue) {\n                continue;\n            }\n            current.value = value;\n            sum += current.end - current.start;\n            const adjacents = this.findAdjacents(top, childOptions).filter((adjacent) => adjacent && adjacent[0].value === sourceValue);\n            stack.push(...adjacents);\n        }\n        return sum;\n    }\n    fillFrom(getter, boundsIJK) {\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                let rle;\n                let row;\n                for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                    const value = getter(i, j, k);\n                    if (value === undefined) {\n                        rle = undefined;\n                        continue;\n                    }\n                    if (!row) {\n                        row = [];\n                        this.rows.set(j + k * this.height, row);\n                    }\n                    if (rle && rle.value !== value) {\n                        rle = undefined;\n                    }\n                    if (!rle) {\n                        rle = { start: i, end: i, value };\n                        row.push(rle);\n                    }\n                    rle.end++;\n                }\n            }\n        }\n    }\n    findAdjacents(item, { diagonals = true, planar = true, singlePlane = false }) {\n        const [rle, j, k, adjacentsDelta] = item;\n        const { start, end } = rle;\n        const leftRle = start > 0 && this.getRLE(start - 1, j, k);\n        const rightRle = end < this.width && this.getRLE(end, j, k);\n        const range = diagonals\n            ? [start > 0 ? start - 1 : start, end < this.width ? end + 1 : end]\n            : [start, end];\n        const adjacents = [];\n        if (leftRle) {\n            adjacents.push([leftRle, j, k]);\n        }\n        if (rightRle) {\n            adjacents.push([rightRle, j, k]);\n        }\n        for (const delta of adjacentsDelta ||\n            (singlePlane ? ADJACENT_SINGLE_PLANE : ADJACENT_ALL)) {\n            const [, delta1, delta2] = delta;\n            const testJ = delta1 + j;\n            const testK = delta2 + k;\n            if (testJ < 0 || testJ >= this.height) {\n                continue;\n            }\n            if (testK < 0 || testK >= this.depth) {\n                continue;\n            }\n            const row = this.getRun(testJ, testK);\n            if (!row) {\n                continue;\n            }\n            for (const testRle of row) {\n                const newAdjacentDelta = adjacentsDelta ||\n                    (singlePlane && ADJACENT_SINGLE_PLANE) ||\n                    (planar && delta2 > 0 && ADJACENT_OUT) ||\n                    (planar && delta2 < 0 && ADJACENT_IN) ||\n                    ADJACENT_ALL;\n                if (!(testRle.end <= range[0] || testRle.start >= range[1])) {\n                    adjacents.push([testRle, testJ, testK, newAdjacentDelta]);\n                }\n            }\n        }\n        return adjacents;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    if (!actorToCheck) {\n        return false;\n    }\n    return !!actorToCheck.isA(actorType);\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","import * as metaData from '../metaData';\nimport { MetadataModules, VOILUTFunctionType } from '../enums';\nexport function getValidVOILUTFunction(voiLUTFunction) {\n    if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n        return VOILUTFunctionType.LINEAR;\n    }\n    return voiLUTFunction;\n}\nexport function getImagePlaneModule(imageId) {\n    const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n    const newImagePlaneModule = {\n        ...imagePlaneModule,\n    };\n    if (!newImagePlaneModule.columnPixelSpacing) {\n        newImagePlaneModule.columnPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.rowPixelSpacing) {\n        newImagePlaneModule.rowPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.columnCosines) {\n        newImagePlaneModule.columnCosines = [0, 1, 0];\n    }\n    if (!newImagePlaneModule.rowCosines) {\n        newImagePlaneModule.rowCosines = [1, 0, 0];\n    }\n    if (!newImagePlaneModule.imagePositionPatient) {\n        newImagePlaneModule.imagePositionPatient = [0, 0, 0];\n    }\n    if (!newImagePlaneModule.imageOrientationPatient) {\n        newImagePlaneModule.imageOrientationPatient = new Float32Array([\n            1, 0, 0, 0, 1, 0,\n        ]);\n    }\n    return newImagePlaneModule;\n}\nexport function calibrateImagePlaneModule(imageId, imagePlaneModule, currentCalibration) {\n    const calibration = metaData.get('calibratedPixelSpacing', imageId);\n    const isUpdated = currentCalibration !== calibration;\n    const { scale } = calibration || {};\n    const hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n    imagePlaneModule.calibration = calibration;\n    if (!isUpdated) {\n        return { imagePlaneModule, hasPixelSpacing };\n    }\n    return {\n        imagePlaneModule,\n        hasPixelSpacing,\n        calibrationEvent: {\n            scale,\n            calibration,\n        },\n    };\n}\nexport function buildMetadata(image) {\n    const imageId = image.imageId;\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = metaData.get('imagePixelModule', imageId);\n    const { windowWidth, windowCenter, voiLUTFunction } = image;\n    const { modality } = metaData.get('generalSeriesModule', imageId);\n    const imageIdScalingFactor = metaData.get('scalingModule', imageId);\n    const calibration = metaData.get(MetadataModules.CALIBRATION, imageId);\n    const voiLUTFunctionEnum = getValidVOILUTFunction(voiLUTFunction);\n    const imagePlaneModule = getImagePlaneModule(imageId);\n    return {\n        calibration,\n        scalingFactor: imageIdScalingFactor,\n        voiLUTFunction: voiLUTFunctionEnum,\n        modality,\n        imagePlaneModule,\n        imagePixelModule: {\n            bitsAllocated,\n            bitsStored,\n            samplesPerPixel,\n            highBit,\n            photometricInterpretation,\n            pixelRepresentation,\n            windowWidth: windowWidth,\n            windowCenter: windowCenter,\n            modality,\n            voiLUTFunction: voiLUTFunctionEnum,\n        },\n    };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function calculateSpacingBetweenImageIds(imageIds) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const refIppVec = vec3.fromValues(referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    let spacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        const ippVec = vec3.fromValues(imagePositionPatient[0], imagePositionPatient[1], imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, ippVec);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        const numImages = distanceImagePairs.length;\n        spacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        const middleIppVec = vec3.fromValues(metadataForMiddleImage.imagePositionPatient[0], metadataForMiddleImage.imagePositionPatient[1], metadataForMiddleImage.imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, middleIppVec);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        spacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { sliceThickness, spacingBetweenSlices } = metaData.get('imagePlaneModule', imageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if ((spacing === 0 || isNaN(spacing)) && !strictZSpacingForVolumeViewport) {\n        if (spacingBetweenSlices) {\n            console.debug('Could not calculate spacing. Using spacingBetweenSlices');\n            spacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.debug('Could not calculate spacing and no spacingBetweenSlices. Using sliceThickness');\n            spacing = sliceThickness;\n        }\n        else {\n            console.debug('Could not calculate spacing. The VolumeViewport visualization is compromised. Setting spacing to 1 to render');\n            spacing = 1;\n        }\n    }\n    return spacing;\n}\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    colormap.name = colormap.name || colormap.Name;\n    _colormaps.set(colormap.name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    return {\n        name: matchedColormap.Name,\n        opacity,\n    };\n}\nexport function setColorMapTransferFunctionForVolumeActor(volumeInfo) {\n    const { volumeActor, preset, opacity = 0.9, threshold = null, colorRange = [0, 5], } = volumeInfo;\n    const mapper = volumeActor.getMapper();\n    mapper.setSampleDistance(1.0);\n    const cfun = vtkColorTransferFunction.newInstance();\n    const presetToUse = preset || vtkColorMaps.getPresetByName('hsv');\n    cfun.applyColorMap(presetToUse);\n    cfun.setMappingRange(colorRange[0], colorRange[1]);\n    volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n    updateOpacityWithThreshold(volumeActor, opacity, threshold);\n}\nexport function updateOpacity(volumeActor, newOpacity) {\n    const currentThreshold = getThresholdValue(volumeActor);\n    updateOpacityWithThreshold(volumeActor, newOpacity, currentThreshold);\n}\nexport function updateThreshold(volumeActor, newThreshold) {\n    const currentOpacity = getMaxOpacity(volumeActor);\n    updateOpacityWithThreshold(volumeActor, currentOpacity, newThreshold);\n}\nfunction updateOpacityWithThreshold(volumeActor, opacity, threshold) {\n    const meta = volumeActor.getMapper().getInputData().get('voxelManager');\n    if (!meta?.voxelManager) {\n        throw new Error('No voxel manager was found for the volume actor, or you cannot yet update opacity with a threshold using stacked images');\n    }\n    const range = meta.voxelManager.getRange();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    if (threshold !== null) {\n        const delta = Math.abs(range[1] - range[0]) * 0.001;\n        const thresholdValue = Math.max(range[0], Math.min(range[1], threshold));\n        ofun.addPoint(range[0], 0);\n        ofun.addPoint(thresholdValue - delta, 0);\n        ofun.addPoint(thresholdValue, opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    else {\n        ofun.addPoint(range[0], opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    volumeActor.getProperty().setScalarOpacity(0, ofun);\n}\nfunction getThresholdValue(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return null;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length <= 4) {\n        return null;\n    }\n    for (let i = 0; i < dataArray.length - 2; i += 2) {\n        const x1 = dataArray[i];\n        const y1 = dataArray[i + 1];\n        const x2 = dataArray[i + 2];\n        const y2 = dataArray[i + 3];\n        if (y1 === 0 && y2 > 0) {\n            return x2;\n        }\n    }\n    return null;\n}\nfunction getMaxOpacity(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return 1.0;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length === 0) {\n        return 1.0;\n    }\n    let maxOpacity = 0;\n    for (let i = 1; i < dataArray.length; i += 2) {\n        if (dataArray[i] > maxOpacity) {\n            maxOpacity = dataArray[i];\n        }\n    }\n    return maxOpacity;\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, getThresholdValue, getMaxOpacity, };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nimport { logit } from './logit';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","export default function fnv1aHash(str) {\n    let hash = 0x811c9dc5;\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        hash +=\n            (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return (hash >>> 0).toString(36);\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { coreLog } from './logger';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nconst log = coreLog.getLogger('utilities', 'getClosestImageId');\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal, options) {\n    const { direction, spacing, imageIds } = imageVolume;\n    const { ignoreSpacing = false } = options || {};\n    if (!imageIds?.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProduct = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProduct) < 1 - EPSILON) {\n        return;\n    }\n    let halfSpacingInNormalDirection;\n    if (!ignoreSpacing) {\n        const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n        halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    }\n    let closestImageId;\n    let minDistance = Infinity;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n        if (!imagePlaneModule?.imagePositionPatient) {\n            log.warn(`Missing imagePositionPatient for imageId: ${imageId}`);\n            continue;\n        }\n        const { imagePositionPatient } = imagePlaneModule;\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const distance = Math.abs(vec3.dot(dir, viewPlaneNormal));\n        if (ignoreSpacing) {\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n        else {\n            if (distance < halfSpacingInNormalDirection && distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n    }\n    if (closestImageId === undefined) {\n        log.warn('No imageId found within the specified criteria (half spacing or absolute closest).');\n    }\n    return closestImageId;\n}\n","import { vec3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nimport { buildMetadata } from './buildMetadata';\nexport function getImageDataMetadata(image) {\n    const { imagePlaneModule, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = buildMetadata(image);\n    let { rowCosines, columnCosines } = imagePlaneModule;\n    if (rowCosines == null || columnCosines == null) {\n        rowCosines = [1, 0, 0];\n        columnCosines = [0, 1, 0];\n    }\n    const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n    const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    let origin = imagePlaneModule.imagePositionPatient;\n    if (origin == null) {\n        origin = [0, 0, 0];\n    }\n    const xSpacing = imagePlaneModule.columnPixelSpacing || image.columnPixelSpacing;\n    const ySpacing = imagePlaneModule.rowPixelSpacing || image.rowPixelSpacing;\n    const xVoxels = image.columns;\n    const yVoxels = image.rows;\n    const zSpacing = EPSILON;\n    const zVoxels = 1;\n    if (!imagePixelModule.photometricInterpretation &&\n        image.sizeInBytes === 3 * image.width * image.height) {\n        image.numberOfComponents = 3;\n    }\n    const numberOfComponents = image.numberOfComponents ||\n        _getNumCompsFromPhotometricInterpretation(imagePixelModule.photometricInterpretation);\n    return {\n        numberOfComponents,\n        origin,\n        direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n        dimensions: [xVoxels, yVoxels, zVoxels],\n        spacing: [xSpacing, ySpacing, zSpacing],\n        numVoxels: xVoxels * yVoxels * zVoxels,\n        imagePlaneModule,\n        imagePixelModule,\n        bitsAllocated: imagePixelModule.bitsAllocated,\n        voiLUTFunction,\n        modality,\n        scalingFactor,\n        calibration,\n        scanAxisNormal: scanAxisNormal,\n    };\n}\nfunction _getNumCompsFromPhotometricInterpretation(photometricInterpretation) {\n    let numberOfComponents = 1;\n    if (photometricInterpretation === 'RGB' ||\n        photometricInterpretation?.includes('YBR') ||\n        photometricInterpretation === 'PALETTE COLOR') {\n        numberOfComponents = 3;\n    }\n    return numberOfComponents;\n}\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const scalingModules = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: scalingModules.suvbw,\n            suvbsa: scalingModules.suvbsa,\n            suvlbm: scalingModules.suvlbm,\n        }),\n        ...(modality === 'RTDOSE' && {\n            doseGridScaling: scalingModules.DoseGridScaling,\n            doseSummation: scalingModules.DoseSummation,\n            doseType: scalingModules.DoseType,\n            doseUnit: scalingModules.DoseUnit,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","export default function imageIdToURI(imageId) {\n    const colonIndex = imageId.indexOf(':');\n    return imageId.substring(colonIndex + 1);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    clone: () => {\n        return new Map(retrieveConfigurationState);\n    },\n    restore: (state) => {\n        retrieveConfigurationState.clear();\n        state.forEach((value, key) => {\n            retrieveConfigurationState.set(key, value);\n        });\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import { vec3 } from 'gl-matrix';\nimport getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport TiledRenderingEngine from '../RenderingEngine/TiledRenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new TiledRenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const rightVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([1 / devicePixelRatio, 0]), origin);\n            const downVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([0, 1 / devicePixelRatio]), origin);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n                rightVector,\n                downVector,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","export function asArray(item) {\n    if (Array.isArray(item)) {\n        return item;\n    }\n    return [item];\n}\n","import eventTarget from '../../eventTarget';\nimport { asArray } from '../asArray';\nconst Events = {\n    HISTORY_UNDO: 'CORNERSTONE_TOOLS_HISTORY_UNDO',\n    HISTORY_REDO: 'CORNERSTONE_TOOLS_HISTORY_REDO',\n};\nexport class HistoryMemo {\n    constructor(label = 'Tools', size = 50) {\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n        this.ring = new Array();\n        this.isRecordingGrouped = false;\n        this.label = label;\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(newSize) {\n        this.ring = new Array(newSize);\n        this._size = newSize;\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n    }\n    undo(items = 1) {\n        while (items > 0 && this.undoAvailable > 0) {\n            const item = this.ring[this.position];\n            for (const subitem of asArray(item).reverse()) {\n                subitem.restoreMemo(true);\n                this.dispatchHistoryEvent({ item: subitem, isUndo: true });\n            }\n            items--;\n            this.redoAvailable++;\n            this.undoAvailable--;\n            this.position = (this.position - 1 + this.size) % this.size;\n        }\n    }\n    undoIf(condition) {\n        if (this.undoAvailable > 0 && condition(this.ring[this.position])) {\n            this.undo();\n            return true;\n        }\n        return false;\n    }\n    dispatchHistoryEvent({ item, isUndo }) {\n        if (item.id) {\n            eventTarget.dispatchEvent(new CustomEvent(isUndo ? Events.HISTORY_UNDO : Events.HISTORY_REDO, {\n                detail: {\n                    isUndo,\n                    id: item.id,\n                    operationType: item.operationType || 'annotation',\n                    memo: item,\n                },\n            }));\n        }\n    }\n    redo(items = 1) {\n        while (items > 0 && this.redoAvailable > 0) {\n            const newPosition = (this.position + 1) % this.size;\n            const item = this.ring[newPosition];\n            for (const subitem of asArray(item).reverse()) {\n                subitem.restoreMemo(false);\n                this.dispatchHistoryEvent({ item: subitem, isUndo: false });\n            }\n            items--;\n            this.position = newPosition;\n            this.undoAvailable++;\n            this.redoAvailable--;\n        }\n    }\n    initializeGroupItem() {\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = [];\n    }\n    startGroupRecording() {\n        this.isRecordingGrouped = true;\n        this.initializeGroupItem();\n    }\n    rollbackUnusedGroupItem() {\n        this.ring[this.position] = undefined;\n        this.position = (this.position - 1) % this._size;\n        this.undoAvailable--;\n    }\n    endGroupRecording() {\n        this.isRecordingGrouped = false;\n        const lastItem = this.ring[this.position];\n        const lastItemIsEmpty = Array.isArray(lastItem) && lastItem.length === 0;\n        if (lastItemIsEmpty) {\n            this.rollbackUnusedGroupItem();\n        }\n    }\n    pushGrouped(memo) {\n        const lastMemo = this.ring[this.position];\n        if (Array.isArray(lastMemo)) {\n            lastMemo.push(memo);\n            return memo;\n        }\n        throw new Error('Last item should be an array for grouped memos.');\n    }\n    push(item) {\n        if (!item) {\n            return;\n        }\n        const memo = item.restoreMemo\n            ? item\n            : item.createMemo?.();\n        if (!memo) {\n            return;\n        }\n        if (this.isRecordingGrouped) {\n            return this.pushGrouped(memo);\n        }\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = memo;\n        return memo;\n    }\n}\nconst DefaultHistoryMemo = new HistoryMemo();\nexport { DefaultHistoryMemo };\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData() || {};\n    if (!imageData || !dimensions) {\n        return [];\n    }\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    if (imageIds.length <= 1) {\n        return false;\n    }\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, usingDefaultValues, } = metaData.get('imagePlaneModule', imageId0);\n    if (usingDefaultValues) {\n        return false;\n    }\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    let validVolume = true;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        if (seriesInstanceUID !== baseMetadata.seriesInstanceUID) {\n            validVolume = false;\n            break;\n        }\n        if (modality !== baseMetadata.modality) {\n            validVolume = false;\n            break;\n        }\n        if (columns !== baseMetadata.columns) {\n            validVolume = false;\n            break;\n        }\n        if (rows !== baseMetadata.rows) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient)) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(pixelSpacing, baseMetadata.pixelSpacing)) {\n            validVolume = false;\n            break;\n        }\n    }\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport uuidv4 from './uuidv4';\nimport { createLocalVolume } from '../loaders/volumeLoader';\nimport cache from '../cache/cache';\nfunction createSubVolume(referencedVolumeId, boundsIJK, options = {}) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    const { metadata, spacing, direction, dimensions: refVolumeDim, } = referencedVolume;\n    const { minX, maxX, minY, maxY, minZ, maxZ } = boundsIJK;\n    const ijkTopLeft = [\n        Math.min(minX, maxX),\n        Math.min(minY, maxY),\n        Math.min(minZ, maxZ),\n    ];\n    const boundingBoxOriginWorld = transformIndexToWorld(referencedVolume.imageData, ijkTopLeft);\n    const dimensions = [\n        Math.abs(maxX - minX) + 1,\n        Math.abs(maxY - minY) + 1,\n        Math.abs(maxZ - minZ) + 1,\n    ];\n    const { targetBuffer } = options;\n    const subVolumeOptions = {\n        metadata,\n        dimensions,\n        spacing,\n        origin: boundingBoxOriginWorld,\n        direction,\n        targetBuffer,\n        scalarData: targetBuffer?.type === 'Float32Array'\n            ? new Float32Array(dimensions[0] * dimensions[1] * dimensions[2])\n            : undefined,\n    };\n    const subVolume = createLocalVolume(uuidv4(), subVolumeOptions);\n    const subVolumeData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const subVolumeSliceSize = dimensions[0] * dimensions[1];\n    const refVolumeSliceSize = refVolumeDim[0] * refVolumeDim[1];\n    const refVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    for (let z = 0; z < dimensions[2]; z++) {\n        for (let y = 0; y < dimensions[1]; y++) {\n            const rowStartWorld = transformIndexToWorld(subVolume.imageData, [\n                0,\n                y,\n                z,\n            ]);\n            const refVolumeRowStartIJK = transformWorldToIndex(referencedVolume.imageData, rowStartWorld);\n            const refVolumeRowStartOffset = refVolumeRowStartIJK[2] * refVolumeSliceSize +\n                refVolumeRowStartIJK[1] * refVolumeDim[0] +\n                refVolumeRowStartIJK[0];\n            const rowData = refVolumeData.slice(refVolumeRowStartOffset, refVolumeRowStartOffset + dimensions[0]);\n            const subVolumeLineStartOffset = z * subVolumeSliceSize + y * dimensions[0];\n            subVolumeData.set(rowData, subVolumeLineStartOffset);\n        }\n    }\n    subVolume.voxelManager.setCompleteScalarDataArray(subVolumeData);\n    return subVolume;\n}\nexport { createSubVolume as default, createSubVolume };\n","import { vec3 } from 'gl-matrix';\nimport { transformWorldToIndexContinuous } from './transformWorldToIndex';\nfunction getVolumeDirectionVectors(imageData, camera) {\n    const { viewUp, viewPlaneNormal } = camera;\n    const ijkOrigin = transformWorldToIndexContinuous(imageData, [0, 0, 0]);\n    const worldVecColDir = vec3.negate(vec3.create(), viewUp);\n    const worldVecSliceDir = vec3.negate(vec3.create(), viewPlaneNormal);\n    const worldVecRowDir = vec3.cross(vec3.create(), worldVecColDir, worldVecSliceDir);\n    const ijkVecColDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecColDir), ijkOrigin);\n    const ijkVecSliceDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecSliceDir), ijkOrigin);\n    vec3.normalize(ijkVecColDir, ijkVecColDir);\n    vec3.normalize(ijkVecSliceDir, ijkVecSliceDir);\n    const ijkVecRowDir = vec3.cross(vec3.create(), ijkVecColDir, ijkVecSliceDir);\n    return {\n        worldVecRowDir,\n        worldVecColDir,\n        worldVecSliceDir,\n        ijkVecRowDir,\n        ijkVecColDir,\n        ijkVecSliceDir,\n    };\n}\nexport { getVolumeDirectionVectors as default, getVolumeDirectionVectors };\n","export function calculateNeighborhoodStats(scalarData, dimensions, centerIjk, radius) {\n    const [width, height, numSlices] = dimensions;\n    const numPixelsPerSlice = width * height;\n    let sum = 0;\n    let sumSq = 0;\n    let count = 0;\n    const [cx, cy, cz] = centerIjk.map(Math.round);\n    for (let z = cz - radius; z <= cz + radius; z++) {\n        if (z < 0 || z >= numSlices) {\n            continue;\n        }\n        for (let y = cy - radius; y <= cy + radius; y++) {\n            if (y < 0 || y >= height) {\n                continue;\n            }\n            for (let x = cx - radius; x <= cx + radius; x++) {\n                if (x < 0 || x >= width) {\n                    continue;\n                }\n                const index = z * numPixelsPerSlice + y * width + x;\n                const value = scalarData[index];\n                sum += value;\n                sumSq += value * value;\n                count++;\n            }\n        }\n    }\n    if (count === 0) {\n        const centerIndex = cz * numPixelsPerSlice + cy * width + cx;\n        if (centerIndex >= 0 && centerIndex < scalarData.length) {\n            const centerValue = scalarData[centerIndex];\n            return { mean: centerValue, stdDev: 0, count: 1 };\n        }\n        else {\n            return { mean: 0, stdDev: 0, count: 0 };\n        }\n    }\n    const mean = sum / count;\n    const variance = sumSq / count - mean * mean;\n    const stdDev = Math.sqrt(Math.max(0, variance));\n    return { mean, stdDev, count };\n}\n","import { isEqual } from './isEqual';\nimport { CalibrationTypes } from '../enums';\nconst projectionRadiographSOPClassUIDs = new Set([\n    '1.2.840.10008.5.1.4.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.2',\n    '1.2.840.10008.5.1.4.1.1.1.2.1',\n    '1.2.840.10008.5.1.4.1.1.1.3',\n    '1.2.840.10008.5.1.4.1.1.1.3.1',\n    '1.2.840.10008.5.1.4.1.1.12.1',\n    '1.2.840.10008.5.1.4.1.1.12.1.1',\n    '1.2.840.10008.5.1.4.1.1.12.2',\n    '1.2.840.10008.5.1.4.1.1.12.2.1',\n    '1.2.840.10008.5.1.4.1.1.12.3',\n]);\nfunction calculateRadiographicPixelSpacing(instance) {\n    const { PixelSpacing, ImagerPixelSpacing, EstimatedRadiographicMagnificationFactor, PixelSpacingCalibrationType, PixelSpacingCalibrationDescription, } = instance;\n    const isProjection = true;\n    if (!ImagerPixelSpacing) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.UNKNOWN,\n            isProjection,\n        };\n    }\n    if (!PixelSpacing) {\n        if (!EstimatedRadiographicMagnificationFactor) {\n            console.warn('EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.');\n            return {\n                PixelSpacing: ImagerPixelSpacing,\n                type: CalibrationTypes.PROJECTION,\n                isProjection,\n            };\n        }\n        const correctedPixelSpacing = ImagerPixelSpacing.map((pixelSpacing) => pixelSpacing / EstimatedRadiographicMagnificationFactor);\n        return {\n            PixelSpacing: correctedPixelSpacing,\n            type: CalibrationTypes.ERMF,\n            isProjection,\n        };\n    }\n    if (isEqual(PixelSpacing, ImagerPixelSpacing)) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.PROJECTION,\n            isProjection,\n        };\n    }\n    if (PixelSpacingCalibrationType || PixelSpacingCalibrationDescription) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.CALIBRATED,\n            isProjection,\n            PixelSpacingCalibrationType,\n            PixelSpacingCalibrationDescription,\n        };\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.UNKNOWN,\n        isProjection,\n    };\n}\nfunction calculateUSPixelSpacing(instance) {\n    const { SequenceOfUltrasoundRegions } = instance;\n    const isArrayOfSequences = Array.isArray(SequenceOfUltrasoundRegions);\n    if (isArrayOfSequences && SequenceOfUltrasoundRegions.length > 1) {\n        console.warn('Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.');\n        return;\n    }\n    const { PhysicalDeltaX, PhysicalDeltaY } = isArrayOfSequences\n        ? SequenceOfUltrasoundRegions[0]\n        : SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [\n        Math.abs(PhysicalDeltaX) * 10,\n        Math.abs(PhysicalDeltaY) * 10,\n    ];\n    return {\n        PixelSpacing: USPixelSpacing,\n    };\n}\nexport default function getPixelSpacingInformation(instance) {\n    const { PixelSpacing, SOPClassUID, SequenceOfUltrasoundRegions } = instance;\n    if (SequenceOfUltrasoundRegions) {\n        return calculateUSPixelSpacing(instance);\n    }\n    const isProjection = projectionRadiographSOPClassUIDs.has(SOPClassUID);\n    if (isProjection) {\n        return calculateRadiographicPixelSpacing(instance);\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.NOT_APPLICABLE,\n        isProjection: false,\n    };\n}\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex, { transformWorldToIndexContinuous, } from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport * as HistoryMemo from './historyMemo';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nexport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport FrameRange from './FrameRange';\nimport fnv1aHash from './fnv1aHash';\nimport { getImageDataMetadata } from './getImageDataMetadata';\nimport { buildMetadata } from './buildMetadata';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nimport createSubVolume from './createSubVolume';\nimport getVolumeDirectionVectors from './getVolumeDirectionVectors';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport * as logger from './logger';\nimport { calculateNeighborhoodStats } from './calculateNeighborhoodStats';\nimport getPixelSpacingInformation from './getPixelSpacingInformation';\nimport { asArray } from './asArray';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport * from './isEqual';\nexport { FrameRange, eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, fnv1aHash, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, getMinMax, getRuntimeId, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, HistoryMemo, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, transformWorldToIndexContinuous, createSubVolume, getVolumeDirectionVectors, calculateSpacingBetweenImageIds, getImageDataMetadata, buildMetadata, calculateNeighborhoodStats, getPixelSpacingInformation, asArray, };\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport default function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nconst isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nconst isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nfunction isNumber(n) {\n    if (Array.isArray(n)) {\n        return isNumber(n[0]);\n    }\n    return isFinite(n) && !isNaN(n);\n}\nexport { isEqualNegative, isEqual, isEqualAbs, isNumber };\n","import loglevelImport from 'loglevel';\nconst loglevel = loglevelImport.noConflict();\nif (typeof window !== 'undefined') {\n    window.log = loglevel;\n}\nexport function getRootLogger(name) {\n    const logger = loglevel.getLogger(name[0]);\n    logger.getLogger = (...names) => {\n        return getRootLogger(`${name}.${names.join('.')}`);\n    };\n    return logger;\n}\nexport function getLogger(...name) {\n    return getRootLogger(name.join('.'));\n}\nexport const cs3dLog = getRootLogger('cs3d');\nexport const coreLog = cs3dLog.getLogger('core');\nexport const toolsLog = cs3dLog.getLogger('tools');\nexport const loaderLog = cs3dLog.getLogger('dicomImageLoader');\nexport const aiLog = cs3dLog.getLogger('ai');\nexport const examplesLog = cs3dLog.getLogger('examples');\nexport const dicomConsistencyLog = getLogger('consistency', 'dicom');\nexport const imageConsistencyLog = getLogger('consistency', 'image');\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nfunction isPointOnPlane(point, plane, tolerance = EPSILON) {\n    return planeDistanceToPoint(plane, point) < tolerance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, isPointOnPlane, };\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    const zSpacing = calculateSpacingBetweenImageIds(imageIds);\n    let sortedImageIds;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n    }\n    const { imagePositionPatient: origin } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\nexport function transformWorldToIndexContinuous(imageData, worldPos) {\n    return imageData.worldToIndex(worldPos);\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","import VOILUTFunctionType from '../enums/VOILUTFunctionType';\nimport { logit } from './logit';\nfunction toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n    if (voiLUTFunction === VOILUTFunctionType.LINEAR) {\n        return {\n            lower: windowCenter - 0.5 - (windowWidth - 1) / 2,\n            upper: windowCenter - 0.5 + (windowWidth - 1) / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.LINEAR_EXACT) {\n        return {\n            lower: windowCenter - windowWidth / 2,\n            upper: windowCenter + windowWidth / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n        const xLower = logit(0.01, windowCenter, windowWidth);\n        const xUpper = logit(0.99, windowCenter, windowWidth);\n        return {\n            lower: xLower,\n            upper: xUpper,\n        };\n    }\n    else {\n        throw new Error('Invalid VOI LUT function');\n    }\n}\nexport { toWindowLevel, toLowHighRange };\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n            bounce: playClipOptions.bounce ?? false,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    if (playClipOptions.bounce !== undefined) {\n        playClipData.bounce = playClipOptions.bounce;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (outOfRange) {\n            if (playClipData.bounce) {\n                playClipData.reverse = !playClipData.reverse;\n                newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n                newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));\n            }\n            else if (!playClipData.loop) {\n                _stopClip(element, {\n                    stopDynamicCine: !isDynamicCinePlaying,\n                    viewportId: viewport.id,\n                });\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n                return;\n            }\n            else {\n                newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;\n            }\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, getPromiseRemovedHandler, nearestIndex, range, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    preserveExistingPool: true,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\nfunction prefetch(element) {\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    const stack = getStackData(element);\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    indicesToRequestCopy.forEach(function (imageIdIndex) {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n    const nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);\n    let imageId;\n    let nextImageIdIndex;\n    const preventCache = false;\n    function doneCallback(image) {\n        console.log('prefetch done: %s', image.imageId);\n        const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n        removeFromList(imageIdIndex);\n    }\n    let lowerIndex = nearest.low;\n    let higherIndex = nearest.high;\n    const imageIdsToPrefetch = [];\n    while (lowerIndex >= 0 ||\n        higherIndex < stackPrefetch.indicesToRequest.length) {\n        const currentIndex = stack.currentImageIdIndex;\n        const shouldSkipLower = currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n            configuration.maxImagesToPrefetch;\n        const shouldSkipHigher = stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n            configuration.maxImagesToPrefetch;\n        const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n        const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n        if (!shouldLoadHigher && !shouldLoadLower) {\n            break;\n        }\n        if (shouldLoadLower) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n        if (shouldLoadHigher) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    imageIdsToPrefetch.forEach((imageId) => {\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nfunction enable(element) {\n    const stack = getStackData(element);\n    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = {\n        indicesToRequest: range(0, stack.imageIds.length - 1),\n        enabled: true,\n        direction: 1,\n    };\n    const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);\n    stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n    addToolState(element, stackPrefetchData);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n}\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n        stackPrefetchData.enabled = false;\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\nexport default stackPrefetch;\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, clearFromImageIds, getPromiseRemovedHandler, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    minBefore: 2,\n    maxAfter: 2,\n    directionExtraImages: 10,\n    preserveExistingPool: false,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 5;\nconst enable = (element) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    updateToolState(element);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n};\nfunction prefetch(element) {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    const { currentImageIdIndex } = stack;\n    indicesToRequestCopy.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n    }\n    function doneCallback(imageId) {\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        const image = cache.getCachedImageBasedOnImageURI(imageId);\n        const { stats } = stackPrefetch;\n        const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n        if (decodeTimeInMS) {\n            stats.imageIds.set(imageId, decodeTimeInMS);\n            stats.decodeTimeInMS += decodeTimeInMS;\n            const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n            stats.loadTimeInMS += loadTimeInMS;\n        }\n        if (!stackPrefetch.indicesToRequest.length) {\n            if (image?.sizeInBytes) {\n                const { sizeInBytes } = image;\n                const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n                if (!stackPrefetch.cacheFill) {\n                    stats.initialTime = Date.now() - stats.start;\n                    stats.initialSize = stats.imageIds.size;\n                    updateToolState(element, usage);\n                    prefetch(element);\n                }\n                else if (stats.imageIds.size) {\n                    stats.fillTime = Date.now() - stats.start;\n                    const { size } = stats.imageIds;\n                    stats.fillSize = size;\n                }\n            }\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    stackPrefetch.indicesToRequest.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            updateToolState(element);\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nconst signum = (x) => (x < 0 ? -1 : 1);\nconst updateToolState = (element, usage) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    let { maxAfter = 2, minBefore = 2 } = configuration;\n    const { directionExtraImages = 10 } = configuration;\n    const stackPrefetchData = getToolState(element) ||\n        {\n            indicesToRequest: [],\n            currentImageIdIndex,\n            stackCount: 0,\n            enabled: true,\n            direction: 1,\n            stats: {\n                start: Date.now(),\n                imageIds: new Map(),\n                decodeTimeInMS: 0,\n                loadTimeInMS: 0,\n                totalBytes: 0,\n            },\n        };\n    const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n    stackPrefetchData.direction = signum(delta);\n    stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n    stackPrefetchData.enabled = true;\n    if (stackPrefetchData.stackCount < 100) {\n        stackPrefetchData.stackCount += directionExtraImages;\n    }\n    if (Math.abs(delta) > maxAfter || !delta) {\n        stackPrefetchData.stackCount = 0;\n        if (usage) {\n            const positionFraction = currentImageIdIndex / stack.imageIds.length;\n            minBefore = Math.ceil(usage * positionFraction);\n            maxAfter = Math.ceil(usage * (1 - positionFraction));\n            stackPrefetchData.cacheFill = true;\n        }\n        else {\n            stackPrefetchData.cacheFill = false;\n        }\n    }\n    else if (delta < 0) {\n        minBefore += stackPrefetchData.stackCount;\n        maxAfter = 0;\n    }\n    else {\n        maxAfter += stackPrefetchData.stackCount;\n        minBefore = 0;\n    }\n    const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n    const maxIndex = Math.min(stack.imageIds.length - 1, currentImageIdIndex + maxAfter);\n    const indicesToRequest = [];\n    for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n        indicesToRequest.push(i);\n    }\n    for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n        indicesToRequest.push(i);\n    }\n    stackPrefetchData.indicesToRequest = indicesToRequest;\n    addToolState(element, stackPrefetchData);\n};\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData) {\n        stackPrefetchData.enabled = false;\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackContextPrefetch = {\n    enable,\n    disable,\n    getConfiguration,\n    setConfiguration,\n};\nexport default stackContextPrefetch;\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","export function pickPoints(hull, slack = 7) {\n    if (!hull.length) {\n        throw new Error('Convex hull is empty');\n    }\n    const n = hull.length;\n    const next = (i) => (i + 1) % n;\n    const walk = (from, to) => {\n        const idx = [];\n        for (let i = from;; i = next(i)) {\n            idx.push(i);\n            if (i === to) {\n                break;\n            }\n        }\n        return idx;\n    };\n    let i2 = 0, i3 = 0;\n    for (let i = 1; i < n; i++) {\n        if (hull[i][0] < hull[i2][0]) {\n            i2 = i;\n        }\n        if (hull[i][0] > hull[i3][0]) {\n            i3 = i;\n        }\n    }\n    const P2 = hull[i2];\n    const P3 = hull[i3];\n    const pathA = walk(i2, i3);\n    const pathB = walk(i3, i2);\n    const globalYmin = Math.min(...hull.map((p) => p[1]));\n    const upperPath = pathA.some((i) => hull[i][1] === globalYmin)\n        ? pathA\n        : pathB;\n    const topY = Math.min(...upperPath.map((i) => hull[i][1]));\n    let arcPts = upperPath\n        .map((i) => hull[i])\n        .filter((p) => Math.abs(p[1] - topY) <= slack);\n    if (arcPts.length < 2) {\n        arcPts = upperPath\n            .map((i) => hull[i])\n            .sort((a, b) => a[1] - b[1])\n            .slice(0, 2);\n    }\n    const P1 = arcPts.reduce((best, p) => (p[0] < best[0] ? p : best), arcPts[0]);\n    const P4 = arcPts.reduce((best, p) => (p[0] > best[0] ? p : best), arcPts[0]);\n    return { P1, P2, P3, P4 };\n}\nexport function computeEdgeBuffer(buffer, width, height) {\n    const total = width * height;\n    const channels = buffer.length / total;\n    if (![1, 3, 4].includes(channels)) {\n        throw new Error('Buffer must be 1,3 or 4 channels per pixel');\n    }\n    const gray = new Float32Array(total);\n    for (let i = 0; i < total; i++) {\n        if (channels === 1) {\n            gray[i] = buffer[i];\n        }\n        else {\n            const base = i * channels;\n            const r = buffer[base];\n            const g = buffer[base + 1];\n            const b = buffer[base + 2];\n            gray[i] = 0.299 * r + 0.587 * g + 0.114 * b;\n        }\n    }\n    const edgeBuf = new Float32Array(total);\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = y * width + x;\n            const i00 = idx - width - 1;\n            const i01 = idx - width;\n            const i02 = idx - width + 1;\n            const i10 = idx - 1;\n            const i11 = idx;\n            const i12 = idx + 1;\n            const i20 = idx + width - 1;\n            const i21 = idx + width;\n            const i22 = idx + width + 1;\n            const gx = -gray[i00] +\n                gray[i02] +\n                -2 * gray[i10] +\n                2 * gray[i12] +\n                -gray[i20] +\n                gray[i22];\n            const gy = gray[i00] +\n                2 * gray[i01] +\n                gray[i02] -\n                gray[i20] -\n                2 * gray[i21] -\n                gray[i22];\n            edgeBuf[idx] = Math.hypot(gx, gy);\n        }\n    }\n    return edgeBuf;\n}\nexport function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {\n    const { maxDist = 15, slack = 2 } = opts;\n    const directions = {\n        P1: { dx: -1, dy: -1 },\n        P2: { dx: -1, dy: +1 },\n        P3: { dx: +1, dy: +1 },\n        P4: { dx: +1, dy: -1 },\n    };\n    function snapQuadrant(pt, { dx, dy }, threshold = 5) {\n        const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;\n        const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;\n        const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;\n        const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;\n        let best = pt;\n        for (const [cx, cy] of contour) {\n            if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {\n                continue;\n            }\n            const xi = Math.round(cx);\n            const yi = Math.round(cy);\n            if (xi < 0 || xi >= width || yi < 0 || yi >= height) {\n                continue;\n            }\n            const xAlign = (xi - best[0]) * dx;\n            const yAlign = (yi - best[0]) * dy;\n            const v = edgeBuf[yi * width + xi];\n            if (v > threshold && (xAlign > 0 || yAlign > 0)) {\n                best = [cx, cy];\n            }\n        }\n        return best;\n    }\n    return {\n        P1: snapQuadrant(rough.P1, directions.P1),\n        P2: snapQuadrant(rough.P2, directions.P2),\n        P3: snapQuadrant(rough.P3, directions.P3),\n        P4: snapQuadrant(rough.P4, directions.P4),\n    };\n}\nexport function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {\n    const rough = pickPoints(hull);\n    const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {\n        maxDist: 20,\n        step: 0.5,\n    });\n    return refined;\n}\n","import { intersectLine } from '../../../../utilities/math/line';\nfunction angleRad(center, p) {\n    return Math.atan2(p[1] - center[1], p[0] - center[0]);\n}\nexport function deriveFanGeometry(params) {\n    const { P1, P2, P3, P4 } = params;\n    const centerResult = intersectLine(P1, P2, P4, P3, true);\n    if (!centerResult) {\n        throw new Error('Fan edges appear parallel — no apex found');\n    }\n    const center = centerResult;\n    let startAngle = angleRad(center, P1) * (180 / Math.PI);\n    let endAngle = angleRad(center, P4) * (180 / Math.PI);\n    if (endAngle <= startAngle) {\n        const tempAngle = startAngle;\n        startAngle = endAngle;\n        endAngle = tempAngle;\n    }\n    const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);\n    const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);\n    const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);\n    const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);\n    const innerRadius = Math.min(d1, d4);\n    const outerRadius = Math.max(d2, d3);\n    return {\n        center,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius,\n    };\n}\n","import { cache } from '@cornerstonejs/core';\nimport { segmentLargestUSOutlineFromBuffer } from './segmentLargestUSOutlineFromBuffer';\nimport { generateConvexHullFromContour } from './generateConvexHullFromContour';\nimport { calculateFanShapeCorners } from './calculateFanShapeCorners';\nimport { deriveFanGeometry } from './deriveFanGeometry';\nexport function exportContourJpeg(pixelData, width, height, contour, opts = {}) {\n    const { strokeStyle = '#f00', lineWidth = 2, quality = 0.92 } = opts;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const totalPixels = width * height;\n    const channels = pixelData.length / totalPixels;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        const baseIn = i * channels;\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[baseIn];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    if (contour.length > 0) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);\n        for (let i = 1; i < contour.length; i++) {\n            ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function getPixelData(imageId) {\n    const image = cache.getImage(imageId);\n    if (!image) {\n        return;\n    }\n    const width = image.width;\n    const height = image.height;\n    const pixelData = image.getPixelData();\n    return {\n        pixelData,\n        width,\n        height,\n    };\n}\nexport default function saveBinaryData(url, filename) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.click();\n    a.remove();\n}\nfunction exportFanJpeg(pixelData, width, height, fan, opts = {}) {\n    const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius, } = fan;\n    const { strokeStyle = '#0ff', lineWidth = 2, quality = 0.92 } = opts;\n    const startAngle = (startAngleInDegrees * Math.PI) / 180;\n    const endAngle = (endAngleInDegrees * Math.PI) / 180;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const total = width * height;\n    const channels = pixelData.length / total;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < total; i++) {\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[i];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            const baseIn = i * channels;\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    ctx.beginPath();\n    for (let a = startAngle; a <= endAngle; a += 0.01) {\n        const x = center[0] + innerRadius * Math.cos(a);\n        const y = center[1] + innerRadius * Math.sin(a);\n        if (a === startAngle) {\n            ctx.moveTo(x, y);\n        }\n        else {\n            ctx.lineTo(x, y);\n        }\n    }\n    for (let a = endAngle; a >= startAngle; a -= 0.01) {\n        const x = center[0] + outerRadius * Math.cos(a);\n        const y = center[1] + outerRadius * Math.sin(a);\n        ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function downloadFanJpeg(imageId, contourType = 5) {\n    const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    let jpegDataUrl;\n    if (contourType === 1) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);\n    }\n    else if (contourType === 2) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);\n    }\n    else if (contourType === 3) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);\n    }\n    else if (contourType === 4) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, [\n            refined.P1,\n            refined.P2,\n            refined.P3,\n            refined.P4,\n        ]);\n    }\n    else {\n        jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {\n            strokeStyle: '#f00',\n            lineWidth: 3,\n            quality: 0.95,\n        });\n    }\n    saveBinaryData(jpegDataUrl, 'contour.jpg');\n}\nexport function calculateFanGeometry(imageId) {\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);\n    const { simplified, hull } = generateConvexHullFromContour(contour);\n    const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);\n    const fanGeometry = deriveFanGeometry({\n        P1: refined.P1,\n        P2: refined.P2,\n        P3: refined.P3,\n        P4: refined.P4,\n    });\n    return { contour, simplified, hull, refined, fanGeometry };\n}\n","import { floodFill } from '../../../../utilities/segmentation';\nexport function segmentLargestUSOutlineFromBuffer(buffer, width, height) {\n    const totalPixels = width * height;\n    const channelCount = buffer.length / totalPixels;\n    if (![1, 3, 4].includes(channelCount)) {\n        throw new Error('Buffer must be 1, 3, or 4 channels per pixel');\n    }\n    const mask = Array.from({ length: height }, () => new Array(width).fill(false));\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const pixelIndex = y * width + x;\n            const base = pixelIndex * channelCount;\n            let isForeground = false;\n            for (let c = 0; c < Math.min(3, channelCount); c++) {\n                if (buffer[base + c] > 0) {\n                    isForeground = true;\n                    break;\n                }\n            }\n            mask[y][x] = isForeground;\n        }\n    }\n    const labels = Array.from({ length: height }, () => new Array(width).fill(0));\n    let currentLabel = 0;\n    const regionSizes = {};\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (mask[y][x] && labels[y][x] === 0) {\n                currentLabel++;\n                const getter = (px, py) => {\n                    if (px < 0 || px >= width || py < 0 || py >= height) {\n                        return false;\n                    }\n                    return mask[py][px] && labels[py][px] === 0;\n                };\n                let pixelCount = 0;\n                const options = {\n                    onFlood: (px, py) => {\n                        labels[py][px] = currentLabel;\n                        pixelCount++;\n                    },\n                    diagonals: false,\n                };\n                floodFill(getter, [x, y], options);\n                regionSizes[currentLabel] = pixelCount;\n            }\n        }\n    }\n    if (currentLabel === 0) {\n        return [];\n    }\n    const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);\n    function isBorder(x, y) {\n        if (labels[y][x] !== +largestLabel) {\n            return false;\n        }\n        for (const [dx, dy] of [\n            [1, 0],\n            [-1, 0],\n            [0, 1],\n            [0, -1],\n        ]) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                labels[ny][nx] !== +largestLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n    let start = null;\n    outer: for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (isBorder(x, y)) {\n                start = [x, y];\n                break outer;\n            }\n        }\n    }\n    if (!start) {\n        return [];\n    }\n    const dirs = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n    ];\n    const contour = [];\n    let current = start;\n    let prev = [start[0] - 1, start[1]];\n    do {\n        contour.push([current[0], current[1]]);\n        const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];\n        let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);\n        if (startDir < 0) {\n            startDir = 0;\n        }\n        let nextPt = null;\n        for (let k = 1; k <= 8; k++) {\n            const [dx, dy] = dirs[(startDir + k) % 8];\n            const nx = current[0] + dx, ny = current[1] + dy;\n            if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {\n                nextPt = [nx, ny];\n                const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];\n                prev = [current[0] + bdx, current[1] + bdy];\n                break;\n            }\n        }\n        if (!nextPt) {\n            break;\n        }\n        current = nextPt;\n    } while (current[0] !== start[0] || current[1] !== start[1]);\n    return contour;\n}\n","import { utilities } from '@cornerstonejs/tools';\nexport function generateConvexHullFromContour(contour) {\n    const simplified = utilities.math.polyline.decimate(contour, 2);\n    const hull = utilities.math.polyline.convexHull(simplified);\n    return { simplified, hull };\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nimport * as usFanExtraction from '../tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, usFanExtraction, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            imageDynamicRange = Math.min(calculatedDynamicRange[1] - calculatedDynamicRange[0], metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return ratio > 1 ? Math.round(ratio) : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Enums, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { Events } from '../enums';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                spacing = imageData.spacing;\n                const { dimensions } = imageData;\n                const imageWidth = dimensions[0] * spacing[0];\n                const imageHeight = dimensions[1] * spacing[1];\n                const canvasAspect = size[0] / size[1];\n                const displayArea = viewport.options?.displayArea;\n                const imageAreaScaleX = displayArea?.imageArea?.[0] ?? 1.1;\n                const imageAreaScaleY = displayArea?.imageArea?.[1] ?? 1.1;\n                const scaledImageWidth = imageWidth * imageAreaScaleX;\n                const scaledImageHeight = imageHeight * imageAreaScaleY;\n                const scaledImageAspect = scaledImageWidth / scaledImageHeight;\n                let minParallelScaleRequired;\n                if (scaledImageAspect > canvasAspect) {\n                    minParallelScaleRequired = (scaledImageWidth / canvasAspect) * 0.5;\n                }\n                else {\n                    minParallelScaleRequired = scaledImageHeight * 0.5;\n                }\n                const { minZoomScale, maxZoomScale } = this.configuration;\n                const minScaleInWorld = minParallelScaleRequired / maxZoomScale;\n                const maxScaleInWorld = minParallelScaleRequired / minZoomScale;\n                if (parallelScaleToSet < minScaleInWorld) {\n                    cappedParallelScale = minScaleInWorld;\n                    thresholdExceeded = true;\n                }\n                else if (parallelScaleToSet > maxScaleInWorld) {\n                    cappedParallelScale = maxScaleInWorld;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    mouseWheelCallback(evt) {\n        this._zoom(evt);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _zoom(evt) {\n        const { element, points } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const wheelData = evt.detail.wheel;\n        const direction = wheelData.direction;\n        const eventDetails = {\n            detail: {\n                element,\n                eventName: Events.MOUSE_WHEEL,\n                renderingEngineId: enabledElement.renderingEngineId,\n                viewportId: viewport.id,\n                camera: {},\n                deltaPoints: {\n                    page: points.page,\n                    client: points.client,\n                    world: points.world,\n                    canvas: [0, -direction * 5],\n                },\n                startPoints: points,\n                lastPoints: points,\n                currentPoints: points,\n            },\n        };\n        if (viewport.type === Enums.ViewportType.STACK) {\n            this.preMouseDownCallback(eventDetails);\n        }\n        this._dragCallback(eventDetails);\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nconst EPSILON = 1e-3;\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            referenceLinesCenterGapRatio: null,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n                referenceLinesCenterGapRatio: 0.05,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const mobileConfig = this.configuration.mobile;\n                const { referenceLinesCenterGapRatio } = mobileConfig?.enabled\n                    ? mobileConfig\n                    : this.configuration;\n                const centerGap = referenceLinesCenterGapRatio > 0\n                    ? canvasMinDimensionLength * referenceLinesCenterGapRatio\n                    : this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = this.editData.annotation.data.handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        this.toolCenter = toolCenter;\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            const { element } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n            updateCursorSize: 'dynamic',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            deltaWorld: eventData.deltaPoints.world,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            if (this.configuration.updateCursorSize === 'dynamic') {\n                cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n            }\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID: null,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.text], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle, interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n            textCanvasOffset: {\n                x: 6,\n                y: -6,\n            },\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + this.configuration.textCanvasOffset.x,\n                        canvasCoordinates[1] + this.configuration.textCanvasOffset.y,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    initialRotation: viewport.getRotation(),\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const [bottom, top, left, right] = canvasCoordinates;\n            const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n            const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n            const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);\n            const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n            const minorEllipse = {\n                center,\n                xRadius: (w - proximity) / 2,\n                yRadius: (h - proximity) / 2,\n                angle,\n            };\n            const majorEllipse = {\n                center,\n                xRadius: (w + proximity) / 2,\n                yRadius: (h + proximity) / 2,\n                angle,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const post2Index = transformWorldToIndex(imageData, worldPos2);\n                post2Index[0] = Math.floor(post2Index[0]);\n                post2Index[1] = Math.floor(post2Index[1]);\n                post2Index[2] = Math.floor(post2Index[2]);\n                this.isHandleOutsideImage = !this._isInsideVolume(pos1Index, post2Index, dimensions);\n                const iMin = Math.min(pos1Index[0], post2Index[0]);\n                const iMax = Math.max(pos1Index[0], post2Index[0]);\n                const jMin = Math.min(pos1Index[1], post2Index[1]);\n                const jMax = Math.max(pos1Index[1], post2Index[1]);\n                const kMin = Math.min(pos1Index[2], post2Index[2]);\n                const kMax = Math.max(pos1Index[2], post2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = [\n                    (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                    (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                    (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                ];\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                const handles = [pos1Index, post2Index];\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n                    scale /\n                    scale;\n                const pixelUnitsOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                let pointsInShape;\n                if (voxelManager) {\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        boundsIJK,\n                        imageData,\n                        isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                        returnPoints: this.configuration.storePointData,\n                    });\n                }\n                const stats = this.configuration.statsCalculator.getStatistics();\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    mean: stats.mean?.value,\n                    max: stats.max?.value,\n                    min: stats.min?.value,\n                    stdDev: stats.stdDev?.value,\n                    statsArray: stats.array,\n                    pointsInShape,\n                    isEmptyArea,\n                    areaUnit,\n                    modalityUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const { xRadius, yRadius, center, angle } = ellipse;\n        const rotLocation = vec2.rotate(vec2.create(), location, center, -angle);\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2, vec3 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            simplified: true,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { points } = annotation.data.handles;\n            const canvasHandles = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasHandles[0];\n            const radius = getCanvasCircleRadius([canvasCenter, canvasHandles[1]]);\n            const radiusPoint = getCanvasCircleRadius([canvasCenter, canvasCoords]);\n            return Math.abs(radiusPoint - radius) < proximity / 2;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { world: worldPos, canvas: currentCanvasPoints } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const centerWorld = data.handles.points[0];\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            if (this.configuration.simplified) {\n                data.handles.points[1] = worldPos;\n            }\n            else {\n                const radiusCanvas = vec2.distance(centerCanvas, currentCanvasPoints);\n                data.handles.points[0] = [...centerWorld];\n                data.handles.points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - radiusCanvas,\n                ]);\n                data.handles.points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + radiusCanvas,\n                ]);\n                data.handles.points[3] = canvasToWorld([\n                    centerCanvas[0] - radiusCanvas,\n                    centerCanvas[1],\n                ]);\n                data.handles.points[4] = canvasToWorld([\n                    centerCanvas[0] + radiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints, deltaPoints } = eventDetail;\n            if (handleIndex === 0) {\n                const worldPosDelta = deltaPoints.world;\n                points.forEach((point) => {\n                    vec3.add(point, point, worldPosDelta);\n                });\n            }\n            else {\n                const centerWorld = points[0];\n                const centerCanvas = worldToCanvas(centerWorld);\n                const currentCanvasPoint = currentPoints.canvas;\n                const newRadiusCanvas = vec2.distance(centerCanvas, currentCanvasPoint);\n                points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - newRadiusCanvas,\n                ]);\n                points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + newRadiusCanvas,\n                ]);\n                points[3] = canvasToWorld([\n                    centerCanvas[0] - newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n                points[4] = canvasToWorld([\n                    centerCanvas[0] + newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                annotation.highlighted = false;\n                annotation.data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([center, canvasCoordinates[1]]);\n                const canvasCorners = getCanvasCircleCorners([\n                    center,\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.calculateStats) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, targetId);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [center, canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasCoordinates[0];\n            const canvasTop = canvasCoordinates[1];\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([canvasCenter, canvasTop]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = points[0];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(radius)) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nconst splineToolNames = [\n    'CatmullRomSplineROI',\n    'LinearSplineROI',\n    'BSplineROI',\n    'CardinalSplineROI',\n];\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            simplifiedSpline: false,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                enableTwoPointPreview: false,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.splineToolNames = [\n            'CatmullRomSplineROI',\n            'LinearSplineROI',\n            'BSplineROI',\n            'CardinalSplineROI',\n        ];\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n        this.annotationCompletedBinded = this.annotationCompleted.bind(this);\n    }\n    annotationCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline ||\n            !this.isContourSegmentationTool()) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.removeListeners();\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints >= 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const { enableTwoPointPreview } = this.configuration.spline;\n            if (spline.numControlPoints === 1 && enableTwoPointPreview) {\n                const firstPoint = canvasCoordinates[0];\n                const previewPolylinePoints = [firstPoint, lastCanvasPoint];\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n            else if (spline.numControlPoints > 1) {\n                const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    isSplineAnnotation(annotation) {\n        return splineToolNames.includes(annotation?.metadata?.toolName);\n    }\n    createSplineObjectFromType(annotation, splineType) {\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        annotation.data.spline = {\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        };\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { eventTarget, utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nimport { Events } from '../../enums';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.annotationCutMergeCompletedBinded =\n            this.annotationCutMergeCompleted.bind(this);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    annotationCutMergeCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const { arrowFirst } = this.configuration;\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        arrowFirst,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((text) => {\n                    if (!text) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.text = text;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, text);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, text } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text: text || '',\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawPath as drawPathSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            showAngleArc: false,\n            arcOffset: 5,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (this.configuration.showAngleArc) {\n                    const center = canvasCoordinates[1];\n                    const offset = this.configuration.arcOffset;\n                    const radius = Math.min(lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;\n                    const anglePoints = [];\n                    let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);\n                    let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);\n                    if (endAngle < startAngle) {\n                        endAngle += 2 * Math.PI;\n                    }\n                    const angleDifference = endAngle - startAngle;\n                    if (angleDifference > Math.PI) {\n                        const temp = startAngle;\n                        startAngle = endAngle;\n                        endAngle = temp + 2 * Math.PI;\n                    }\n                    const segments = 32;\n                    for (let i = 0; i <= segments; i++) {\n                        const angle = startAngle + (i / segments) * (endAngle - startAngle);\n                        anglePoints.push([\n                            center[0] + radius * Math.cos(angle),\n                            center[1] + radius * Math.sin(angle),\n                        ]);\n                    }\n                    drawPathSvg(svgDrawingHelper, annotationUID, '3', anglePoints, {\n                        color: color,\n                        width: lineWidth,\n                        lineDash: angleArcLineDash,\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events, ChangeTypes } from '../../../enums';\nimport { getEnabledElement, utilities, metaData, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawFan as drawFanSvg, } from '../../../drawingSvg';\nimport { state } from '../../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../../cursors/elementCursor';\nimport { angleFromCenter, calculateInnerFanPercentage, clipInterval, intervalFromPoints, mergeIntervals, subtractIntervals, } from '../../../utilities/math/fan/fanUtils';\nimport { calculateFanGeometry } from './utils/fanExtraction';\nconst { transformIndexToWorld } = utilities;\nclass UltrasoundPleuraBLineTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundPleuraBLineTool'; }\n    static { this.USPleuraBLineAnnotationType = {\n        BLINE: 'bLine',\n        PLEURA: 'pleura',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            center: null,\n            innerRadius: null,\n            outerRadius: null,\n            startAngle: null,\n            endAngle: null,\n            bLineColor: 'rgb(60, 255, 60)',\n            pleuraColor: 'rgb(0, 4, 255)',\n            drawDepthGuide: true,\n            depth_ratio: 0.5,\n            depthGuideColor: 'rgb(0, 255, 255)',\n            depthGuideThickness: 4,\n            depthGuideDashLength: 20,\n            depthGuideDashGap: 16,\n            depthGuideOpacity: 0.2,\n            fanOpacity: 0.1,\n            showFanAnnotations: true,\n            updatePercentageCallback: null,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.pleuraAnnotations = [];\n        this.bLineAnnotations = [];\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    annotationType: this.getActiveAnnotationType(),\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element) || {};\n            if (!viewport) {\n                return;\n            }\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                const allPointsInsideShape = points.every((point) => {\n                    const newPoint = [\n                        point[0] + worldPosDelta[0],\n                        point[1] + worldPosDelta[1],\n                        point[2] + worldPosDelta[2],\n                    ];\n                    return this.isInsideFanShape(viewport, newPoint);\n                });\n                if (allPointsInsideShape) {\n                    points.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                    annotation.invalidated = true;\n                }\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                if (this.isInsideFanShape(viewport, worldPos)) {\n                    data.handles.points[handleIndex] = [...worldPos];\n                    annotation.invalidated = true;\n                }\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            if (!this.getFanShapeGeometryParameters(viewport)) {\n                return;\n            }\n            const { imageData } = viewport.getImageData() || {};\n            if (!imageData) {\n                return renderStatus;\n            }\n            if (this.configuration.drawDepthGuide) {\n                this.drawDepthGuide(svgDrawingHelper, viewport);\n            }\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const fanCenter = viewport.worldToCanvas(transformIndexToWorld(imageData, this.configuration.center));\n            const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);\n            const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;\n            const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;\n            const currentImageId = viewport.getCurrentImageId();\n            const unMergedPleuraIntervals = annotations\n                .filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId)\n                .map((annotation) => {\n                const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n                const interval = intervalFromPoints(fanCenter, canvasCoordinates);\n                return interval;\n            });\n            const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);\n            const pleuraIntervalsDisplayed = [];\n            const bLineIntervalsDisplayed = [];\n            const drawAnnotation = (annotation) => {\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    return;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color: this.getColorForLineType(annotation),\n                        fill: this.getColorForLineType(annotation),\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color: this.getColorForLineType(annotation),\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                if (this.configuration.showFanAnnotations) {\n                    const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);\n                    let fanNumber = 0;\n                    if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                        const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval) => {\n                            const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);\n                            clippedIntervals.forEach((clippedInterval) => {\n                                fanNumber++;\n                                const fanIndex = fanNumber;\n                                const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                                const fanUID = `2-${fanIndex}`;\n                                drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {\n                                    color: 'transparent',\n                                    fill: this.getColorForLineType(annotation),\n                                    fillOpacity: this.configuration.fanOpacity,\n                                    width: lineWidth,\n                                    lineDash,\n                                    shadow,\n                                }, fanDataId, 10);\n                                bLineIntervalsDisplayed.push(clippedInterval);\n                            });\n                        });\n                    }\n                    else if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                        const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval, index) => {\n                            fanNumber++;\n                            const fanIndex = fanNumber;\n                            const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                            const fanUID = `2-${fanIndex}`;\n                            drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {\n                                color: 'transparent',\n                                fill: this.getColorForLineType(annotation),\n                                fillOpacity: this.configuration.fanOpacity,\n                                width: lineWidth,\n                                lineDash,\n                                shadow,\n                            }, fanDataId, 5);\n                            pleuraIntervalsDisplayed.push(interval);\n                        });\n                    }\n                }\n            };\n            const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId);\n            pleuraAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n                annotation.metadata.referencedImageId === currentImageId);\n            bLineAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            renderStatus = true;\n            if (this.configuration.updatePercentageCallback && viewport) {\n                this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));\n            }\n            return renderStatus;\n        };\n        this.activeAnnotationType =\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;\n    }\n    static filterAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return [];\n        }\n        const filteredAnnotations = annotations.filter((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            return filterFunction(currentImageId);\n        });\n        return filteredAnnotations;\n    }\n    static countAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        const { viewport } = getEnabledElement(element);\n        const imageIds = viewport.getImageIds();\n        const getImageIdIndex = (imageId) => {\n            const index = imageIds.findIndex((id) => id === imageId);\n            if (index === -1) {\n                return 0;\n            }\n            return index;\n        };\n        if (!annotations?.length) {\n            return;\n        }\n        const annotationMapping = new Map();\n        annotations.forEach((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            if (!filterFunction(currentImageId)) {\n                return;\n            }\n            const { annotationType } = annotation.data;\n            let counts;\n            if (annotationMapping.has(currentImageId)) {\n                counts = annotationMapping.get(currentImageId);\n            }\n            else {\n                counts = {\n                    frame: getImageIdIndex(currentImageId),\n                    bLine: 0,\n                    pleura: 0,\n                };\n            }\n            if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                counts.pleura++;\n            }\n            else if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                counts.bLine++;\n            }\n            annotationMapping.set(currentImageId, counts);\n        });\n        return annotationMapping;\n    }\n    static deleteAnnotations(element, filterFunction = () => false) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return;\n        }\n        annotations.forEach((annotation) => {\n            if (!filterFunction(annotation.metadata.referencedImageId)) {\n                return;\n            }\n            removeAnnotation(annotation.annotationUID);\n        });\n    }\n    setActiveAnnotationType(type) {\n        this.activeAnnotationType = type;\n    }\n    getActiveAnnotationType() {\n        return this.activeAnnotationType;\n    }\n    deleteLastAnnotationType(element, type) {\n        let annotationList;\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);\n        }\n        else if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);\n        }\n        if (annotationList?.length > 0) {\n            const annotation = annotationList.pop();\n            removeAnnotation(annotation.annotationUID);\n        }\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(UltrasoundPleuraBLineTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    isInsideFanShape(viewport, point) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return false;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (imageData) {\n            const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            const angle = angleFromCenter(fanCenter, canvasCoordinates);\n            return (angle >= this.configuration.startAngle &&\n                angle <= this.configuration.endAngle);\n        }\n    }\n    updateFanGeometryConfiguration(fanGeometry) {\n        if (!fanGeometry) {\n            return;\n        }\n        if (this.isFanShapeGeometryParametersValid(fanGeometry)) {\n            this.configuration.center = [\n                fanGeometry.center[0],\n                fanGeometry.center[1],\n                0,\n            ];\n        }\n        this.configuration.innerRadius = fanGeometry.innerRadius;\n        this.configuration.outerRadius = fanGeometry.outerRadius;\n        this.configuration.startAngle = fanGeometry.startAngle;\n        this.configuration.endAngle = fanGeometry.endAngle;\n    }\n    deriveFanGeometryFromViewport(viewport) {\n        const imageId = viewport.getCurrentImageId();\n        const { fanGeometry } = calculateFanGeometry(imageId) || {};\n        if (fanGeometry) {\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n    }\n    isFanShapeGeometryParametersValid(fanGeometry) {\n        if (!fanGeometry) {\n            fanGeometry = this.configuration;\n        }\n        return (fanGeometry?.center &&\n            fanGeometry?.innerRadius > 0 &&\n            fanGeometry?.outerRadius &&\n            fanGeometry?.startAngle > 0 &&\n            fanGeometry?.startAngle < 360 &&\n            fanGeometry?.endAngle > 0 &&\n            fanGeometry?.endAngle < 360);\n    }\n    getFanShapeGeometryParameters(viewport) {\n        if (this.isFanShapeGeometryParametersValid()) {\n            return true;\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            const imageId = viewport.getCurrentImageId();\n            const fanGeometry = metaData.get('ultrasoundFanShapeGeometry', imageId);\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            this.deriveFanGeometryFromViewport(viewport);\n        }\n        return this.isFanShapeGeometryParametersValid();\n    }\n    calculateBLinePleuraPercentage(viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const { element } = viewport;\n        const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n        const currentImageId = viewport.getCurrentImageId();\n        const annotations = getAnnotations(this.getToolName(), element) || [];\n        const pleuraIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        const bLineIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);\n    }\n    getColorForLineType(annotation) {\n        const { annotationType } = annotation.data;\n        const { bLineColor, pleuraColor } = this.configuration;\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            return bLineColor;\n        }\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            return pleuraColor;\n        }\n        return bLineColor;\n    }\n    getIndexToCanvasRatio(viewport) {\n        const { imageData } = viewport.getImageData() || {};\n        const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));\n        const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));\n        const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];\n        const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);\n        return vectorSize;\n    }\n    drawDepthGuide(svgDrawingHelper, viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const radToDegree = (rad) => (rad * 180) / Math.PI;\n        const degreeToRad = (degree) => (degree * Math.PI) / 180;\n        const indexToCanvas = (point) => {\n            return viewport.worldToCanvas(transformIndexToWorld(imageData, point));\n        };\n        const depth_radius = this.configuration.innerRadius +\n            this.configuration.depth_ratio *\n                (this.configuration.outerRadius - this.configuration.innerRadius);\n        const theta_start = this.configuration.startAngle;\n        const theta_end = this.configuration.endAngle;\n        const theta_range = theta_end - theta_start;\n        const arc_length = degreeToRad(theta_range) * depth_radius;\n        let num_dashes = Math.round(arc_length /\n            (this.configuration.depthGuideDashLength +\n                this.configuration.depthGuideDashGap));\n        if (num_dashes <= 0) {\n            num_dashes = Math.max(15, Math.round(theta_range / 5));\n        }\n        const theta_step = theta_range / num_dashes;\n        for (let i = 0; i < num_dashes; i++) {\n            const theta1 = degreeToRad(theta_start + i * theta_step);\n            const theta2 = degreeToRad(theta_start +\n                i * theta_step +\n                radToDegree(this.configuration.depthGuideDashLength) / depth_radius);\n            const start_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta1),\n                this.configuration.center[1] + depth_radius * Math.sin(theta1),\n                0,\n            ];\n            const end_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta2),\n                this.configuration.center[1] + depth_radius * Math.sin(theta2),\n                0,\n            ];\n            drawLineSvg(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {\n                color: this.configuration.depthGuideColor,\n                lineWidth: this.configuration.depthGuideThickness,\n                strokeOpacity: this.configuration.depthGuideOpacity,\n            });\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (utilities.indexWithinDimensions(index1, dimensions) &&\n            utilities.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    return [''];\n}\nexport default UltrasoundPleuraBLineTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            simplified: true,\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [canvasCoordinates[0], canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const handlesToStart = csUtils.deepClone(points);\n        const startWorld = vec3.clone(points[0]);\n        const endWorld = vec3.clone(points[0]);\n        const indexOfNormal = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        startWorld[indexOfNormal] = startCoordinate;\n        endWorld[indexOfNormal] = endCoordinate;\n        handlesToStart.forEach((handlePoint) => {\n            handlePoint[indexOfNormal] = startCoordinate;\n        });\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        if (distance >= 0) {\n            newProjectionPoints.push(handlesToStart.map((p) => Array.from(p)));\n        }\n        for (let dist = spacingInNormal; dist <= distance; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const baseTopLeftCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[0];\n        const baseBottomRightCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[1];\n        const basePos1 = viewport.canvasToWorld(baseTopLeftCanvas);\n        const basePos2 = viewport.canvasToWorld(baseBottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, basePos1, basePos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles.points);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const currentCanvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([\n                currentCanvasCoordinates[0],\n                currentCanvasCoordinates[1],\n            ]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewport.id)\n                .getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewportId)\n                .getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const color = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, hoveredSegmentIndex);\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            color,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, color, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const offset = -15;\n        const textBoxPosition = [\n            canvasCoordinates[0] + offset,\n            canvasCoordinates[1] + offset,\n        ];\n        const boundingBox = drawTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ?? '(unnamed segment)'], textBoxPosition, {\n            color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n        });\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { Events, SegmentationRepresentations } from '../../enums';\nimport { eventTarget, utilities, getRenderingEngine, } from '@cornerstonejs/core';\nimport PlanarFreehandContourSegmentationTool from '../annotation/PlanarFreehandContourSegmentationTool';\nimport BrushTool from './BrushTool';\nimport * as segmentation from '../../stateManagement/segmentation';\nimport { getSegmentationRepresentationsBySegmentationId } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nclass LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool {\n    static { this.toolName = 'LabelMapEditWithContour'; }\n    static { this.annotationsToViewportMap = new Map(); }\n    static { this.viewportIdsChecked = []; }\n    constructor(toolProps = {}) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.onViewportAddedToToolGroupBinded =\n            this.onViewportAddedToToolGroup.bind(this);\n        this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);\n    }\n    initializeListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n    }\n    cleanUpListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n    }\n    async checkContourSegmentation(viewportId) {\n        if (LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {\n            return;\n        }\n        const activeSeg = segmentation.getActiveSegmentation(viewportId);\n        if (!activeSeg) {\n            console.log('No active segmentation detected');\n            return false;\n        }\n        const segmentationId = activeSeg.segmentationId;\n        if (!activeSeg.representationData.Contour) {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n            await segmentation.addContourRepresentationToViewport(viewportId, [\n                {\n                    segmentationId,\n                    type: SegmentationRepresentations.Contour,\n                },\n            ]);\n            segmentation.addRepresentationData({\n                segmentationId,\n                type: SegmentationRepresentations.Contour,\n                data: {},\n            });\n        }\n        else {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n        }\n        return true;\n    }\n    onViewportAddedToToolGroup(evt) {\n        const { toolGroupId, viewportId } = evt.detail;\n        if (toolGroupId !== this.toolGroupId) {\n            return;\n        }\n        this.checkContourSegmentation(viewportId);\n    }\n    onSegmentationModified(evt) {\n        const { segmentationId } = evt.detail || {};\n        if (!segmentationId) {\n            return;\n        }\n        const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);\n        if (!representations) {\n            return;\n        }\n        representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.cleanUpListeners();\n    }\n    annotationModified(evt) {\n        const { annotation, renderingEngineId, viewportId } = evt.detail;\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        if (!viewport) {\n            return;\n        }\n        LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);\n    }\n    annotationCompleted(evt) {\n        const { annotation } = evt.detail;\n        const { polyline } = annotation.data?.contour || {};\n        if (annotation?.metadata?.toolName !== LabelMapEditWithContourTool.toolName) {\n            return;\n        }\n        if (!polyline) {\n            return;\n        }\n        if (LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {\n            const viewport = LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);\n            if (polyline.length > 3) {\n                BrushTool.viewportContoursToLabelmap(viewport);\n            }\n        }\n    }\n}\nexport default LabelMapEditWithContourTool;\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.metadata.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nconst Dir = {\n  Forward: 1,\n  Backward: -1\n};\nconst visited = new Set();\nfunction vtkContourLoopExtraction(publicAPI, model) {\n  publicAPI.requestData = (inData, outData) => {\n    const [input] = inData;\n    if (!outData[0]) {\n      outData[0] = vtkPolyData.newInstance();\n    }\n    const [output] = outData;\n    publicAPI.extractContours(input, output);\n    output.modified();\n  };\n  publicAPI.traverseLoop = (pd, dir, startLineId, startPtId, loopPoints) => {\n    let lineId = startLineId;\n    let lastPtId = startPtId;\n    let terminated = false;\n    let numInserted = 0;\n    while (!terminated) {\n      const {\n        cellPointIds\n      } = pd.getCellPoints(lineId);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      lastPtId = cellPointIds[0] !== lastPtId ? cellPointIds[0] : cellPointIds[1];\n      numInserted++;\n\n      // parametric point value\n      const t = dir * numInserted;\n      loopPoints.push({\n        t,\n        ptId: lastPtId\n      });\n      const lineCell = pd.getPointCells(lastPtId);\n      if (lineCell.length !== 2 || lastPtId === startPtId) {\n        // looped\n        return lastPtId;\n      }\n      if (lineCell.length === 2) {\n        // continue along loop\n        lineId = lineCell[0] !== lineId ? lineCell[0] : lineCell[1];\n        visited.add(lineId);\n      } else {\n        // empty or invalid cell\n        terminated = true;\n      }\n    }\n    return lastPtId;\n  };\n  publicAPI.extractContours = (input, output) => {\n    const loops = [];\n    visited.clear();\n    const inLines = input.getLines();\n    output.getPoints().setData(Float32Array.from(input.getPoints().getData()));\n\n    // TODO skip if cached input mtime hasn't changed.\n    // iterate over input lines\n    for (let li = 0; li < inLines.getNumberOfCells(); li++) {\n      if (visited.has(li)) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      const {\n        cellPointIds\n      } = input.getCellPoints(li);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      visited.add(li);\n      const startPtId = cellPointIds[0];\n      const loopPoints = [];\n      loopPoints.push({\n        t: 0,\n        ptId: startPtId\n      });\n      const endPtId = publicAPI.traverseLoop(input, Dir.Forward, li, startPtId, loopPoints);\n      if (startPtId !== endPtId) {\n        // didn't find a loop. Go other direction to see where we end up\n        publicAPI.traverseLoop(input, Dir.Backward, li, startPtId, loopPoints);\n        loopPoints.sort((a, b) => a.t < b.t ? -1 : 1);\n        // make closed contour\n        if (loopPoints.length && loopPoints[0].ptId !== loopPoints[loopPoints.length - 1]?.ptId) {\n          loopPoints.push({\n            ...loopPoints[loopPoints.length - 1]\n          });\n        }\n      }\n      if (loopPoints.length) {\n        loops.push(loopPoints);\n      }\n    }\n\n    // clear output lines\n    const outLines = output.getLines();\n    outLines.resize(0);\n    loops.forEach(loop => {\n      outLines.insertNextCell(loop.map(pt => pt.ptId));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 1);\n  vtkContourLoopExtraction(publicAPI);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkContourLoopExtraction');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\nexport { index as default, extend, newInstance };\n","import { expose } from 'comlink';\nimport { utilities } from '@cornerstonejs/core';\nimport { utilities as ToolsUtilities } from '@cornerstonejs/tools';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkContourLoopExtraction from '@kitware/vtk.js/Filters/General/ContourLoopExtraction';\nimport vtkCutter from '@kitware/vtk.js/Filters/Core/Cutter';\nconst { math: { polyline: { containsPoint, getAABB, projectTo2D }, }, geometricSurfaceUtils: { checkStandardBasis, rotatePoints }, boundingBox: { getBoundingBoxAroundShapeWorld }, planar: { isPlaneIntersectingAABB }, } = ToolsUtilities;\nasync function peerImport(moduleId) {\n    try {\n        if (moduleId === '@icr/polyseg-wasm') {\n            return import('@icr/polyseg-wasm');\n        }\n    }\n    catch (error) {\n        console.warn('Error importing module:', error);\n        return null;\n    }\n}\nconst polySegConverters = {\n    polySeg: null,\n    polySegInitializing: false,\n    polySegInitializingPromise: null,\n    async initializePolySeg(progressCallback) {\n        let ICRPolySeg;\n        try {\n            ICRPolySeg = (await peerImport('@icr/polyseg-wasm')).default;\n        }\n        catch (error) {\n            console.error(error);\n            console.debug(\"Warning: '@icr/polyseg-wasm' module not found. Please install it separately.\");\n            return;\n        }\n        if (this.polySegInitializing) {\n            await this.polySegInitializingPromise;\n            return;\n        }\n        if (this.polySeg?.instance) {\n            return;\n        }\n        this.polySegInitializing = true;\n        this.polySegInitializingPromise = new Promise((resolve) => {\n            this.polySeg = new ICRPolySeg();\n            this.polySeg\n                .initialize({\n                updateProgress: progressCallback,\n            })\n                .then(() => {\n                this.polySegInitializing = false;\n                resolve();\n            });\n        });\n        await this.polySegInitializingPromise;\n    },\n    async convertContourToSurface(args, ...callbacks) {\n        const { polylines, numPointsArray } = args;\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = await this.polySeg.instance.convertContourRoiToSurface(polylines, numPointsArray);\n        return results;\n    },\n    async convertLabelmapToSurface(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertLabelmapToSurface(args.scalarData, args.dimensions, args.spacing, args.direction, args.origin, [args.segmentIndex]);\n        const rotationInfo = checkStandardBasis(args.direction);\n        if (!rotationInfo.isStandard) {\n            const rotatedPoints = rotatePoints(rotationInfo.rotationMatrix, args.origin, results.points);\n            results.points = [...rotatedPoints];\n        }\n        return results;\n    },\n    async convertContourToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentIndices, scalarData, annotationUIDsInSegmentMap, dimensions, origin, direction, spacing, } = args;\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const imageData = vtkImageData.newInstance();\n        imageData.setDimensions(dimensions);\n        imageData.setOrigin(origin);\n        imageData.setDirection(direction);\n        imageData.setSpacing(spacing);\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: scalarData,\n        });\n        imageData.getPointData().setScalars(scalarArray);\n        imageData.modified();\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                    dimensions,\n                    scalarData,\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        return segmentationVoxelManager.scalarData;\n    },\n    async convertContourToStackLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentationsInfo, annotationUIDsInSegmentMap, segmentIndices } = args;\n        const segmentationVoxelManagers = new Map();\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { dimensions, scalarData, direction, spacing, origin } = segmentationInfo;\n            const manager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData,\n            });\n            const imageData = vtkImageData.newInstance();\n            imageData.setDimensions(dimensions);\n            imageData.setOrigin(origin);\n            imageData.setDirection(direction);\n            imageData.setSpacing(spacing);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: scalarData,\n            });\n            imageData.getPointData().setScalars(scalarArray);\n            imageData.modified();\n            segmentationVoxelManagers.set(referencedImageId, { manager, imageData });\n        });\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline, referencedImageId } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const { manager: segmentationVoxelManager, imageData } = segmentationVoxelManagers.get(referencedImageId);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createImageVoxelManager({\n                    width: imageData.getDimensions()[0],\n                    height: imageData.getDimensions()[1],\n                    scalarData: imageData.getPointData().getScalars().getData(),\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { manager: segmentationVoxelManager } = segmentationVoxelManagers.get(referencedImageId);\n            segmentationInfo.scalarData = segmentationVoxelManager.scalarData;\n        });\n        return segmentationsInfo;\n    },\n    async convertSurfaceToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertSurfaceToLabelmap(args.points, args.polys, args.dimensions, args.spacing, args.direction, args.origin);\n        return results;\n    },\n    async convertSurfacesToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentsInfo } = args;\n        const promises = Array.from(segmentsInfo.keys()).map((segmentIndex) => {\n            const { points, polys } = segmentsInfo.get(segmentIndex);\n            const result = this.polySeg.instance.convertSurfaceToLabelmap(points, polys, args.dimensions, args.spacing, args.direction, args.origin);\n            return {\n                ...result,\n                segmentIndex,\n            };\n        });\n        const results = await Promise.all(promises);\n        const targetImageData = vtkImageData.newInstance();\n        targetImageData.setDimensions(args.dimensions);\n        targetImageData.setOrigin(args.origin);\n        targetImageData.setSpacing(args.spacing);\n        targetImageData.setDirection(args.direction);\n        const totalSize = args.dimensions[0] * args.dimensions[1] * args.dimensions[2];\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: new Uint8Array(totalSize),\n        });\n        targetImageData.getPointData().setScalars(scalarArray);\n        targetImageData.modified();\n        const { dimensions } = args;\n        const scalarData = targetImageData.getPointData().getScalars().getData();\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const outputVolumesInfo = results.map((result) => {\n            const { data, dimensions, direction, origin, spacing } = result;\n            const volume = vtkImageData.newInstance();\n            volume.setDimensions(dimensions);\n            volume.setOrigin(origin);\n            volume.setSpacing(spacing);\n            volume.setDirection(direction);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: data,\n            });\n            volume.getPointData().setScalars(scalarArray);\n            volume.modified();\n            const voxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData: data,\n            });\n            const extent = volume.getExtent();\n            return {\n                volume,\n                voxelManager,\n                extent,\n                scalarData: data,\n                segmentIndex: result.segmentIndex,\n            };\n        });\n        const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions: targetImageData.getDimensions(),\n            scalarData: targetImageData.getPointData().getScalars().getData(),\n        });\n        voxels.forEach(({ pointIJK, pointLPS }) => {\n            try {\n                for (const volumeInfo of outputVolumesInfo) {\n                    const { volume, extent, voxelManager, segmentIndex } = volumeInfo;\n                    const index = volume.worldToIndex(pointLPS);\n                    if (index[0] < extent[0] ||\n                        index[0] > extent[1] ||\n                        index[1] < extent[2] ||\n                        index[1] > extent[3] ||\n                        index[2] < extent[4] ||\n                        index[2] > extent[5]) {\n                        continue;\n                    }\n                    const roundedIndex = index.map(Math.round);\n                    const value = voxelManager.getAtIJK(...roundedIndex);\n                    if (value > 0) {\n                        segmentationVoxelManager.setAtIJKPoint(pointIJK, segmentIndex);\n                        break;\n                    }\n                }\n            }\n            catch (error) {\n            }\n        }, { imageData: targetImageData });\n        return segmentationVoxelManager.scalarData;\n    },\n    getSurfacesAABBs({ surfacesInfo }) {\n        const aabbs = new Map();\n        for (const { points, id } of surfacesInfo) {\n            const aabb = getAABB(points, { numDimensions: 3 });\n            aabbs.set(id, aabb);\n        }\n        return aabbs;\n    },\n    cutSurfacesIntoPlanes({ planesInfo, surfacesInfo, surfacesAABB = new Map() }, progressCallback, updateCacheCallback) {\n        const numberOfPlanes = planesInfo.length;\n        const cutter = vtkCutter.newInstance();\n        const plane1 = vtkPlane.newInstance();\n        cutter.setCutFunction(plane1);\n        const surfacePolyData = vtkPolyData.newInstance();\n        try {\n            for (const [index, planeInfo] of planesInfo.entries()) {\n                const { sliceIndex, planes } = planeInfo;\n                const polyDataResults = new Map();\n                for (const polyDataInfo of surfacesInfo) {\n                    const { points, polys, id, segmentIndex } = polyDataInfo;\n                    const aabb3 = surfacesAABB.get(id) || getAABB(points, { numDimensions: 3 });\n                    if (!surfacesAABB.has(id)) {\n                        surfacesAABB.set(id, aabb3);\n                    }\n                    const { minX, minY, minZ, maxX, maxY, maxZ } = aabb3;\n                    const { origin, normal } = planes[0];\n                    if (!isPlaneIntersectingAABB(origin, normal, minX, minY, minZ, maxX, maxY, maxZ)) {\n                        continue;\n                    }\n                    surfacePolyData.getPoints().setData(points, 3);\n                    surfacePolyData.getPolys().setData(polys);\n                    surfacePolyData.modified();\n                    cutter.setInputData(surfacePolyData);\n                    plane1.setOrigin(origin);\n                    plane1.setNormal(normal);\n                    try {\n                        cutter.update();\n                    }\n                    catch (e) {\n                        console.warn('Error during clipping', e);\n                        continue;\n                    }\n                    const polyData = cutter.getOutputData();\n                    if (!polyData ||\n                        !polyData.getPoints() ||\n                        polyData.getPoints().getNumberOfPoints() === 0) {\n                        continue;\n                    }\n                    const cutterOutput = polyData;\n                    cutterOutput.buildLinks();\n                    const loopExtraction = vtkContourLoopExtraction.newInstance();\n                    loopExtraction.setInputData(cutterOutput);\n                    try {\n                        loopExtraction.update();\n                        const loopOutput = loopExtraction.getOutputData();\n                        if (loopOutput &&\n                            loopOutput.getPoints() &&\n                            loopOutput.getLines() &&\n                            loopOutput.getPoints().getNumberOfPoints() > 0 &&\n                            loopOutput.getLines().getNumberOfCells() > 0) {\n                            polyDataResults.set(segmentIndex, {\n                                points: loopOutput.getPoints().getData(),\n                                lines: loopOutput.getLines().getData(),\n                                numberOfCells: loopOutput.getLines().getNumberOfCells(),\n                                segmentIndex,\n                            });\n                        }\n                    }\n                    catch (loopError) {\n                        console.warn('Error during loop extraction:', loopError);\n                        continue;\n                    }\n                }\n                progressCallback({ progress: (index + 1) / numberOfPlanes });\n                updateCacheCallback({ sliceIndex, polyDataResults });\n            }\n        }\n        catch (e) {\n            console.warn('Error during processing', e);\n        }\n        finally {\n            surfacesInfo = null;\n            plane1.delete();\n        }\n    },\n};\nexpose(polySegConverters);\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","import { state } from '../store/state';\nimport { getEnabledElement } from '@cornerstonejs/core';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction getSvgDrawingHelper(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement;\n    const canvasHash = `${viewportId}:${renderingEngineId}`;\n    const svgLayerElement = _getSvgLayer(element);\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        state.svgNodeCache[canvasHash][cacheKey].touched = false;\n    });\n    return {\n        svgLayerElement: svgLayerElement,\n        svgNodeCacheForCanvas: state.svgNodeCache,\n        getSvgNode: getSvgNode.bind(this, canvasHash),\n        appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n        setNodeTouched: setNodeTouched.bind(this, canvasHash),\n        clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n    };\n}\nfunction _getSvgLayer(element) {\n    const viewportElement = `.${VIEWPORT_ELEMENT}`;\n    const internalDivElement = element.querySelector(viewportElement);\n    const svgLayer = internalDivElement?.querySelector(':scope > .svg-layer');\n    return svgLayer;\n}\nfunction getSvgNode(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        return state.svgNodeCache[canvasHash][cacheKey].domRef;\n    }\n}\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return null;\n    }\n    state.svgNodeCache[canvasHash][cacheKey] = {\n        touched: true,\n        domRef: svgNode,\n    };\n    svgLayerElement.appendChild(svgNode);\n}\nfunction setNodeTouched(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        state.svgNodeCache[canvasHash][cacheKey].touched = true;\n    }\n}\nfunction clearUntouched(svgLayerElement, canvasHash) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n        if (!cacheEntry.touched && cacheEntry.domRef) {\n            svgLayerElement.removeChild(cacheEntry.domRef);\n            delete state.svgNodeCache[canvasHash][cacheKey];\n        }\n    });\n}\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\nfunction draw(element, fn) {\n    const svgDrawingHelper = getSvgDrawingHelper(element);\n    fn(svgDrawingHelper);\n    svgDrawingHelper.clearUntouched();\n}\nexport default draw;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = '') {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n    const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        r: `${radius}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingCircleElement) {\n        setAttributesIfNecessary(attributes, existingCircleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newCircleElement = document.createElementNS(svgns, 'circle');\n        if (dataId !== '') {\n            newCircleElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newCircleElement);\n        svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n    }\n}\nexport default drawCircle;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import drawHandle from './drawHandle';\nfunction drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {\n    handlePoints.forEach((handle, i) => {\n        drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options, i);\n    });\n}\nexport default drawHandles;\n","import drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nfunction drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {\n    const start = annotationAnchorPoints.length > 0\n        ? findClosestPoint(annotationAnchorPoints, refPoint)\n        : refPoint;\n    const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n    const end = findClosestPoint(boundingBoxPoints, start);\n    const mergedOptions = Object.assign({\n        color: 'rgb(255, 255, 0)',\n        lineWidth: '1',\n        lineDash: '2,3',\n    }, options);\n    drawLine(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);\n}\nfunction _boundingBoxPoints(boundingBox) {\n    const { x: left, y: top, height, width } = boundingBox;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const topMiddle = [left + halfWidth, top];\n    const leftMiddle = [left, top + halfHeight];\n    const bottomMiddle = [left + halfWidth, top + height];\n    const rightMiddle = [left + width, top + halfHeight];\n    return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\nexport default drawLink;\n","import drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nfunction drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {\n    const mergedOptions = Object.assign({\n        handleRadius: '6',\n        centering: {\n            x: false,\n            y: true,\n        },\n    }, options);\n    const canvasBoundingBox = drawTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);\n    drawLink(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);\n    return canvasBoundingBox;\n}\nexport default drawLinkedTextBox;\n","import _getHash from './_getHash';\nimport drawRectByCoordinates from './drawRectByCoordinates';\nexport default function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {\n    const topLeft = [start[0], start[1]];\n    const topRight = [end[0], start[1]];\n    const bottomLeft = [start[0], end[1]];\n    const bottomRight = [end[0], end[1]];\n    drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, [topLeft, topRight, bottomLeft, bottomRight], options, dataId);\n}\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = '', zIndex) {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'fan', fanUID);\n    const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    const centerX = center[0];\n    const centerY = center[1];\n    const outerStartX = centerX + outerRadius * Math.cos(startRad);\n    const outerStartY = centerY + outerRadius * Math.sin(startRad);\n    const outerEndX = centerX + outerRadius * Math.cos(endRad);\n    const outerEndY = centerY + outerRadius * Math.sin(endRad);\n    const innerStartX = centerX + innerRadius * Math.cos(startRad);\n    const innerStartY = centerY + innerRadius * Math.sin(startRad);\n    const innerEndX = centerX + innerRadius * Math.cos(endRad);\n    const innerEndY = centerY + innerRadius * Math.sin(endRad);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    let pathData = `M ${outerStartX} ${outerStartY}`;\n    pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;\n    pathData += ` L ${innerEndX} ${innerEndY}`;\n    pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;\n    pathData += ` Z`;\n    const attributes = {\n        d: pathData,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n        'mix-blend-mode': 'normal',\n    };\n    if (existingFanElement) {\n        setAttributesIfNecessary(attributes, existingFanElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newFanElement = document.createElementNS(svgns, 'path');\n        if (dataId !== '') {\n            newFanElement.setAttribute('data-id', dataId);\n        }\n        if (zIndex !== undefined) {\n            newFanElement.style.zIndex = zIndex.toString();\n        }\n        setNewAttributesIfValid(attributes, newFanElement);\n        svgDrawingHelper.appendNode(newFanElement, svgNodeHash);\n    }\n}\nexport default drawFan;\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        let shouldTriggerSegmentationRender = false;\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                shouldTriggerSegmentationRender = true;\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        if (shouldTriggerSegmentationRender) {\n            triggerSegmentationRender(viewportId);\n        }\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._pendingRenderQueue = [];\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            if (this._pendingRenderQueue.length > 0) {\n                const nextViewportIds = this._pendingRenderQueue.shift();\n                if (nextViewportIds && nextViewportIds.length > 0) {\n                    this._setViewportsToBeRenderedNextFrame(nextViewportIds);\n                }\n            }\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        if (this._animationFrameSet) {\n            this._pendingRenderQueue.push(viewportIds);\n            return;\n        }\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport * as Enums from '../../enums';\nimport { utilities } from '@cornerstonejs/core';\nclass SegmentationStyle {\n    constructor() {\n        this.config = {\n            global: {},\n            segmentations: {},\n            viewportsStyle: {},\n        };\n    }\n    setStyle(specifier, styles) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        const currentStyles = this.getStyle(specifier);\n        let updatedStyles;\n        if (!viewportId && !segmentationId) {\n            updatedStyles = {\n                ...currentStyles,\n                ...styles,\n            };\n        }\n        else {\n            updatedStyles = this.copyActiveToInactiveIfNotProvided({\n                ...currentStyles,\n                ...styles,\n            }, type);\n        }\n        if (!type) {\n            throw new Error('Type is required to set a style');\n        }\n        if (viewportId) {\n            if (!this.config.viewportsStyle[viewportId]) {\n                this.config.viewportsStyle[viewportId] = {\n                    renderInactiveSegmentations: false,\n                    representations: {},\n                };\n            }\n            const representations = this.config.viewportsStyle[viewportId].representations;\n            if (segmentationId) {\n                if (!representations[segmentationId]) {\n                    representations[segmentationId] = {};\n                }\n                if (!representations[segmentationId][type]) {\n                    representations[segmentationId][type] = {};\n                }\n                const repConfig = representations[segmentationId][type];\n                if (segmentIndex !== undefined) {\n                    if (!repConfig.perSegment) {\n                        repConfig.perSegment = {};\n                    }\n                    repConfig.perSegment[segmentIndex] = updatedStyles;\n                }\n                else {\n                    repConfig.allSegments = updatedStyles;\n                }\n            }\n            else {\n                const ALL_SEGMENTATIONS_KEY = '__allSegmentations__';\n                if (!representations[ALL_SEGMENTATIONS_KEY]) {\n                    representations[ALL_SEGMENTATIONS_KEY] = {};\n                }\n                if (!representations[ALL_SEGMENTATIONS_KEY][type]) {\n                    representations[ALL_SEGMENTATIONS_KEY][type] = {};\n                }\n                representations[ALL_SEGMENTATIONS_KEY][type].allSegments =\n                    updatedStyles;\n            }\n        }\n        else if (segmentationId) {\n            if (!this.config.segmentations[segmentationId]) {\n                this.config.segmentations[segmentationId] = {};\n            }\n            if (!this.config.segmentations[segmentationId][type]) {\n                this.config.segmentations[segmentationId][type] = {};\n            }\n            const segConfig = this.config.segmentations[segmentationId][type];\n            if (segmentIndex !== undefined) {\n                if (!segConfig.perSegment) {\n                    segConfig.perSegment = {};\n                }\n                segConfig.perSegment[segmentIndex] = updatedStyles;\n            }\n            else {\n                segConfig.allSegments = updatedStyles;\n            }\n        }\n        else {\n            this.config.global[type] = updatedStyles;\n        }\n    }\n    copyActiveToInactiveIfNotProvided(styles, type) {\n        const processedStyles = { ...styles };\n        if (type === Enums.SegmentationRepresentations.Labelmap) {\n            const labelmapStyles = processedStyles;\n            labelmapStyles.renderOutlineInactive ??= labelmapStyles.renderOutline;\n            labelmapStyles.outlineWidthInactive ??= labelmapStyles.outlineWidth;\n            labelmapStyles.renderFillInactive ??= labelmapStyles.renderFill;\n            labelmapStyles.fillAlphaInactive ??= labelmapStyles.fillAlpha;\n            labelmapStyles.outlineOpacityInactive ??= labelmapStyles.outlineOpacity;\n        }\n        else if (type === Enums.SegmentationRepresentations.Contour) {\n            const contourStyles = processedStyles;\n            contourStyles.outlineWidthInactive ??= contourStyles.outlineWidth;\n            contourStyles.outlineOpacityInactive ??= contourStyles.outlineOpacity;\n            contourStyles.outlineDashInactive ??= contourStyles.outlineDash;\n            contourStyles.renderOutlineInactive ??= contourStyles.renderOutline;\n            contourStyles.renderFillInactive ??= contourStyles.renderFill;\n            contourStyles.fillAlphaInactive ??= contourStyles.fillAlpha;\n        }\n        return processedStyles;\n    }\n    getStyle(specifier) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        let combinedStyle = this.getDefaultStyle(type);\n        let renderInactiveSegmentations = false;\n        if (this.config.global[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.global[type],\n            };\n        }\n        if (this.config.segmentations[segmentationId]?.[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.segmentations[segmentationId][type].allSegments,\n            };\n            if (segmentIndex !== undefined &&\n                this.config.segmentations[segmentationId][type].perSegment?.[segmentIndex]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.segmentations[segmentationId][type].perSegment[segmentIndex],\n                };\n            }\n        }\n        if (viewportId && this.config.viewportsStyle[viewportId]) {\n            renderInactiveSegmentations =\n                this.config.viewportsStyle[viewportId].renderInactiveSegmentations;\n            const allSegmentationsKey = '__allSegmentations__';\n            if (this.config.viewportsStyle[viewportId].representations[allSegmentationsKey]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[allSegmentationsKey][type].allSegments,\n                };\n            }\n            if (segmentationId &&\n                this.config.viewportsStyle[viewportId].representations[segmentationId]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].allSegments,\n                };\n                if (segmentIndex !== undefined &&\n                    this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment?.[segmentIndex]) {\n                    combinedStyle = {\n                        ...combinedStyle,\n                        ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment[segmentIndex],\n                    };\n                }\n            }\n        }\n        return combinedStyle;\n    }\n    getRenderInactiveSegmentations(viewportId) {\n        return this.config.viewportsStyle[viewportId]?.renderInactiveSegmentations;\n    }\n    setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n        if (!this.config.viewportsStyle[viewportId]) {\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations: false,\n                representations: {},\n            };\n        }\n        this.config.viewportsStyle[viewportId].renderInactiveSegmentations =\n            renderInactiveSegmentations;\n    }\n    getDefaultStyle(type) {\n        switch (type) {\n            case Enums.SegmentationRepresentations.Labelmap:\n                return getDefaultLabelmapConfig();\n            case Enums.SegmentationRepresentations.Contour:\n                return getDefaultContourConfig();\n            case Enums.SegmentationRepresentations.Surface:\n                return {};\n            default:\n                throw new Error(`Unknown representation type: ${type}`);\n        }\n    }\n    clearSegmentationStyle(segmentationId) {\n        if (this.config.segmentations[segmentationId]) {\n            delete this.config.segmentations[segmentationId];\n        }\n    }\n    clearAllSegmentationStyles() {\n        this.config.segmentations = {};\n    }\n    clearViewportStyle(viewportId) {\n        if (this.config.viewportsStyle[viewportId]) {\n            delete this.config.viewportsStyle[viewportId];\n        }\n    }\n    clearAllViewportStyles() {\n        for (const viewportId in this.config.viewportsStyle) {\n            const viewportStyle = this.config.viewportsStyle[viewportId];\n            const renderInactiveSegmentations = viewportStyle.renderInactiveSegmentations;\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations,\n                representations: {},\n            };\n        }\n    }\n    resetToGlobalStyle() {\n        this.clearAllSegmentationStyles();\n        this.clearAllViewportStyles();\n    }\n    hasCustomStyle(specifier) {\n        const { type } = specifier;\n        const style = this.getStyle(specifier);\n        const defaultStyle = this.getDefaultStyle(type);\n        return !utilities.deepEqual(style, defaultStyle);\n    }\n}\nconst segmentationStyle = new SegmentationStyle();\nexport { segmentationStyle };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            const { label, locked, cachedStats, active, ...rest } = segment;\n            const normalizedSegment = {\n                segmentIndex: Number(segmentIndex),\n                label: label ?? `Segment ${segmentIndex}`,\n                locked: locked ?? false,\n                cachedStats: cachedStats ?? {},\n                active: active ?? false,\n                ...rest,\n            };\n            normalizedSegments[segmentIndex] = normalizedSegment;\n        });\n    }\n    else if (type === SegmentationRepresentations.Contour) {\n        normalizeContourSegments(normalizedSegments, data);\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeContourSegments(normalizedSegments, contourData) {\n    const { geometryIds } = contourData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { setSegmentationDirty } from '../../../utilities/segmentation/utilities';\nexport function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse, segmentIndex) {\n    const eventDetail = {\n        segmentationId,\n        modifiedSlicesToUse,\n        segmentIndex,\n    };\n    setSegmentationDirty(segmentationId);\n    triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getActiveSegmentation(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getActiveSegmentation(viewportId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentationVisibility(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationVisibility(viewportId, specifier);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport * as utilities from './utilities';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, utilities, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import { getSegmentation } from './getSegmentation';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nfunction internalAddRepresentationData({ segmentationId, type, data, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`Segmentation ${segmentationId} not found`);\n    }\n    if (segmentation.representationData[type]) {\n        console.warn(`Representation data of type ${type} already exists for segmentation ${segmentationId}, overwriting it.`);\n    }\n    switch (type) {\n        case SegmentationRepresentations.Labelmap:\n            if (data) {\n                segmentation.representationData[type] =\n                    data;\n            }\n            break;\n        case SegmentationRepresentations.Contour:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        case SegmentationRepresentations.Surface:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        default:\n            throw new Error(`Invalid representation type ${type}`);\n    }\n}\nexport default internalAddRepresentationData;\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { state } from '../state';\nfunction getToolGroupForViewport(viewportId, renderingEngineId) {\n    if (!renderingEngineId) {\n        renderingEngineId = getRenderingEngines().find((re) => re.getViewports().find((vp) => vp.id === viewportId))?.id;\n    }\n    const toolGroupFilteredByIds = state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)));\n    if (!toolGroupFilteredByIds.length) {\n        return;\n    }\n    if (toolGroupFilteredByIds.length > 1) {\n        throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`);\n    }\n    return toolGroupFilteredByIds[0];\n}\nexport default getToolGroupForViewport;\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { utilities } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport PlanarFreehandROITool from './PlanarFreehandROITool';\nclass PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool {\n    static { this.toolName = 'PlanarFreehandContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    renderAnnotationInstance(renderContext) {\n        const annotation = renderContext.annotation;\n        const { invalidated } = annotation;\n        const renderResult = super.renderAnnotationInstance(renderContext);\n        if (invalidated) {\n            const { segmentationId } = annotation.data.segmentation;\n            triggerSegmentationDataModified(segmentationId);\n        }\n        return renderResult;\n    }\n}\nexport default PlanarFreehandContourSegmentationTool;\n","import { AnnotationTool } from '../base';\nimport { CONSTANTS, getEnabledElement, VolumeViewport, utilities as csUtils, metaData, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport * as math from '../../utilities/math';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getLineSegmentIntersectionsCoordinates } from '../../utilities/math/polyline';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport calculatePerimeter from '../../utilities/contours/calculatePerimeter';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { KeyboardBindings, ChangeTypes } from '../../enums';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\nclass PlanarFreehandROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'PlanarFreehandROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            alwaysRenderOpenContourHandles: {\n                enabled: false,\n                radius: 2,\n            },\n            allowOpenContours: true,\n            closeContourProximity: 10,\n            checkCanvasEditFallbackProximity: 6,\n            makeClockWise: true,\n            subPixelResolution: 4,\n            smoothing: {\n                smoothOnAdd: false,\n                smoothOnEdit: false,\n                knotsRatioPercentageOnAdd: 40,\n                knotsRatioPercentageOnEdit: 40,\n            },\n            interpolation: {\n                enabled: false,\n                onInterpolationComplete: null,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            displayOnePointAsCrosshairs: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isEditingClosed = false;\n        this.isEditingOpen = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const annotation = this.createAnnotation(evt);\n            this.addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateDraw(evt, annotation, viewportIdsToRender);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            if (annotation.data.contour.closed) {\n                this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            else {\n                this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { polyline: points } = annotation.data.contour;\n            let previousPoint = viewport.worldToCanvas(points[0]);\n            for (let i = 1; i < points.length; i++) {\n                const p1 = previousPoint;\n                const p2 = viewport.worldToCanvas(points[i]);\n                const canProject = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n                if (canProject) {\n                    return true;\n                }\n                previousPoint = p2;\n            }\n            if (!annotation.data.contour.closed) {\n                return false;\n            }\n            const pStart = viewport.worldToCanvas(points[0]);\n            const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n            return pointCanProjectOnLine(canvasCoords, pStart, pEnd, proximity);\n        };\n        this.cancel = (element) => {\n            const isDrawing = this.isDrawing;\n            const isEditingOpen = this.isEditingOpen;\n            const isEditingClosed = this.isEditingClosed;\n            if (isDrawing) {\n                this.cancelDrawing(element);\n            }\n            else if (isEditingOpen) {\n                this.cancelOpenContourEdit(element);\n            }\n            else if (isEditingClosed) {\n                this.cancelClosedContourEdit(element);\n            }\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { cachedStats } = data;\n            const { polyline: points, closed } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const modalityUnitOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n                const calibratedScale = getCalibratedLengthUnitsAndScale(image, () => {\n                    const polyline = data.contour.polyline;\n                    const numPoints = polyline.length;\n                    const projectedPolyline = new Array(numPoints);\n                    for (let i = 0; i < numPoints; i++) {\n                        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n                    }\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(projectedPolyline);\n                    const topLeftBBWorld = viewport.canvasToWorld([canvasMinX, canvasMinY]);\n                    const topLeftBBIndex = csUtils.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = csUtils.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                if (closed) {\n                    this.updateClosedCachedStats({\n                        targetId,\n                        viewport,\n                        canvasCoordinates,\n                        points,\n                        imageData,\n                        metadata,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        deltaInX,\n                        deltaInY,\n                    });\n                }\n                else {\n                    this.updateOpenCachedStats({\n                        metadata,\n                        canvasCoordinates,\n                        targetId,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        deltaInX,\n                        deltaInY,\n                    });\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n            const { data } = annotation;\n            const targetId = this.getTargetId(viewport);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n                annotationUID: annotation.annotationUID,\n            };\n            const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n            if (!options.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = '1';\n            const boundingBox = drawLinkedTextBox(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        registerDrawLoop(this);\n        registerEditLoopCommon(this);\n        registerClosedContourEditLoop(this);\n        registerOpenContourEditLoop(this);\n        registerOpenContourEndEditLoop(this);\n        registerRenderMethods(this);\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations || !annotations.length) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let annotationsToDisplay;\n        if (viewport instanceof VolumeViewport) {\n            const camera = viewport.getCamera();\n            const { spacingInNormalDirection } = csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n            annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);\n        }\n        else {\n            annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n        }\n        return annotationsToDisplay;\n    }\n    filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {\n        const { viewPlaneNormal } = camera;\n        const annotationsWithParallelNormals = annotations.filter((td) => {\n            let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n            if (!td.metadata.referencedImageId &&\n                !annotationViewPlaneNormal &&\n                td.metadata.FrameOfReferenceUID) {\n                for (const point of td.data.contour.polyline) {\n                    const vector = vec3.sub(vec3.create(), point, camera.focalPoint);\n                    const dotProduct = vec3.dot(vector, camera.viewPlaneNormal);\n                    if (!csUtils.isEqual(dotProduct, 0)) {\n                        return false;\n                    }\n                }\n                td.metadata.viewPlaneNormal = camera.viewPlaneNormal;\n                td.metadata.cameraFocalPoint = camera.focalPoint;\n                return true;\n            }\n            if (!annotationViewPlaneNormal) {\n                const { referencedImageId } = td.metadata;\n                const { imageOrientationPatient } = metaData.get('imagePlaneModule', referencedImageId);\n                const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n                const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n                annotationViewPlaneNormal = vec3.create();\n                vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n                td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n            }\n            const isParallel = Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n                PARALLEL_THRESHOLD;\n            return annotationViewPlaneNormal && isParallel;\n        });\n        if (!annotationsWithParallelNormals.length) {\n            return [];\n        }\n        const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n        const { focalPoint } = camera;\n        const annotationsWithinSlice = [];\n        for (const annotation of annotationsWithParallelNormals) {\n            const data = annotation.data;\n            const point = data.contour.polyline[0];\n            if (!annotation.isVisible) {\n                continue;\n            }\n            const dir = vec3.create();\n            vec3.sub(dir, focalPoint, point);\n            const dot = vec3.dot(dir, viewPlaneNormal);\n            if (Math.abs(dot) < halfSpacingInNormalDirection) {\n                annotationsWithinSlice.push(annotation);\n            }\n        }\n        return annotationsWithinSlice;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const worldPos = evt.detail.currentPoints.world;\n        const contourAnnotation = super.createAnnotation(evt);\n        const onInterpolationComplete = (annotation) => {\n            annotation.data.handles.points.length = 0;\n        };\n        const annotation = csUtils.deepMerge(contourAnnotation, {\n            data: {\n                contour: {\n                    polyline: [[...worldPos]],\n                },\n                label: '',\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n        return annotation;\n    }\n    getAnnotationStyle(context) {\n        return super.getAnnotationStyle(context);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        let renderStatus = false;\n        const { viewport, renderingEngine } = enabledElement;\n        const isDrawing = this.isDrawing;\n        const isEditingOpen = this.isEditingOpen;\n        const isEditingClosed = this.isEditingClosed;\n        if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n            if (this.configuration.displayOnePointAsCrosshairs &&\n                annotation.data.contour.polyline.length === 1) {\n                this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n            }\n            else {\n                this.renderContour(enabledElement, svgDrawingHelper, annotation);\n            }\n        }\n        else {\n            const activeAnnotationUID = this.commonData.annotation.annotationUID;\n            if (annotation.annotationUID === activeAnnotationUID) {\n                if (isDrawing) {\n                    this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingClosed) {\n                    this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingOpen) {\n                    this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);\n                }\n            }\n            else {\n                if (this.configuration.displayOnePointAsCrosshairs &&\n                    annotation.data.contour.polyline.length === 1) {\n                    this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    this.renderContour(enabledElement, svgDrawingHelper, annotation);\n                }\n            }\n            renderStatus = true;\n        }\n        if (!this.configuration.calculateStats) {\n            return;\n        }\n        this._calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement);\n        this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n        return renderStatus;\n    }\n    _calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement) {\n        const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n        if (annotation.annotationUID === activeAnnotationUID &&\n            !this.commonData?.movingTextBox) {\n            return;\n        }\n        if (!this.commonData?.movingTextBox) {\n            const { data } = annotation;\n            if (!data.cachedStats[targetId]?.unit) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    area: null,\n                    max: null,\n                    mean: null,\n                    stdDev: null,\n                    areaUnit: null,\n                    unit: null,\n                };\n                this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n        }\n    }\n    updateClosedCachedStats({ viewport, points, imageData, metadata, cachedStats, targetId, modalityUnit, canvasCoordinates, calibratedScale, deltaInX, deltaInY, }) {\n        const { scale, areaUnit, unit } = calibratedScale;\n        const { voxelManager } = viewport.getImageData();\n        const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        let iMin = worldPosIndex[0];\n        let iMax = worldPosIndex[0];\n        let jMin = worldPosIndex[1];\n        let jMax = worldPosIndex[1];\n        let kMin = worldPosIndex[2];\n        let kMax = worldPosIndex[2];\n        for (let j = 1; j < points.length; j++) {\n            const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[j]);\n            worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n            worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n            worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n            iMin = Math.min(iMin, worldPosIndex[0]);\n            iMax = Math.max(iMax, worldPosIndex[0]);\n            jMin = Math.min(jMin, worldPosIndex[1]);\n            jMax = Math.max(jMax, worldPosIndex[1]);\n            kMin = Math.min(kMin, worldPosIndex[2]);\n            kMax = Math.max(kMax, worldPosIndex[2]);\n        }\n        const worldPosIndex2 = csUtils.transformWorldToIndex(imageData, points[1]);\n        worldPosIndex2[0] = Math.floor(worldPosIndex2[0]);\n        worldPosIndex2[1] = Math.floor(worldPosIndex2[1]);\n        worldPosIndex2[2] = Math.floor(worldPosIndex2[2]);\n        let area = polyline.getArea(canvasCoordinates) / scale / scale;\n        area *= deltaInX * deltaInY;\n        let perimeter = calculatePerimeter(canvasCoordinates, closed) / scale;\n        perimeter *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));\n        const iDelta = 0.01 * (iMax - iMin);\n        const jDelta = 0.01 * (jMax - jMin);\n        const kDelta = 0.01 * (kMax - kMin);\n        iMin = Math.floor(iMin - iDelta);\n        iMax = Math.ceil(iMax + iDelta);\n        jMin = Math.floor(jMin - jDelta);\n        jMax = Math.ceil(jMax + jDelta);\n        kMin = Math.floor(kMin - kDelta);\n        kMax = Math.ceil(kMax + kDelta);\n        const boundsIJK = [\n            [iMin, iMax],\n            [jMin, jMax],\n            [kMin, kMax],\n        ];\n        const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n        const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n        let curRow = 0;\n        let intersections = [];\n        let intersectionCounter = 0;\n        let pointsInShape;\n        if (voxelManager) {\n            pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                imageData,\n                isInObject: (pointLPS, _pointIJK) => {\n                    let result = true;\n                    const point = viewport.worldToCanvas(pointLPS);\n                    if (point[1] != curRow) {\n                        intersectionCounter = 0;\n                        curRow = point[1];\n                        intersections = getLineSegmentIntersectionsCoordinates(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);\n                        intersections.sort((function (index) {\n                            return function (a, b) {\n                                return a[index] === b[index]\n                                    ? 0\n                                    : a[index] < b[index]\n                                        ? -1\n                                        : 1;\n                            };\n                        })(0));\n                    }\n                    if (intersections.length && point[0] > intersections[0][0]) {\n                        intersections.shift();\n                        intersectionCounter++;\n                    }\n                    if (intersectionCounter % 2 === 0) {\n                        result = false;\n                    }\n                    return result;\n                },\n                boundsIJK,\n                returnPoints: this.configuration.storePointData,\n            });\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            area,\n            perimeter,\n            mean: stats.mean?.value,\n            max: stats.max?.value,\n            min: stats.min?.value,\n            stdDev: stats.stdDev?.value,\n            statsArray: stats.array,\n            pointsInShape: pointsInShape,\n            areaUnit,\n            modalityUnit,\n            unit,\n        };\n    }\n    updateOpenCachedStats({ targetId, metadata, canvasCoordinates, cachedStats, modalityUnit, calibratedScale, deltaInX, deltaInY, }) {\n        const { scale, unit } = calibratedScale;\n        let length = calculatePerimeter(canvasCoordinates, closed) / scale;\n        length *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            length,\n            modalityUnit,\n            unit,\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, length, perimeter, max, min, isEmptyArea, unit, areaUnit, modalityUnit, } = cachedVolumeStats || {};\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(perimeter)) {\n        textLines.push(`Perimeter: ${csUtils.roundNumber(perimeter)} ${unit}`);\n    }\n    if (csUtils.isNumber(length)) {\n        textLines.push(`${csUtils.roundNumber(length)} ${unit}`);\n    }\n    return textLines;\n}\nexport default PlanarFreehandROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawRectByCoordinates as drawRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROITool extends AnnotationTool {\n    static { this.toolName = 'RectangleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    cachedStats: {},\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { viewPlaneNormal, viewUp } = viewport.getCamera();\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    activeHandleIndex !== undefined) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const { data } = annotation;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        stdDev: stats.stdDev?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        statsArray: stats.array,\n                        pointsInShape: pointsInShape,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(RectangleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    if (mean === undefined || mean === null) {\n        return;\n    }\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Max: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default RectangleROITool;\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { getEnabledElement, cache, utilities as csUtils, Enums, eventTarget, BaseVolumeViewport, StackViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/getActiveSegmentation';\nimport { getLockedSegmentIndices } from '../../stateManagement/segmentation/segmentLocking';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getCurrentLabelmapImageIdForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { StrategyCallbacks } from '../../enums';\nimport * as LabelmapMemo from '../../utilities/segmentation/createLabelmapMemo';\nimport { getAllAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport { isPointInsidePolyline3D } from '../../utilities/math/polyline';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { fillInsideCircle } from './strategies';\nexport default class LabelmapBaseTool extends BaseTool {\n    static { this.previewData = {\n        preview: null,\n        element: null,\n        timerStart: 0,\n        timer: null,\n        startPoint: [NaN, NaN],\n        isDrag: false,\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        super(toolProps, defaultToolProps);\n        this.memoMap = new Map();\n        this.acceptedMemoIds = new Map();\n        this.centerSegmentIndexInfo = {\n            segmentIndex: null,\n            hasSegmentIndex: false,\n            hasPreviewIndex: false,\n            changedIndices: [],\n        };\n    }\n    _historyRedoHandler(evt) {\n        const { id, operationType } = evt.detail;\n        if (operationType !== 'labelmap') {\n            return;\n        }\n        if (this.acceptedMemoIds.has(id)) {\n            this._hoverData = null;\n            const memoData = this.acceptedMemoIds.get(id);\n            const element = memoData?.element;\n            const operationData = this.getOperationData(element);\n            operationData.segmentIndex = memoData?.segmentIndex;\n            if (element) {\n                this.applyActiveStrategyCallback(getEnabledElement(element), operationData, StrategyCallbacks.AcceptPreview);\n            }\n        }\n        this._previewData.isDrag = true;\n    }\n    get _previewData() {\n        return LabelmapBaseTool.previewData;\n    }\n    hasPreviewData() {\n        return !!this._previewData.preview;\n    }\n    shouldResolvePreviewRequests() {\n        return ((this.mode === 'Active' || this.mode === 'Enabled') &&\n            this.hasPreviewData());\n    }\n    createMemo(segmentationId, segmentationVoxelManager) {\n        const voxelManagerId = segmentationVoxelManager.id;\n        if (this.memo &&\n            this.memo.segmentationVoxelManager === segmentationVoxelManager) {\n            return this.memo;\n        }\n        let memo = this.memoMap.get(voxelManagerId);\n        if (!memo) {\n            memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n            this.memoMap.set(voxelManagerId, memo);\n        }\n        else {\n            if (memo.redoVoxelManager) {\n                memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n                this.memoMap.set(voxelManagerId, memo);\n            }\n        }\n        this.memo = memo;\n        return memo;\n    }\n    createEditData(element) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                detail: {\n                    type: 'Segmentation',\n                    message: 'No active segmentation detected, create a segmentation representation before using the brush tool',\n                },\n                cancelable: true,\n            });\n            eventTarget.dispatchEvent(event);\n            return null;\n        }\n        const { segmentationId } = activeSegmentation;\n        const segmentsLocked = getLockedSegmentIndices(segmentationId);\n        const { representationData } = getSegmentation(segmentationId);\n        const editData = this.getEditData({\n            viewport,\n            representationData,\n            segmentsLocked,\n            segmentationId,\n        });\n        return editData;\n    }\n    getEditData({ viewport, representationData, segmentsLocked, segmentationId, }) {\n        if (viewport instanceof BaseVolumeViewport) {\n            const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n            const actors = viewport.getActors();\n            const isStackViewport = viewport instanceof StackViewport;\n            if (isStackViewport) {\n                const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                    detail: {\n                        type: 'Segmentation',\n                        message: 'Cannot perform brush operation on the selected viewport',\n                    },\n                    cancelable: true,\n                });\n                eventTarget.dispatchEvent(event);\n                return null;\n            }\n            const volumes = actors.map((actorEntry) => cache.getVolume(actorEntry.referencedId));\n            const segmentationVolume = cache.getVolume(volumeId);\n            const referencedVolumeIdToThreshold = volumes.find((volume) => csUtils.isEqual(volume.dimensions, segmentationVolume.dimensions))?.volumeId || volumes[0]?.volumeId;\n            return {\n                volumeId,\n                referencedVolumeId: this.configuration.threshold?.volumeId ??\n                    referencedVolumeIdToThreshold,\n                segmentsLocked,\n            };\n        }\n        else {\n            const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n            if (!segmentationImageId) {\n                return;\n            }\n            return {\n                imageId: segmentationImageId,\n                segmentsLocked,\n            };\n        }\n    }\n    createHoverData(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const viewportIdsToRender = [viewport.id];\n        const { segmentIndex, segmentationId, segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        const brushCursor = {\n            metadata: {\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                referencedImageId: '',\n                toolName: this.getToolName(),\n                segmentColor,\n            },\n            data: {},\n        };\n        return {\n            brushCursor,\n            centerCanvas,\n            segmentIndex,\n            viewport,\n            segmentationId,\n            segmentColor,\n            viewportIdsToRender,\n        };\n    }\n    getActiveSegmentationData(viewport) {\n        const viewportId = viewport.id;\n        const activeRepresentation = getActiveSegmentation(viewportId);\n        if (!activeRepresentation) {\n            return;\n        }\n        const { segmentationId } = activeRepresentation;\n        const segmentIndex = getActiveSegmentIndex(segmentationId);\n        if (!segmentIndex) {\n            return;\n        }\n        const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n        return {\n            segmentIndex,\n            segmentationId,\n            segmentColor,\n        };\n    }\n    getOperationData(element) {\n        const editData = this._editData || this.createEditData(element);\n        const { segmentIndex, segmentationId, brushCursor } = this._hoverData || this.createHoverData(element);\n        const { data, metadata = {} } = brushCursor || {};\n        const { viewPlaneNormal, viewUp } = metadata;\n        const configColor = this.configuration.preview?.previewColors?.[segmentIndex];\n        const { viewport } = getEnabledElement(element);\n        const segmentColor = getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n        if (!configColor && !segmentColor) {\n            return;\n        }\n        let previewColor = null, previewSegmentIndex = null;\n        if (this.configuration.preview?.enabled) {\n            previewColor = configColor || lightenColor(...segmentColor);\n            previewSegmentIndex = 255;\n        }\n        const operationData = {\n            ...editData,\n            points: data?.handles?.points,\n            segmentIndex,\n            viewPlaneNormal,\n            previewOnHover: !this._previewData.isDrag,\n            toolGroupId: this.toolGroupId,\n            segmentationId,\n            viewUp,\n            centerSegmentIndexInfo: this.centerSegmentIndexInfo,\n            activeStrategy: this.configuration.activeStrategy,\n            configuration: this.configuration,\n            previewColor,\n            previewSegmentIndex,\n            createMemo: this.createMemo.bind(this),\n        };\n        return operationData;\n    }\n    addPreview(element = this._previewData.element, options) {\n        const { _previewData } = this;\n        const acceptReject = options?.acceptReject;\n        if (acceptReject === true) {\n            this.acceptPreview(element);\n        }\n        else if (acceptReject === false) {\n            this.rejectPreview(element);\n        }\n        const enabledElement = getEnabledElement(element);\n        const results = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.AddPreview);\n        _previewData.isDrag = true;\n        if (results?.modified) {\n            _previewData.preview = results;\n            _previewData.element = element;\n        }\n        return results;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        const operationData = this.getOperationData(element);\n        if (this.memo && this.memo.id) {\n            this.acceptedMemoIds.set(this.memo.id, {\n                element,\n                segmentIndex: operationData.segmentIndex,\n            });\n        }\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.AcceptPreview);\n        this.doneEditMemo();\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    static viewportContoursToLabelmap(viewport, options) {\n        const removeContours = options?.removeContours ?? true;\n        const annotations = getAllAnnotations();\n        const viewAnnotations = filterAnnotationsForDisplay(viewport, annotations);\n        if (!viewAnnotations?.length) {\n            return;\n        }\n        const contourAnnotations = viewAnnotations.filter((annotation) => annotation.data.contour?.polyline?.length);\n        if (!contourAnnotations.length) {\n            return;\n        }\n        const brushInstance = new LabelmapBaseTool({}, {\n            configuration: {\n                strategies: {\n                    FILL_INSIDE_CIRCLE: fillInsideCircle,\n                },\n                activeStrategy: 'FILL_INSIDE_CIRCLE',\n            },\n        });\n        const preview = brushInstance.addPreview(viewport.element);\n        const { memo, segmentationId } = preview;\n        const previewVoxels = memo?.voxelManager;\n        const segmentationVoxels = previewVoxels.sourceVoxelManager || previewVoxels;\n        const { dimensions } = previewVoxels;\n        const imageData = viewport\n            .getDefaultActor()\n            .actor.getMapper()\n            .getInputData();\n        for (const annotation of contourAnnotations) {\n            const boundsIJK = [\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n            ];\n            const { polyline } = annotation.data.contour;\n            for (const point of polyline) {\n                const indexPoint = imageData.worldToIndex(point);\n                indexPoint.forEach((v, idx) => {\n                    boundsIJK[idx][0] = Math.min(boundsIJK[idx][0], v);\n                    boundsIJK[idx][1] = Math.max(boundsIJK[idx][1], v);\n                });\n            }\n            boundsIJK.forEach((bound, idx) => {\n                bound[0] = Math.round(Math.max(0, bound[0]));\n                bound[1] = Math.round(Math.min(dimensions[idx] - 1, bound[1]));\n            });\n            const activeIndex = getActiveSegmentIndex(segmentationId);\n            const startPoint = annotation.data.handles?.[0] || polyline[0];\n            const startIndex = imageData.worldToIndex(startPoint).map(Math.round);\n            const startValue = segmentationVoxels.getAtIJKPoint(startIndex) || 0;\n            let hasZeroIndex = false;\n            let hasPositiveIndex = false;\n            for (const polyPoint of polyline) {\n                const polyIndex = imageData.worldToIndex(polyPoint).map(Math.round);\n                const polyValue = segmentationVoxels.getAtIJKPoint(polyIndex);\n                if (polyValue === startValue) {\n                    hasZeroIndex = true;\n                }\n                else if (polyValue >= 0) {\n                    hasPositiveIndex = true;\n                }\n            }\n            const hasBoth = hasZeroIndex && hasPositiveIndex;\n            const segmentIndex = hasBoth\n                ? startValue\n                : startValue === 0\n                    ? activeIndex\n                    : 0;\n            for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                    for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n                        const worldPoint = imageData.indexToWorld([i, j, k]);\n                        const isContained = isPointInsidePolyline3D(worldPoint, polyline);\n                        if (isContained) {\n                            previewVoxels.setAtIJK(i, j, k, segmentIndex);\n                        }\n                    }\n                }\n            }\n            if (removeContours) {\n                removeAnnotation(annotation.annotationUID);\n            }\n        }\n        const slices = previewVoxels.getArrayOfModifiedSlices();\n        triggerSegmentationDataModified(segmentationId, slices);\n    }\n}\nfunction lightenColor(r, g, b, a, factor = 0.4) {\n    return [\n        Math.round(r + (255 - r) * factor),\n        Math.round(g + (255 - g) * factor),\n        Math.round(b + (255 - b) * factor),\n        a,\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getCanvasEllipseCorners, precalculatePointInEllipse, } from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, isEqual } = csUtils;\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = getCanvasEllipseCorners(canvasCoordinates);\n        const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n        const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n        const circleCornersIJK = points.map((world) => {\n            return transformWorldToIndex(segmentationImageData, world);\n        });\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.isInObject = createPointInEllipse({\n            topLeftWorld,\n            bottomRightWorld,\n            center,\n        });\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(worldInfo) {\n    const { topLeftWorld, bottomRightWorld, center } = worldInfo;\n    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n    const radius = Math.max(xRadius, yRadius, zRadius);\n    if (isEqual(xRadius, radius) &&\n        isEqual(yRadius, radius) &&\n        isEqual(zRadius, radius)) {\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n    }\n    const ellipseObj = {\n        center: center,\n        xRadius,\n        yRadius,\n        zRadius,\n    };\n    const { precalculated } = precalculatePointInEllipse(ellipseObj, {});\n    return precalculated;\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK, getBoundingBoxAroundShapeWorld, } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getStrategyData } from './utils/getStrategyData';\nimport { isAxisAlignedRectangle } from '../../../utilities/rectangleROITool/isAxisAlignedRectangle';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, imageVoxelManager, viewport, segmentationImageData, segmentationVoxelManager, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const isStackViewport = viewport instanceof StackViewport;\n    const isAligned = isStackViewport || isAxisAlignedRectangle(rectangleCornersIJK);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointsBoundsLPS = getBoundingBoxAroundShapeWorld(points);\n    let [[xMin, xMax], [yMin, yMax], [zMin, zMax]] = pointsBoundsLPS;\n    xMin -= EPS;\n    xMax += EPS;\n    yMin -= EPS;\n    yMax += EPS;\n    zMin -= EPS;\n    zMax += EPS;\n    const pointInShapeFn = isAligned\n        ? () => true\n        : (pointLPS) => {\n            const [x, y, z] = pointLPS;\n            const xInside = x >= xMin && x <= xMax;\n            const yInside = y >= yMin && y <= yMax;\n            const zInside = z >= zMin && z <= zMax;\n            return xInside && yInside && zInside;\n        };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, removeAnnotation } from '../../stateManagement';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default function convertContourSegmentationAnnotation(annotation) {\n    const { polyline } = annotation.data?.contour || {};\n    if (!polyline || polyline.length < 3) {\n        console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n        return;\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n    const startPointWorld = polyline[0];\n    const endPointWorld = polyline[polyline.length - 1];\n    const newAnnotation = {\n        metadata: {\n            ...annotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: annotation.data.handles.textBox\n                    ? { ...annotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                ...annotation.data.contour,\n            },\n            spline: annotation.data.spline,\n            segmentation: {\n                ...annotation.data.segmentation,\n            },\n        },\n        annotationUID: utilities.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: annotation.interpolationUID,\n        interpolationCompleted: annotation.interpolationCompleted,\n    };\n    addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);\n    addContourSegmentationAnnotation(newAnnotation);\n    return newAnnotation;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isObject from './isObject';\nfunction debounce(func, wait, options) {\n    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n    let lastInvokeTime = 0;\n    let leading = false;\n    let maxing = false;\n    let trailing = true;\n    const useRAF = !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = Number(wait) || 0;\n    if (isObject(options)) {\n        leading = Boolean(options.leading);\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    function invokeFunc(time) {\n        const args = lastArgs;\n        const thisArg = lastThis;\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n    function startTimer(pendingFunc, wait) {\n        if (useRAF) {\n            return window.requestAnimationFrame(pendingFunc);\n        }\n        return setTimeout(pendingFunc, wait);\n    }\n    function cancelTimer(id) {\n        if (useRAF) {\n            return window.cancelAnimationFrame(id);\n        }\n        clearTimeout(id);\n    }\n    function leadingEdge(time) {\n        lastInvokeTime = time;\n        timerId = startTimer(timerExpired, wait);\n        return leading ? invokeFunc(time) : result;\n    }\n    function remainingWait(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = wait - timeSinceLastCall;\n        return maxing\n            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n            : timeWaiting;\n    }\n    function shouldInvoke(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        return (lastCallTime === undefined ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait));\n    }\n    function timerExpired() {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        timerId = startTimer(timerExpired, remainingWait(time));\n    }\n    function trailingEdge(time) {\n        timerId = undefined;\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n    function cancel() {\n        if (timerId !== undefined) {\n            cancelTimer(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n    function flush() {\n        return timerId === undefined ? result : trailingEdge(Date.now());\n    }\n    function pending() {\n        return timerId !== undefined;\n    }\n    function debounced(...args) {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n        lastArgs = args;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                timerId = startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    debounced.pending = pending;\n    return debounced;\n}\nexport default debounce;\n","export default function getTextBoxCoordsCanvas(annotationCanvasPoints) {\n    const corners = _determineCorners(annotationCanvasPoints);\n    const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n    const textBoxCanvas = [corners.right[0], centerY];\n    return textBoxCanvas;\n}\nfunction _determineCorners(canvasPoints) {\n    const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n    const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n    const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n    const top = handlesTopToBottom[0];\n    const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n    return {\n        top,\n        bottom,\n        right,\n    };\n    function _compareX(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    }\n    function _compareY(a, b) {\n        return a[1] < b[1] ? -1 : 1;\n    }\n}\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import getViewportsForAnnotation from './getViewportsForAnnotation';\nexport default function getViewportForAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    return viewports.length ? viewports[0] : undefined;\n}\n","function isObject(value) {\n    const type = typeof value;\n    return value !== null && (type === 'object' || type === 'function');\n}\nexport default isObject;\n","export default function pointInSphere(sphere, pointLPS) {\n    const { center, radius } = sphere;\n    const radius2 = sphere.radius2 || radius * radius;\n    return ((pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) +\n        (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) +\n        (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <=\n        radius2);\n}\n","import { interpolatePoints } from './algorithms/bspline';\nfunction getContinuousUniformDistributionValues(minDistributionDistance, closedInterval) {\n    const result = [];\n    const [intervalIni, intervalEnd] = closedInterval;\n    const intervalSize = intervalEnd - intervalIni + 1;\n    const intensity = Math.floor(intervalSize / minDistributionDistance);\n    let x = 0;\n    let continuosDistributionValue = Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    while (continuosDistributionValue <= intervalEnd) {\n        result.push(continuosDistributionValue);\n        x++;\n        continuosDistributionValue =\n            Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    }\n    return result;\n}\nexport default function interpolateSegmentPoints(points, iniIndex, endIndex, knotsRatioPercentage) {\n    const segmentSize = endIndex - iniIndex + 1;\n    const amountOfKnots = Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n    const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n    if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n        return points;\n    }\n    if (segmentSize / minKnotDistance < 2) {\n        return points;\n    }\n    const interpolationIniIndex = Math.max(0, iniIndex);\n    const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n    const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n    const segmentPointsUnchangedEnd = points.slice(interpolationEndIndex + 1, points.length);\n    const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n        interpolationIniIndex,\n        interpolationEndIndex,\n    ]);\n    const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n    return [\n        ...segmentPointsUnchangedBeg,\n        ...interpolatedPoints,\n        ...segmentPointsUnchangedEnd,\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nconst iAxis = vec3.fromValues(1, 0, 0);\nconst jAxis = vec3.fromValues(0, 1, 0);\nconst kAxis = vec3.fromValues(0, 0, 1);\nconst axisList = [iAxis, jAxis, kAxis];\nfunction isAxisAlignedRectangle(rectangleCornersIJK) {\n    const rectangleVec1 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);\n    const rectangleVec2 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);\n    const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);\n    const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);\n    const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual(angle, 0) ||\n        isEqual(angle, 90) ||\n        isEqual(angle, 180) ||\n        isEqual(angle, 270));\n    return isAligned;\n}\nfunction calculateAnglesWithAxes(vec, axes) {\n    return axes.map((axis) => (vec3.angle(vec, axis) * 180) / Math.PI);\n}\nexport { isAxisAlignedRectangle };\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import debounce from './debounce';\nimport isObject from './isObject';\nfunction throttle(func, wait, options) {\n    let leading = true;\n    let trailing = true;\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    if (isObject(options)) {\n        leading = 'leading' in options ? Boolean(options.leading) : leading;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    return debounce(func, wait, {\n        leading,\n        trailing,\n        maxWait: wait,\n    });\n}\nexport default throttle;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","import { cache, StackViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nfunction isViewportPreScaled(viewport, targetId) {\n    if (viewport instanceof BaseVolumeViewport) {\n        const volumeId = utilities.getVolumeId(targetId);\n        const volume = cache.getVolume(volumeId);\n        return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n    }\n    else if (viewport instanceof StackViewport) {\n        const { preScale } = viewport.getImageData() || {};\n        return !!preScale?.scaled;\n    }\n    else {\n        return false;\n    }\n}\nexport { isViewportPreScaled };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import { m as macro } from '../../macros2.js';\nimport { b as roundVector, c as clampVector } from '../Core/Math/index.js';\nimport vtkBoundingBox from './BoundingBox.js';\nimport vtkDataSet from './DataSet.js';\nimport vtkStructuredData from './StructuredData.js';\nimport { StructuredType } from './StructuredData/Constants.js';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageData');\n  publicAPI.setExtent = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {\n      inExtent[_key] = arguments[_key];\n    }\n    const extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;\n    if (extentArray.length !== 6) {\n      return false;\n    }\n    const changeDetected = model.extent.some((item, index) => item !== extentArray[index]);\n    if (changeDetected) {\n      model.extent = extentArray.slice();\n      model.dataDescription = vtkStructuredData.getDataDescriptionFromExtent(model.extent);\n      publicAPI.modified();\n    }\n    return changeDetected;\n  };\n  publicAPI.setDimensions = function () {\n    let i;\n    let j;\n    let k;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (arguments.length === 1) {\n      const array = arguments.length <= 0 ? undefined : arguments[0];\n      i = array[0];\n      j = array[1];\n      k = array[2];\n    } else if (arguments.length === 3) {\n      i = arguments.length <= 0 ? undefined : arguments[0];\n      j = arguments.length <= 1 ? undefined : arguments[1];\n      k = arguments.length <= 2 ? undefined : arguments[2];\n    } else {\n      vtkErrorMacro('Bad dimension specification');\n      return;\n    }\n    publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);\n  };\n  publicAPI.getDimensions = () => [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];\n  publicAPI.getNumberOfCells = () => {\n    const dims = publicAPI.getDimensions();\n    let nCells = 1;\n    for (let i = 0; i < 3; i++) {\n      if (dims[i] === 0) {\n        return 0;\n      }\n      if (dims[i] > 1) {\n        nCells *= dims[i] - 1;\n      }\n    }\n    return nCells;\n  };\n  publicAPI.getNumberOfPoints = () => {\n    const dims = publicAPI.getDimensions();\n    return dims[0] * dims[1] * dims[2];\n  };\n  publicAPI.getPoint = index => {\n    const dims = publicAPI.getDimensions();\n    if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {\n      vtkErrorMacro('Requesting a point from an empty image.');\n      return null;\n    }\n    const ijk = new Float64Array(3);\n    switch (model.dataDescription) {\n      case StructuredType.EMPTY:\n        return null;\n      case StructuredType.SINGLE_POINT:\n        break;\n      case StructuredType.X_LINE:\n        ijk[0] = index;\n        break;\n      case StructuredType.Y_LINE:\n        ijk[1] = index;\n        break;\n      case StructuredType.Z_LINE:\n        ijk[2] = index;\n        break;\n      case StructuredType.XY_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0];\n        break;\n      case StructuredType.YZ_PLANE:\n        ijk[1] = index % dims[1];\n        ijk[2] = index / dims[1];\n        break;\n      case StructuredType.XZ_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[2] = index / dims[0];\n        break;\n      case StructuredType.XYZ_GRID:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0] % dims[1];\n        ijk[2] = index / (dims[0] * dims[1]);\n        break;\n      default:\n        vtkErrorMacro('Invalid dataDescription');\n        break;\n    }\n    const coords = [0, 0, 0];\n    publicAPI.indexToWorld(ijk, coords);\n    return coords;\n  };\n\n  // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;\n  // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;\n  // virtual vtkIdType FindPoint(double x, double y, double z)\n  // {\n  //   return this->vtkDataSet::FindPoint(x, y, z);\n  // }\n  // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,\n  //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkGenericCell *gencell,\n  //   vtkIdType cellId, double tol2, int& subId,\n  //   double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,\n  //                                 double tol2, int& subId, double pcoords[3],\n  //                                 double *weights) VTK_OVERRIDE;\n  // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,\n  //                                     this->GetDimensions());}\n  // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}\n  // void ComputeBounds() VTK_OVERRIDE;\n  // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest\n\n  publicAPI.getBounds = () => publicAPI.extentToBounds(publicAPI.getSpatialExtent());\n  publicAPI.extentToBounds = ex => vtkBoundingBox.transformBounds(ex, model.indexToWorld);\n  publicAPI.getSpatialExtent = () => vtkBoundingBox.inflate([...model.extent], 0.5);\n\n  // Internal, shouldn't need to call this manually.\n  publicAPI.computeTransforms = () => {\n    mat4.fromTranslation(model.indexToWorld, model.origin);\n    model.indexToWorld[0] = model.direction[0];\n    model.indexToWorld[1] = model.direction[1];\n    model.indexToWorld[2] = model.direction[2];\n    model.indexToWorld[4] = model.direction[3];\n    model.indexToWorld[5] = model.direction[4];\n    model.indexToWorld[6] = model.direction[5];\n    model.indexToWorld[8] = model.direction[6];\n    model.indexToWorld[9] = model.direction[7];\n    model.indexToWorld[10] = model.direction[8];\n    mat4.scale(model.indexToWorld, model.indexToWorld, model.spacing);\n    mat4.invert(model.worldToIndex, model.indexToWorld);\n  };\n  publicAPI.indexToWorld = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.indexToWorld);\n    return aout;\n  };\n  publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;\n  publicAPI.worldToIndex = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.worldToIndex);\n    return aout;\n  };\n  publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;\n  publicAPI.indexToWorldBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.indexToWorld, bout);\n  };\n  publicAPI.worldToIndexBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.worldToIndex, bout);\n  };\n\n  // Make sure the transform is correct\n  publicAPI.onModified(publicAPI.computeTransforms);\n  publicAPI.computeTransforms();\n  publicAPI.getCenter = () => vtkBoundingBox.getCenter(publicAPI.getBounds());\n  publicAPI.computeHistogram = function (worldBounds) {\n    let voxelFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const bounds = [0, 0, 0, 0, 0, 0];\n    publicAPI.worldToIndexBounds(worldBounds, bounds);\n    const point1 = [0, 0, 0];\n    const point2 = [0, 0, 0];\n    vtkBoundingBox.computeCornerPoints(bounds, point1, point2);\n    roundVector(point1, point1);\n    roundVector(point2, point2);\n    const dimensions = publicAPI.getDimensions();\n    clampVector(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);\n    clampVector(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);\n    const yStride = dimensions[0];\n    const zStride = dimensions[0] * dimensions[1];\n    const pixels = publicAPI.getPointData().getScalars().getData();\n    let maximum = -Infinity;\n    let minimum = Infinity;\n    let sumOfSquares = 0;\n    let isum = 0;\n    let inum = 0;\n    for (let z = point1[2]; z <= point2[2]; z++) {\n      for (let y = point1[1]; y <= point2[1]; y++) {\n        let index = point1[0] + y * yStride + z * zStride;\n        for (let x = point1[0]; x <= point2[0]; x++) {\n          if (!voxelFunction || voxelFunction([x, y, z], bounds)) {\n            const pixel = pixels[index];\n            if (pixel > maximum) maximum = pixel;\n            if (pixel < minimum) minimum = pixel;\n            sumOfSquares += pixel * pixel;\n            isum += pixel;\n            inum += 1;\n          }\n          ++index;\n        }\n      }\n    }\n    const average = inum > 0 ? isum / inum : 0;\n    const variance = inum ? Math.abs(sumOfSquares / inum - average * average) : 0;\n    const sigma = Math.sqrt(variance);\n    return {\n      minimum,\n      maximum,\n      average,\n      variance,\n      sigma,\n      count: inum\n    };\n  };\n\n  // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).\n  // Scalar data could be tuples for color information?\n  publicAPI.computeIncrements = function (extent) {\n    let numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const increments = [];\n    let incr = numberOfComponents;\n\n    // Calculate array increment offsets\n    // similar to c++ vtkImageData::ComputeIncrements\n    for (let idx = 0; idx < 3; ++idx) {\n      increments[idx] = incr;\n      incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;\n    }\n    return increments;\n  };\n\n  /**\n   * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.\n   * @return {Number} the corresponding flattened index in the scalar array\n   */\n  publicAPI.computeOffsetIndex = _ref => {\n    let [i, j, k] = _ref;\n    const extent = publicAPI.getExtent();\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    const increments = publicAPI.computeIncrements(extent, numberOfComponents);\n    // Use the array increments to find the pixel index\n    // similar to c++ vtkImageData::GetArrayPointer\n    // Math.floor to catch \"practically 0\" e^-15 scenarios.\n    return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);\n  };\n\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @return {Number|NaN} the corresponding pixel's index in the scalar array\n   */\n  publicAPI.getOffsetIndexFromWorld = xyz => {\n    const extent = publicAPI.getExtent();\n    const index = publicAPI.worldToIndex(xyz);\n\n    // Confirm indexed i,j,k coords are within the bounds of the volume\n    for (let idx = 0; idx < 3; ++idx) {\n      if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {\n        vtkErrorMacro(`GetScalarPointer: Pixel ${index} is not in memory. Current extent = ${extent}`);\n        return NaN;\n      }\n    }\n\n    // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream\n    return publicAPI.computeOffsetIndex(index);\n  };\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @param {Number?} comp the scalar component index for multi-component scalars\n   * @return {Number|NaN} the corresponding pixel's scalar value\n   */\n  publicAPI.getScalarValueFromWorld = function (xyz) {\n    let comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    if (comp < 0 || comp >= numberOfComponents) {\n      vtkErrorMacro(`GetScalarPointer: Scalar Component ${comp} is not within bounds. Current Scalar numberOfComponents: ${numberOfComponents}`);\n      return NaN;\n    }\n    const offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);\n    if (Number.isNaN(offsetIndex)) {\n      // VTK Error Macro will have been tripped already, no need to do it again,\n      return offsetIndex;\n    }\n    return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  direction: null,\n  // a mat3\n  indexToWorld: null,\n  // a mat4\n  worldToIndex: null,\n  // a mat4\n  spacing: [1.0, 1.0, 1.0],\n  origin: [0.0, 0.0, 0.0],\n  extent: [0, -1, 0, -1, 0, -1],\n  dataDescription: StructuredType.EMPTY\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkDataSet.extend(publicAPI, model, initialValues);\n  if (!model.direction) {\n    model.direction = mat3.identity(new Float64Array(9));\n  } else if (Array.isArray(model.direction)) {\n    model.direction = new Float64Array(model.direction.slice(0, 9));\n  }\n  model.indexToWorld = new Float64Array(16);\n  model.worldToIndex = new Float64Array(16);\n\n  // Set/Get methods\n  macro.get(publicAPI, model, ['indexToWorld', 'worldToIndex']);\n  macro.setGetArray(publicAPI, model, ['origin', 'spacing'], 3);\n  macro.setGetArray(publicAPI, model, ['direction'], 9);\n  macro.getArray(publicAPI, model, ['extent'], 6);\n\n  // Object specific methods\n  vtkImageData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageData$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { h as hsv2rgb, i as isNan, K as floor, L as isInf, M as rgb2hsv, N as rgb2lab, O as lab2rgb } from '../../Common/Core/Math/index.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport Constants from './ColorTransferFunction/Constants.js';\n\nconst {\n  ColorSpace,\n  Scale\n} = Constants;\nconst {\n  ScalarMappingTarget\n} = vtkScalarsToColors;\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-continue                                                */\n\n// Convert to and from a special polar version of CIELAB (useful for creating\n// continuous diverging color maps).\nfunction vtkColorTransferFunctionLabToMsh(lab, msh) {\n  const L = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  const M = Math.sqrt(L * L + a * a + b * b);\n  const s = M > 0.001 ? Math.acos(L / M) : 0.0;\n  const h = s > 0.001 ? Math.atan2(b, a) : 0.0;\n  msh[0] = M;\n  msh[1] = s;\n  msh[2] = h;\n}\nfunction vtkColorTransferFunctionMshToLab(msh, lab) {\n  const M = msh[0];\n  const s = msh[1];\n  const h = msh[2];\n  lab[0] = M * Math.cos(s);\n  lab[1] = M * Math.sin(s) * Math.cos(h);\n  lab[2] = M * Math.sin(s) * Math.sin(h);\n}\n\n// For the case when interpolating from a saturated color to an unsaturated\n// color, find a hue for the unsaturated color that makes sense.\nfunction vtkColorTransferFunctionAdjustHue(msh, unsatM) {\n  if (msh[0] >= unsatM - 0.1) {\n    // The best we can do is hold hue constant.\n    return msh[2];\n  }\n\n  // This equation is designed to make the perceptual change of the\n  // interpolation to be close to constant.\n  const hueSpin = msh[1] * Math.sqrt(unsatM * unsatM - msh[0] * msh[0]) / (msh[0] * Math.sin(msh[1]));\n  // Spin hue away from 0 except in purple hues.\n  if (msh[2] > -0.3 * Math.PI) {\n    return msh[2] + hueSpin;\n  }\n  return msh[2] - hueSpin;\n}\nfunction vtkColorTransferFunctionAngleDiff(a1, a2) {\n  let adiff = a1 - a2;\n  if (adiff < 0.0) {\n    adiff = -adiff;\n  }\n  while (adiff >= 2.0 * Math.PI) {\n    adiff -= 2.0 * Math.PI;\n  }\n  if (adiff > Math.PI) {\n    adiff = 2.0 * Math.PI - adiff;\n  }\n  return adiff;\n}\n\n// Interpolate a diverging color map.\nfunction vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, result) {\n  const lab1 = [];\n  const lab2 = [];\n  rgb2lab(rgb1, lab1);\n  rgb2lab(rgb2, lab2);\n  const msh1 = [];\n  const msh2 = [];\n  vtkColorTransferFunctionLabToMsh(lab1, msh1);\n  vtkColorTransferFunctionLabToMsh(lab2, msh2);\n\n  // If the endpoints are distinct saturated colors, then place white in between\n  // them.\n  let localS = s;\n  if (msh1[1] > 0.05 && msh2[1] > 0.05 && vtkColorTransferFunctionAngleDiff(msh1[2], msh2[2]) > 0.33 * Math.PI) {\n    // Insert the white midpoint by setting one end to white and adjusting the\n    // scalar value.\n    let Mmid = Math.max(msh1[0], msh2[0]);\n    Mmid = Math.max(88.0, Mmid);\n    if (s < 0.5) {\n      msh2[0] = Mmid;\n      msh2[1] = 0.0;\n      msh2[2] = 0.0;\n      localS *= 2.0;\n    } else {\n      msh1[0] = Mmid;\n      msh1[1] = 0.0;\n      msh1[2] = 0.0;\n      localS = 2.0 * localS - 1.0;\n    }\n  }\n\n  // If one color has no saturation, then its hue value is invalid.  In this\n  // case, we want to set it to something logical so that the interpolation of\n  // hue makes sense.\n  if (msh1[1] < 0.05 && msh2[1] > 0.05) {\n    msh1[2] = vtkColorTransferFunctionAdjustHue(msh2, msh1[0]);\n  } else if (msh2[1] < 0.05 && msh1[1] > 0.05) {\n    msh2[2] = vtkColorTransferFunctionAdjustHue(msh1, msh2[0]);\n  }\n  const mshTmp = [];\n  mshTmp[0] = (1 - localS) * msh1[0] + localS * msh2[0];\n  mshTmp[1] = (1 - localS) * msh1[1] + localS * msh2[1];\n  mshTmp[2] = (1 - localS) * msh1[2] + localS * msh2[2];\n\n  // Now convert back to RGB\n  const labTmp = [];\n  vtkColorTransferFunctionMshToLab(mshTmp, labTmp);\n  lab2rgb(labTmp, result);\n}\n\n// ----------------------------------------------------------------------------\n// vtkColorTransferFunction methods\n// ----------------------------------------------------------------------------\n\nfunction vtkColorTransferFunction(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkColorTransferFunction');\n\n  // Return the number of points which specify this function\n  publicAPI.getSize = () => model.nodes.length;\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPoint = (x, r, g, b) => publicAPI.addRGBPointLong(x, r, g, b, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPointLong = function (x, r, g, b) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    // Error check\n    if (midpoint < 0.0 || midpoint > 1.0) {\n      vtkErrorMacro('Midpoint outside range [0.0, 1.0]');\n      return -1;\n    }\n    if (sharpness < 0.0 || sharpness > 1.0) {\n      vtkErrorMacro('Sharpness outside range [0.0, 1.0]');\n      return -1;\n    }\n\n    // remove any node already at this X location\n    if (!model.allowDuplicateScalars) {\n      publicAPI.removePoint(x);\n    }\n\n    // Create the new node\n    const node = {\n      x,\n      r,\n      g,\n      b,\n      midpoint,\n      sharpness\n    };\n\n    // Add it, then sort to get everything in order\n    model.nodes.push(node);\n    publicAPI.sortAndUpdateRange();\n\n    // We need to find the index of the node we just added in order\n    // to return this value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n\n    // If we didn't find it, something went horribly wrong so\n    // return -1\n    if (i < model.nodes.length) {\n      return i;\n    }\n    return -1;\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPoint = (x, h, s, v) => publicAPI.addHSVPointLong(x, h, s, v, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPointLong = function (x, h, s, v) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    const rgb = [];\n    const hsv = [h, s, v];\n    hsv2rgb(hsv, rgb);\n    return publicAPI.addRGBPoint(x, rgb[0], rgb[1], rgb[2], midpoint, sharpness);\n  };\n\n  //----------------------------------------------------------------------------\n  // Set nodes directly\n  publicAPI.setNodes = nodes => {\n    if (model.nodes !== nodes) {\n      const before = JSON.stringify(model.nodes);\n      model.nodes = nodes;\n      const after = JSON.stringify(model.nodes);\n      if (publicAPI.sortAndUpdateRange() || before !== after) {\n        publicAPI.modified();\n        return true;\n      }\n    }\n    return false;\n  };\n\n  //----------------------------------------------------------------------------\n  // Sort the vector in increasing order, then fill in\n  // the Range\n  publicAPI.sortAndUpdateRange = () => {\n    const before = JSON.stringify(model.nodes);\n    model.nodes.sort((a, b) => a.x - b.x);\n    const after = JSON.stringify(model.nodes);\n    const modifiedInvoked = publicAPI.updateRange();\n    // If range is updated, Modified() has been called, don't call it again.\n    if (!modifiedInvoked && before !== after) {\n      publicAPI.modified();\n      return true;\n    }\n    return modifiedInvoked;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.updateRange = () => {\n    const oldRange = [2];\n    oldRange[0] = model.mappingRange[0];\n    oldRange[1] = model.mappingRange[1];\n    const size = model.nodes.length;\n    if (size) {\n      model.mappingRange[0] = model.nodes[0].x;\n      model.mappingRange[1] = model.nodes[size - 1].x;\n    } else {\n      model.mappingRange[0] = 0;\n      model.mappingRange[1] = 0;\n    }\n\n    // If the range is the same, then no need to call Modified()\n    if (oldRange[0] === model.mappingRange[0] && oldRange[1] === model.mappingRange[1]) {\n      return false;\n    }\n    publicAPI.modified();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove a point\n  publicAPI.removePoint = x => {\n    // First find the node since we need to know its\n    // index as our return value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n    const retVal = i;\n\n    // If the node doesn't exist, we return -1\n    if (i >= model.nodes.length) {\n      return -1;\n    }\n\n    // If the first or last point has been removed, then we update the range\n    // No need to sort here as the order of points hasn't changed.\n    let modifiedInvoked = false;\n    model.nodes.splice(i, 1);\n    if (i === 0 || i === model.nodes.length) {\n      modifiedInvoked = publicAPI.updateRange();\n    }\n    if (!modifiedInvoked) {\n      publicAPI.modified();\n    }\n    return retVal;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.movePoint = (oldX, newX) => {\n    if (oldX === newX) {\n      // Nothing to do.\n      return;\n    }\n    publicAPI.removePoint(newX);\n    for (let i = 0; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === oldX) {\n        model.nodes[i].x = newX;\n        publicAPI.sortAndUpdateRange();\n        break;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove all points\n  publicAPI.removeAllPoints = () => {\n    model.nodes = [];\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in RGB\n  publicAPI.addRGBSegment = (x1, r1, g1, b1, x2, r2, g2, b2) => {\n    // First, find all points in this range and remove them\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= x1 && model.nodes[i].x <= x2) {\n        model.nodes.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n\n    // Now add the points\n    publicAPI.addRGBPointLong(x1, r1, g1, b1, 0.5, 0.0);\n    publicAPI.addRGBPointLong(x2, r2, g2, b2, 0.5, 0.0);\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in HSV\n  publicAPI.addHSVSegment = (x1, h1, s1, v1, x2, h2, s2, v2) => {\n    const hsv1 = [h1, s1, v1];\n    const hsv2 = [h2, s2, v2];\n    const rgb1 = [];\n    const rgb2 = [];\n    hsv2rgb(hsv1, rgb1);\n    hsv2rgb(hsv2, rgb2);\n    publicAPI.addRGBSegment(x1, rgb1[0], rgb1[1], rgb1[2], x2, rgb2[0], rgb2[1], rgb2[2]);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGBA color evaluated at the specified location\n  publicAPI.mapValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return [Math.floor(255.0 * rgb[0] + 0.5), Math.floor(255.0 * rgb[1] + 0.5), Math.floor(255.0 * rgb[2] + 0.5), 255];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGB color evaluated at the specified location\n  publicAPI.getColor = (x, rgb) => {\n    if (model.indexedLookup) {\n      const numNodes = publicAPI.getSize();\n      // todo\n      const idx = publicAPI.getAnnotatedValueIndexInternal(x);\n      if (idx < 0 || numNodes === 0) {\n        const nanColor = publicAPI.getNanColorByReference();\n        rgb[0] = nanColor[0];\n        rgb[1] = nanColor[1];\n        rgb[2] = nanColor[2];\n      } else {\n        const nodeVal = [];\n        publicAPI.getNodeValue(idx % numNodes, nodeVal);\n        // nodeVal[0] is the x value. nodeVal[1...3] is rgb.\n        rgb[0] = nodeVal[1];\n        rgb[1] = nodeVal[2];\n        rgb[2] = nodeVal[3];\n      }\n      return;\n    }\n    publicAPI.getTable(x, x, 1, rgb);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the red color evaluated at the specified location\n  publicAPI.getRedValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[0];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the green color evaluated at the specified location\n  publicAPI.getGreenValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[1];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the blue color evaluated at the specified location\n  publicAPI.getBlueValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[2];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns a table of RGB colors at regular intervals along the function\n  publicAPI.getTable = (xStart_, xEnd_, size, table) => {\n    // To handle BigInt limitation\n    const xStart = Number(xStart_);\n    const xEnd = Number(xEnd_);\n\n    // Special case: If either the start or end is a NaN, then all any\n    // interpolation done on them is also a NaN.  Therefore, fill the table with\n    // the NaN color.\n    if (isNan(xStart) || isNan(xEnd)) {\n      for (let i = 0; i < size; i++) {\n        table[i * 3 + 0] = model.nanColor[0];\n        table[i * 3 + 1] = model.nanColor[1];\n        table[i * 3 + 2] = model.nanColor[2];\n      }\n      return;\n    }\n    let idx = 0;\n    const numNodes = model.nodes.length;\n\n    // Need to keep track of the last value so that\n    // we can fill in table locations past this with\n    // this value if Clamping is On.\n    let lastR = 0.0;\n    let lastG = 0.0;\n    let lastB = 0.0;\n    if (numNodes !== 0) {\n      lastR = model.nodes[numNodes - 1].r;\n      lastG = model.nodes[numNodes - 1].g;\n      lastB = model.nodes[numNodes - 1].b;\n    }\n    let x = 0.0;\n    let x1 = 0.0;\n    let x2 = 0.0;\n    const rgb1 = [0.0, 0.0, 0.0];\n    const rgb2 = [0.0, 0.0, 0.0];\n    let midpoint = 0.0;\n    let sharpness = 0.0;\n    const tmpVec = [];\n\n    // If the scale is logarithmic, make sure the range is valid.\n    let usingLogScale = model.scale === Scale.LOG10;\n    if (usingLogScale) {\n      // Note: This requires range[0] <= range[1].\n      usingLogScale = model.mappingRange[0] > 0.0;\n    }\n    let logStart = 0.0;\n    let logEnd = 0.0;\n    let logX = 0.0;\n    if (usingLogScale) {\n      logStart = Math.log10(xStart);\n      logEnd = Math.log10(xEnd);\n    }\n\n    // For each table entry\n    for (let i = 0; i < size; i++) {\n      // Find our location in the table\n      const tidx = 3 * i;\n\n      // Find our X location. If we are taking only 1 sample, make\n      // it halfway between start and end (usually start and end will\n      // be the same in this case)\n      if (size > 1) {\n        if (usingLogScale) {\n          logX = logStart + i / (size - 1.0) * (logEnd - logStart);\n          x = 10.0 ** logX;\n        } else {\n          x = xStart + i / (size - 1.0) * (xEnd - xStart);\n        }\n      } else if (usingLogScale) {\n        logX = 0.5 * (logStart + logEnd);\n        x = 10.0 ** logX;\n      } else {\n        x = 0.5 * (xStart + xEnd);\n      }\n\n      // Linearly map x from mappingRange to [0, numberOfValues-1],\n      // discretize (round down to the closest integer),\n      // then map back to mappingRange\n      if (model.discretize) {\n        const range = model.mappingRange;\n        if (x >= range[0] && x <= range[1]) {\n          const numberOfValues = model.numberOfValues;\n          const deltaRange = range[1] - range[0];\n          if (numberOfValues <= 1) {\n            x = range[0] + deltaRange / 2.0;\n          } else {\n            // normalize x\n            const xn = (x - range[0]) / deltaRange;\n            // discretize\n            const discretizeIndex = floor(numberOfValues * xn);\n            // get discretized x\n            x = range[0] + discretizeIndex / (numberOfValues - 1) * deltaRange;\n          }\n        }\n      }\n\n      // Do we need to move to the next node?\n      while (idx < numNodes && x > model.nodes[idx].x) {\n        idx++;\n        // If we are at a valid point index, fill in\n        // the value at this node, and the one before (the\n        // two that surround our current sample location)\n        // idx cannot be 0 since we just incremented it.\n        if (idx < numNodes) {\n          x1 = model.nodes[idx - 1].x;\n          x2 = model.nodes[idx].x;\n          if (usingLogScale) {\n            x1 = Math.log10(x1);\n            x2 = Math.log10(x2);\n          }\n          rgb1[0] = model.nodes[idx - 1].r;\n          rgb2[0] = model.nodes[idx].r;\n          rgb1[1] = model.nodes[idx - 1].g;\n          rgb2[1] = model.nodes[idx].g;\n          rgb1[2] = model.nodes[idx - 1].b;\n          rgb2[2] = model.nodes[idx].b;\n\n          // We only need the previous midpoint and sharpness\n          // since these control this region\n          midpoint = model.nodes[idx - 1].midpoint;\n          sharpness = model.nodes[idx - 1].sharpness;\n\n          // Move midpoint away from extreme ends of range to avoid\n          // degenerate math\n          if (midpoint < 0.00001) {\n            midpoint = 0.00001;\n          }\n          if (midpoint > 0.99999) {\n            midpoint = 0.99999;\n          }\n        }\n      }\n\n      // Are we at or past the end? If so, just use the last value\n      if (x > model.mappingRange[1]) {\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseAboveRangeColor()) {\n            table[tidx] = model.aboveRangeColor[0];\n            table[tidx + 1] = model.aboveRangeColor[1];\n            table[tidx + 2] = model.aboveRangeColor[2];\n          } else {\n            table[tidx] = lastR;\n            table[tidx + 1] = lastG;\n            table[tidx + 2] = lastB;\n          }\n        }\n      } else if (x < model.mappingRange[0] || isInf(x) && x < 0) {\n        // we are before the first node? If so, duplicate this node's values.\n        // We have to deal with -inf here\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseBelowRangeColor()) {\n            table[tidx] = model.belowRangeColor[0];\n            table[tidx + 1] = model.belowRangeColor[1];\n            table[tidx + 2] = model.belowRangeColor[2];\n          } else if (numNodes > 0) {\n            table[tidx] = model.nodes[0].r;\n            table[tidx + 1] = model.nodes[0].g;\n            table[tidx + 2] = model.nodes[0].b;\n          }\n        }\n      } else if (idx === 0 && (Math.abs(x - xStart) < 1e-6 || model.discretize)) {\n        if (numNodes > 0) {\n          table[tidx] = model.nodes[0].r;\n          table[tidx + 1] = model.nodes[0].g;\n          table[tidx + 2] = model.nodes[0].b;\n        } else {\n          table[tidx] = 0.0;\n          table[tidx + 1] = 0.0;\n          table[tidx + 2] = 0.0;\n        }\n      } else {\n        // OK, we are between two nodes - interpolate\n        // Our first attempt at a normalized location [0,1] -\n        // we will be modifying this based on midpoint and\n        // sharpness to get the curve shape we want and to have\n        // it pass through (y1+y2)/2 at the midpoint.\n        let s = 0.0;\n        if (usingLogScale) {\n          s = (logX - x1) / (x2 - x1);\n        } else {\n          s = (x - x1) / (x2 - x1);\n        }\n\n        // Readjust based on the midpoint - linear adjustment\n        if (s < midpoint) {\n          s = 0.5 * s / midpoint;\n        } else {\n          s = 0.5 + 0.5 * (s - midpoint) / (1.0 - midpoint);\n        }\n\n        // override for sharpness > 0.99\n        // In this case we just want piecewise constant\n        if (sharpness > 0.99) {\n          // Use the first value since we are below the midpoint\n          if (s < 0.5) {\n            table[tidx] = rgb1[0];\n            table[tidx + 1] = rgb1[1];\n            table[tidx + 2] = rgb1[2];\n            continue;\n          } else {\n            // Use the second value at or above the midpoint\n            table[tidx] = rgb2[0];\n            table[tidx + 1] = rgb2[1];\n            table[tidx + 2] = rgb2[2];\n            continue;\n          }\n        }\n\n        // Override for sharpness < 0.01\n        // In this case we want piecewise linear\n        if (sharpness < 0.01) {\n          // Simple linear interpolation\n          if (model.colorSpace === ColorSpace.RGB) {\n            table[tidx] = (1 - s) * rgb1[0] + s * rgb2[0];\n            table[tidx + 1] = (1 - s) * rgb1[1] + s * rgb2[1];\n            table[tidx + 2] = (1 - s) * rgb1[2] + s * rgb2[2];\n          } else if (model.colorSpace === ColorSpace.HSV) {\n            const hsv1 = [];\n            const hsv2 = [];\n            rgb2hsv(rgb1, hsv1);\n            rgb2hsv(rgb2, hsv2);\n            if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n              if (hsv1[0] > hsv2[0]) {\n                hsv1[0] -= 1.0;\n              } else {\n                hsv2[0] -= 1.0;\n              }\n            }\n            const hsvTmp = [];\n            hsvTmp[0] = (1.0 - s) * hsv1[0] + s * hsv2[0];\n            if (hsvTmp[0] < 0.0) {\n              hsvTmp[0] += 1.0;\n            }\n            hsvTmp[1] = (1.0 - s) * hsv1[1] + s * hsv2[1];\n            hsvTmp[2] = (1.0 - s) * hsv1[2] + s * hsv2[2];\n\n            // Now convert this back to RGB\n            hsv2rgb(hsvTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.LAB) {\n            const lab1 = [];\n            const lab2 = [];\n            rgb2lab(rgb1, lab1);\n            rgb2lab(rgb2, lab2);\n            const labTmp = [];\n            labTmp[0] = (1 - s) * lab1[0] + s * lab2[0];\n            labTmp[1] = (1 - s) * lab1[1] + s * lab2[1];\n            labTmp[2] = (1 - s) * lab1[2] + s * lab2[2];\n\n            // Now convert back to RGB\n            lab2rgb(labTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.DIVERGING) {\n            vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else {\n            vtkErrorMacro('ColorSpace set to invalid value.', model.colorSpace);\n          }\n          continue;\n        }\n\n        // We have a sharpness between [0.01, 0.99] - we will\n        // used a modified hermite curve interpolation where we\n        // derive the slope based on the sharpness, and we compress\n        // the curve non-linearly based on the sharpness\n\n        // First, we will adjust our position based on sharpness in\n        // order to make the curve sharper (closer to piecewise constant)\n        if (s < 0.5) {\n          s = 0.5 * (s * 2.0) ** (1.0 + 10.0 * sharpness);\n        } else if (s > 0.5) {\n          s = 1.0 - 0.5 * ((1.0 - s) * 2) ** (1 + 10.0 * sharpness);\n        }\n\n        // Compute some coefficients we will need for the hermite curve\n        const ss = s * s;\n        const sss = ss * s;\n        const h1 = 2.0 * sss - 3 * ss + 1;\n        const h2 = -2 * sss + 3 * ss;\n        const h3 = sss - 2 * ss + s;\n        const h4 = sss - ss;\n        let slope;\n        let t;\n        if (model.colorSpace === ColorSpace.RGB) {\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = rgb2[j] - rgb1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            table[tidx + j] = h1 * rgb1[j] + h2 * rgb2[j] + h3 * t + h4 * t;\n          }\n        } else if (model.colorSpace === ColorSpace.HSV) {\n          const hsv1 = [];\n          const hsv2 = [];\n          rgb2hsv(rgb1, hsv1);\n          rgb2hsv(rgb2, hsv2);\n          if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n            if (hsv1[0] > hsv2[0]) {\n              hsv1[0] -= 1.0;\n            } else {\n              hsv2[0] -= 1.0;\n            }\n          }\n          const hsvTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = hsv2[j] - hsv1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            hsvTmp[j] = h1 * hsv1[j] + h2 * hsv2[j] + h3 * t + h4 * t;\n            if (j === 0 && hsvTmp[j] < 0.0) {\n              hsvTmp[j] += 1.0;\n            }\n          }\n          // Now convert this back to RGB\n          hsv2rgb(hsvTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.LAB) {\n          const lab1 = [];\n          const lab2 = [];\n          rgb2lab(rgb1, lab1);\n          rgb2lab(rgb2, lab2);\n          const labTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = lab2[j] - lab1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            labTmp[j] = h1 * lab1[j] + h2 * lab2[j] + h3 * t + h4 * t;\n          }\n          // Now convert this back to RGB\n          lab2rgb(labTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.DIVERGING) {\n          // I have not implemented proper interpolation by a hermite curve for\n          // the diverging color map, but I cannot think of a good use case for\n          // that anyway.\n          vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else {\n          vtkErrorMacro('ColorSpace set to invalid value.');\n        }\n\n        // Final error check to make sure we don't go outside [0,1]\n        for (let j = 0; j < 3; j++) {\n          table[tidx + j] = table[tidx + j] < 0.0 ? 0.0 : table[tidx + j];\n          table[tidx + j] = table[tidx + j] > 1.0 ? 1.0 : table[tidx + j];\n        }\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getUint8Table = function (xStart, xEnd, size) {\n    let withAlpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (publicAPI.getMTime() <= model.buildTime && model.tableSize === size && model.tableWithAlpha !== withAlpha) {\n      return model.table;\n    }\n    if (model.nodes.length === 0) {\n      vtkErrorMacro('Attempting to lookup a value with no points in the function');\n      return model.table;\n    }\n    const nbChannels = withAlpha ? 4 : 3;\n    if (model.tableSize !== size || model.tableWithAlpha !== withAlpha) {\n      model.table = new Uint8Array(size * nbChannels);\n      model.tableSize = size;\n      model.tableWithAlpha = withAlpha;\n    }\n    const tmpTable = [];\n    publicAPI.getTable(xStart, xEnd, size, tmpTable);\n    for (let i = 0; i < size; i++) {\n      model.table[i * nbChannels + 0] = Math.floor(tmpTable[i * 3 + 0] * 255.0 + 0.5);\n      model.table[i * nbChannels + 1] = Math.floor(tmpTable[i * 3 + 1] * 255.0 + 0.5);\n      model.table[i * nbChannels + 2] = Math.floor(tmpTable[i * 3 + 2] * 255.0 + 0.5);\n      if (withAlpha) {\n        model.table[i * nbChannels + 3] = 255;\n      }\n    }\n    model.buildTime.modified();\n    return model.table;\n  };\n  publicAPI.buildFunctionFromArray = array => {\n    publicAPI.removeAllPoints();\n    const numComponents = array.getNumberOfComponents();\n    for (let i = 0; i < array.getNumberOfTuples(); i++) {\n      switch (numComponents) {\n        case 3:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 4:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 5:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n        case 6:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n      }\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.buildFunctionFromTable = (xStart, xEnd, size, table) => {\n    let inc = 0.0;\n    publicAPI.removeAllPoints();\n    if (size > 1) {\n      inc = (xEnd - xStart) / (size - 1.0);\n    }\n    for (let i = 0; i < size; i++) {\n      const node = {\n        x: xStart + inc * i,\n        r: table[i * 3],\n        g: table[i * 3 + 1],\n        b: table[i * 3 + 2],\n        sharpness: 0.0,\n        midpoint: 0.5\n      };\n      model.nodes.push(node);\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.getNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    val[0] = model.nodes[index].x;\n    val[1] = model.nodes[index].r;\n    val[2] = model.nodes[index].g;\n    val[3] = model.nodes[index].b;\n    val[4] = model.nodes[index].midpoint;\n    val[5] = model.nodes[index].sharpness;\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.setNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    const oldX = model.nodes[index].x;\n    model.nodes[index].x = val[0];\n    model.nodes[index].r = val[1];\n    model.nodes[index].g = val[2];\n    model.nodes[index].b = val[3];\n    model.nodes[index].midpoint = val[4];\n    model.nodes[index].sharpness = val[5];\n    if (oldX !== val[0]) {\n      // The point has been moved, the order of points or the range might have\n      // been modified.\n      publicAPI.sortAndUpdateRange();\n      // No need to call Modified() here because SortAndUpdateRange() has done it\n      // already.\n    } else {\n      publicAPI.modified();\n    }\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getNumberOfAvailableColors = () => {\n    if (model.indexedLookup && publicAPI.getSize()) {\n      return publicAPI.getSize();\n    }\n    if (model.tableSize) {\n      // Not sure if this is correct since it is only set if\n      // \"const unsigned char *::GetTable(double xStart, double xEnd,int size)\"\n      // has been called.\n      return model.tableSize;\n    }\n    const nNodes = model.nodes?.length ?? 0;\n    // The minimum is 4094 colors so that it fills in the 4096 texels texture in `mapScalarsToTexture`\n    return Math.max(4094, nNodes);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getIndexedColor = (idx, rgba) => {\n    const n = publicAPI.getSize();\n    if (n > 0 && idx >= 0) {\n      const nodeValue = [];\n      publicAPI.getNodeValue(idx % n, nodeValue);\n      for (let j = 0; j < 3; ++j) {\n        rgba[j] = nodeValue[j + 1];\n      }\n      rgba[3] = 1.0; // NodeColor is RGB-only.\n      return;\n    }\n    const nanColor = publicAPI.getNanColorByReference();\n    rgba[0] = nanColor[0];\n    rgba[1] = nanColor[1];\n    rgba[2] = nanColor[2];\n    rgba[3] = 1.0; // NanColor is RGB-only.\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.fillFromDataPointer = (nb, ptr) => {\n    if (nb <= 0 || !ptr) {\n      return;\n    }\n    publicAPI.removeAllPoints();\n    for (let i = 0; i < nb; i++) {\n      publicAPI.addRGBPoint(ptr[i * 4], ptr[i * 4 + 1], ptr[i * 4 + 2], ptr[i * 4 + 3]);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.setMappingRange = (min, max) => {\n    const range = [min, max];\n    const originalRange = publicAPI.getRange();\n    if (originalRange[1] === range[1] && originalRange[0] === range[0]) {\n      return;\n    }\n    if (range[1] === range[0]) {\n      vtkErrorMacro('attempt to set zero width color range');\n      return;\n    }\n    const scale = (range[1] - range[0]) / (originalRange[1] - originalRange[0]);\n    const shift = range[0] - originalRange[0] * scale;\n    for (let i = 0; i < model.nodes.length; ++i) {\n      model.nodes[i].x = model.nodes[i].x * scale + shift;\n    }\n    model.mappingRange[0] = range[0];\n    model.mappingRange[1] = range[1];\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.adjustRange = range => {\n    const functionRange = publicAPI.getRange();\n\n    // Make sure we have points at each end of the range\n    const rgb = [];\n    if (functionRange[0] < range[0]) {\n      publicAPI.getColor(range[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    }\n    if (functionRange[1] > range[1]) {\n      publicAPI.getColor(range[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    }\n\n    // Remove all points out-of-range\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= range[0] && model.nodes[i].x <= range[1]) {\n        model.nodes.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    return 1;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.estimateMinNumberOfSamples = (x1, x2) => {\n    const d = publicAPI.findMinimumXDistance();\n    return Math.ceil((x2 - x1) / d);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.findMinimumXDistance = () => {\n    if (model.nodes.length < 2) {\n      return -1.0;\n    }\n    let distance = Number.MAX_VALUE;\n    for (let i = 0; i < model.nodes.length - 1; i++) {\n      const currentDist = model.nodes[i + 1].x - model.nodes[i].x;\n      if (currentDist < distance) {\n        distance = currentDist;\n      }\n    }\n    return distance;\n  };\n  publicAPI.mapScalarsThroughTable = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkDebugMacro('Transfer Function Has No Points!');\n      return;\n    }\n    if (model.indexedLookup) {\n      publicAPI.mapDataIndexed(input, output, outFormat, inputOffset);\n    } else {\n      publicAPI.mapData(input, output, outFormat, inputOffset);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.mapData = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkWarningMacro('Transfer Function Has No Points!');\n      return;\n    }\n    const alpha = Math.floor(publicAPI.getAlpha() * 255.0 + 0.5);\n    const length = input.getNumberOfTuples();\n    const inIncr = input.getNumberOfComponents();\n    const outputV = output.getData();\n    const inputV = input.getData();\n    const rgb = [];\n    if (outFormat === ScalarMappingTarget.RGBA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 4] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 4 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 4 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n        outputV[i * 4 + 3] = alpha;\n      }\n    }\n    if (outFormat === ScalarMappingTarget.RGB) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 3] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 3 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 3 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE_ALPHA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 2] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n        outputV[i * 2 + 1] = alpha;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.applyColorMap = colorMap => {\n    const oldColorSpace = JSON.stringify(model.colorSpace);\n    if (colorMap.ColorSpace) {\n      model.colorSpace = ColorSpace[colorMap.ColorSpace.toUpperCase()];\n      if (model.colorSpace === undefined) {\n        vtkErrorMacro(`ColorSpace ${colorMap.ColorSpace} not supported, using RGB instead`);\n        model.colorSpace = ColorSpace.RGB;\n      }\n    }\n    let isModified = oldColorSpace !== JSON.stringify(model.colorSpace);\n    const oldNanColor = isModified || JSON.stringify(model.nanColor);\n    if (colorMap.NanColor) {\n      model.nanColor = [].concat(colorMap.NanColor);\n      while (model.nanColor.length < 4) {\n        model.nanColor.push(1.0);\n      }\n    }\n    isModified = isModified || oldNanColor !== JSON.stringify(model.nanColor);\n    const oldNodes = isModified || JSON.stringify(model.nodes);\n    if (colorMap.RGBPoints) {\n      const size = colorMap.RGBPoints.length;\n      model.nodes = [];\n      const midpoint = 0.5;\n      const sharpness = 0.0;\n      for (let i = 0; i < size; i += 4) {\n        model.nodes.push({\n          x: colorMap.RGBPoints[i],\n          r: colorMap.RGBPoints[i + 1],\n          g: colorMap.RGBPoints[i + 2],\n          b: colorMap.RGBPoints[i + 3],\n          midpoint,\n          sharpness\n        });\n      }\n    }\n    const modifiedInvoked = publicAPI.sortAndUpdateRange();\n    const callModified = !modifiedInvoked && (isModified || oldNodes !== JSON.stringify(model.nodes));\n    if (callModified) publicAPI.modified();\n    return modifiedInvoked || callModified;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clamping: true,\n  colorSpace: ColorSpace.RGB,\n  hSVWrap: true,\n  scale: Scale.LINEAR,\n  nanColor: null,\n  belowRangeColor: null,\n  aboveRangeColor: null,\n  useAboveRangeColor: false,\n  useBelowRangeColor: false,\n  allowDuplicateScalars: false,\n  table: null,\n  tableSize: 0,\n  buildTime: null,\n  nodes: null,\n  discretize: false,\n  numberOfValues: 256\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkScalarsToColors.extend(publicAPI, model, initialValues);\n\n  // Internal objects initialization\n  model.table = [];\n  model.nodes = [];\n  model.nanColor = [0.5, 0.0, 0.0, 1.0];\n  model.belowRangeColor = [0.0, 0.0, 0.0, 1.0];\n  model.aboveRangeColor = [1.0, 1.0, 1.0, 1.0];\n  model.buildTime = {};\n  macro.obj(model.buildTime);\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['buildTime', 'mappingRange']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['useAboveRangeColor', 'useBelowRangeColor', 'discretize', 'numberOfValues', {\n    type: 'enum',\n    name: 'colorSpace',\n    enum: ColorSpace\n  }, {\n    type: 'enum',\n    name: 'scale',\n    enum: Scale\n  }]);\n  macro.setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkColorTransferFunction(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkColorTransferFunction');\n\n// ----------------------------------------------------------------------------\n\nvar vtkColorTransferFunction$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkColorTransferFunction$1 as default, extend, newInstance };\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n"],"names":["enabledElement","invalidated","image","canvas","start","stats","lastGetPixelDataTime","lastStoredPixelDataToCanvasImageDataTime","lastPutImageDataTime","lastRenderTime","lastLutGenerateTime","render","viewport","colormap","color","renderTimeInMs","invalid","needsRedraw","scale","transform","displayedArea","translate","width","height","angle","rotation","rotate","Math","PI","widthScale","heightScale","brhc","x","tlhc","y","presentationSizeMode","rowPixelSpacing","columnPixelSpacing","verticalScale","horizontalScale","min","translation","undefined","hflip","vflip","modality","Error","scaleFactor","voi","isPreScaled","windowWidth","windowCenter","Array","isArray","invert","pixelReplication","modalityLUT","voiLUT","columns","rows","GenerateImageType","DEFAULT_SETTINGS","Symbol","RUNTIME_SETTINGS","OBJECT_SETTINGS_MAP","DICTIONARY","Settings","constructor","base","dictionary","Object","create","seal","defineProperty","this","value","set","key","get","unset","name","endsWith","deleteCount","namespace","slice","deleteAll","length","prototype","hasOwnProperty","call","startsWith","forEach","callback","iterate","extend","import","root","isPlainObject","keys","dump","context","deepSet","assert","subject","getRuntimeSettings","getDefaultSettings","subfield","defaultSettings","settingObj","setting","split","runtimeSettings","getObjectSettings","from","settings","objectSettingsMap","WeakMap","extendRuntimeSettings","references","last","current","previous","indexOf","isValidKey","prefix","record","failCount","has","add","field","delete","setAll","WeakSet","getPrototypeOf","separator","subKey","subContext","subContextValue","imageLoaders","unknownImageLoader","loadImageFromImageLoader","imageId","options","cachedImageLoadObject","getImageLoadObject","handleImageLoadPromise","promise","scheme","loader","imageLoadObject","imagePromise","Promise","resolve","then","voxelManager","numberOfComponents","createImageVoxelManager","scalarData","getPixelData","getScalarData","imageFrame","pixelData","ensureVoxelManager","IMAGE_LOADED","catch","error","errorDetails","IMAGE_LOAD_FAILED","loadImage","priority","requestType","loadAndCacheImage","putImageLoadObject","loadAndCacheImages","imageIds","map","createAndCacheDerivedImage","referencedImageId","skipCreateBuffer","onCacheAdd","voxelRepresentation","imagePlaneModule","TypedArrayConstructor","targetBuffer","type","imageScalarData","derivedImageId","referencedImagePlaneMetadata","metadata","referencedImageGeneralSeriesMetadata","instanceNumber","imagePixelModule","bitsAllocated","bitsStored","highBit","samplesPerPixel","pixelRepresentation","localImage","createAndCacheLocalImage","dimensions","spacing","origin","imagePositionPatient","direction","imageOrientationPatient","frameOfReferenceUID","putImageSync","createAndCacheDerivedImages","referencedImageIds","derivedImageIds","index","newOptions","getDerivedImageId","push","rowCosines","columnCosines","pixelSpacing","scalarDataToUse","Uint8Array","Float32Array","Uint16Array","Int16Array","photometricInterpretation","id","RLE","createRLEImageVoxelManager","minPixelValue","maxPixelValue","i","intercept","dataType","slope","getCanvas","rgba","FrameOfReferenceUID","sizeInBytes","byteLength","cancelLoadImage","filterRequests","additionalDetails","cancelFn","cancelLoadImages","cancelLoadAll","requestPool","getRequestPool","requests","requestDetails","pop","volumeId","loadObject","getVolumeLoadObject","cancel","clearRequestStack","registerImageLoader","imageLoader","registerUnknownImageLoader","oldImageLoader","unregisterAllImageLoaders","createAndCacheDerivedLabelmapImages","createAndCacheDerivedLabelmapImage","FrameRange","frameRangeExtractor","imageIdToFrames","match","range","it","Number","imageIdToFrameEnd","imageIdToFrameStart","framesToString","String","framesToImageId","newRangeString","replace","PointsManager","configuration","_dimensions","_length","_byteSize","growSize","initialSize","itemLength","array","ArrayBuffer","data","func","getPoint","dimensionLength","offset","subarray","getPointArray","grow","additionalSize","newSize","newArray","newData","reverse","midLength","floor","indexStart","indexEnd","dimension","valueStart","getTypedArray","point","f","mapData","points","p","toXYZ","xyz","z","fromXYZ","create3","subselect","count","selected","max","newPoints","create2","ProgressiveIterator","as","iterator","v","e","reject","reason","done","nextValue","waiting","rejectReason","getRecent","asyncIterator","errorCallback","console","warn","generate","processFunction","bind","nextPromise","donePromise","getNextPromise","getDonePromise","ADJACENT_ALL","ADJACENT_SINGLE_PLANE","ADJACENT_IN","ADJACENT_OUT","RLEVoxelMap","copyMap","destination","source","row","structuredClone","depth","Map","jMultiple","kMultiple","numComps","pixelDataConstructor","updateScalarData","fill","rle","end","j","getRLE","defaultValue","getRun","k","runIndex","rleIndex","findIndex","rle1","rle0","oldValue","rleInsert","isAfter","insertIndex","rlePrev","rleNext","splice","nextnext","ArrayType","Uint8ClampedArray","frameSize","toIJK","toIndex","newRle","iEnd","rowModified","baseIndex","rowToUse","forEachRow","clear","rowOffset","comp","floodFill","stack","replaceValue","flood","sourceValue","sum","planar","diagonals","singlePlane","childOptions","top","adjacents","findAdjacents","filter","adjacent","fillFrom","getter","boundsIJK","item","adjacentsDelta","leftRle","rightRle","delta","delta1","delta2","testJ","testK","testRle","newAdjacentDelta","isImageActor","actorEntry","actorIsA","actorType","actorToCheck","actor","isA","applyPreset","preset","colorTransferArray","colorTransfer","parseFloat","shiftRange","Infinity","center","getShiftRange","cfun","normColorTransferValuePoints","r","g","b","rescaled","removeAllPoints","addRGBPoint","applyPointsToRGBFunction","getProperty","setRGBTransferFunction","scalarOpacityArray","scalarOpacity","ofun","normPoints","opacity","pwf","addPoint","applyPointsToPiecewiseFunction","property","setScalarOpacity","gradientMinValue","gradientMinOpacity","gradientMaxValue","gradientMaxOpacity","gradientOpacity","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","interpolation","setInterpolationTypeToFastLinear","setShade","shade","ambient","diffuse","specular","specularPower","setAmbient","setDiffuse","setSpecular","setSpecularPower","renderingEngineAndViewportIds","renderingEnginesArray","renderingEngine","viewports","viewportIds","getRenderingEngineAndViewportsContainingVolume","hasBeenDestroyed","renderViewports","getImagePlaneModule","newImagePlaneModule","MetadataModules","IMAGE_PLANE","buildMetadata","voiLUTFunction","imageIdScalingFactor","calibration","CALIBRATION","voiLUTFunctionEnum","values","VOILUTFunctionType","includes","LINEAR","getValidVOILUTFunction","scalingFactor","calculateSpacingBetweenImageIds","referenceImagePositionPatient","rowCosineVec","colCosineVec","scanAxisNormal","refIppVec","getDistance","positionVector","ippVec","prefetchedImageIds","metadataForMiddleImage","middleIppVec","distanceBetweenFirstAndMiddleImages","abs","distanceImagePairs","distance","sort","a","numImages","sliceThickness","spacingBetweenSlices","strictZSpacingForVolumeViewport","rendering","isNaN","debug","clamp","_colormaps","registerColormap","Name","getColormap","getColormapNames","findMatchingColormap","rgbPoints","colormapsVTK","rgbPresetNames","presetName","getPresetByName","colormapsCS3D","colormapName","matchedColormap","concat","find","RGBPoints","presetRGBPoints","opacityPoints","getScalarOpacity","getDataPointer","setColorMapTransferFunctionForVolumeActor","volumeInfo","volumeActor","threshold","colorRange","getMapper","setSampleDistance","presetToUse","applyColorMap","setMappingRange","updateOpacityWithThreshold","updateOpacity","newOpacity","getThresholdValue","updateThreshold","newThreshold","getMaxOpacity","meta","getInputData","getRange","thresholdValue","opacityFunction","dataArray","y1","x2","y2","maxOpacity","createLinearRGBTransferFunction","voiRange","lower","upper","createSigmoidRGBTransferFunction","approximationNodes","table","_","flatMap","buildFunctionFromArray","decimate","list","interleave","interleaveIndices","deepClone","obj","clonedObj","fnv1aHash","str","hash","charCodeAt","toString","log","coreLog","getLogger","getClosestImageId","imageVolume","worldPos","viewPlaneNormal","ignoreSpacing","kVector","dotProduct","EPSILON","halfSpacingInNormalDirection","closestImageId","minDistance","dir","getImageDataMetadata","xSpacing","ySpacing","xVoxels","yVoxels","zSpacing","_getNumCompsFromPhotometricInterpretation","numVoxels","camera","getCamera","spacingInNormalDirection","focalPoint","getActors","referencedId","uid","sliceRange","numberOfSlices","round","imageIndex","getScalingParameters","modalityLutModule","generalSeriesModule","scalingParameters","rescaleSlope","rescaleIntercept","scalingModules","suvbw","suvbsa","suvlbm","doseGridScaling","DoseGridScaling","doseSummation","DoseSummation","doseType","DoseType","doseUnit","DoseUnit","SMALL_EPSILON","isOne","isUnit","off","isOrthonormal","getSliceRange","imageData","corners","getDirection","dx","dy","dz","getDimensions","indexToWorld","buildFromDegree","identity","rotateFromDirections","pt","apply","transformedFocalPoint","currentSlice","minX","maxX","getSpacingInNormalDirection","iVector","jVector","dotProducts","projectedSpacing","EPSILON_PART","isPrimaryVolume","volume","getVolumeLoaderSchemes","starts","substring","getTargetVolumeAndSpacingInNormalDir","targetId","useSlabThickness","volumeActors","actorUID","imageVolumes","va","getVolume","iv","targetVolumeId","imageVolumeIndex","getSpacingInNormal","smallest","hasPrimaryVolume","slabThickness","getProperties","renderingEngines","targetViewports","filteredViewports","getVolumeViewports","vp","hasVolumeId","getVoiFromSigmoidRGBTransferFunction","cfunRange","getTable","cfunDomain","logy1","x1","logy2","ww","wc","getVolumeActorCorners","bounds","extentToBounds","getExtent","getVolumeId","getActor","numScrollSteps","floatingStepNumber","currentStepIndex","sliceRangeInfo","hasFloatScalingParameters","some","isInteger","hasNaNValues","input","imageIdToURI","colonIndex","retrieveConfigurationState","IMAGE_RETRIEVE_CONFIGURATION","imageRetrieveMetadataProvider","payload","clone","restore","state","queries","query","addProvider","EventListenerPhases","TargetEventListeners","target","_eventListeners","_children","_target","isEmpty","size","addEventListener","dotIndex","namespaceToken","childElementEventListener","_addEventListener","removeEventListener","_removeEventListener","reset","entries","child","_unregisterAllEvents","listenersMap","listenerPhase","capture","Capture","Bubble","registeredPhases","None","callbackItem","newListenerPhase","_unregisterAllListeners","listener","eventPhases","currentPhase","useCapture","MultiTargetEventListenerManager","_targetsEventListeners","eventListeners","targetEventListeners","scaleRGBTransferFunction","rgbTransferFunction","getSize","nodeValue1","getNodeValue","setNodeValue","getMinMax","storedPixelData","storedPixel","numPixels","LAST_RUNTIME_ID","GLOBAL_CONTEXT","DEFAULT_MAX","DEFAULT_SEPARATOR","getRuntimeId","symbol","idComponents","carry","n","getNextRuntimeId","join","imageURI","isOpposite","v1","v2","tolerance","indexWithinDimensions","targetViewport","renderingEngineId","getRenderingEngine","sameVolumesViewports","targetActors","vpActors","every","vpActor","preScale","scaled","renderToCanvasGPU","imageOrVolume","viewportOptions","displayArea","imageArea","HTMLCanvasElement","isVolume","viewportId","element","document","createElement","devicePixelRatio","window","originalWidth","originalHeight","style","visibility","position","body","appendChild","uniqueId","setAttribute","temporaryCanvas","getOrCreateCanvas","TiledRenderingEngine","getViewport","viewportInput","ViewportType","ORTHOGRAPHIC","STACK","defaultOptions","suppressEvents","enableElement","elementRendered","viewReference","onImageRendered","eventDetail","useViewRef","setViewReference","getContext","drawImage","canvasToWorld","topRight","bottomLeft","rightVector","downVector","Events","IMAGE_RENDERED","setTimeout","disableElement","querySelectorAll","remove","thicknessMm","setVolumes","renderImageObject","resetCamera","setProperties","renderToCanvasCPU","_renderingEngineId","_viewportOptions","getDefaultViewport","renderingTools","calculateTransform","drawImageSync","loadImageToCanvas","RequestType","Thumbnail","useCPURendering","thumbnail","imageAspect","baseViewportOptions","renderFn","successCallback","metaData","useRGBA","cache","imageLoadPoolManager","addRequest","imageIdIndex","asArray","HistoryMemo","label","redoAvailable","undoAvailable","ring","isRecordingGrouped","_size","undo","items","subitem","restoreMemo","dispatchHistoryEvent","isUndo","undoIf","condition","eventTarget","dispatchEvent","CustomEvent","detail","operationType","memo","redo","newPosition","initializeGroupItem","startGroupRecording","rollbackUnusedGroupItem","endGroupRecording","lastItem","pushGrouped","lastMemo","createMemo","DefaultHistoryMemo","worldCoords","newOrigin","sub","imageToWorldCoords","imageCoords","imageCoordsInWorld","getViewportsWithImageURI","getViewports","hasImageURI","getClosestStackImageIndexForPoint","minimalDistance","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","planeMetadata","targetImagePlane","rowVec","colVec","planeNormal","getPlaneMetadata","plane","planeEquation","planeDistanceToPoint","closestStack","higherImageIds","lowerImageIds","calculateMinimalDistanceForStackViewport","getCurrentVolumeViewportSlice","canvasWidth","canvasHeight","sliceToIndexMatrix","indexToSliceMatrix","getSliceViewInfo","ijkOriginPoint","transformCanvasToIJK","ijkRowPoint","ijkColPoint","ijkRowVec","ijkColVec","ijkSliceVec","maxIJKRowVec","maxIJKColVec","getImageData","sliceViewInfo","getSliceData","spatialRegistrationMetadataProvider","viewportId1","viewportId2","entryId","entryIdReverse","viewport1","viewport2","imageId1","getSliceIndex","imageId2","imagePlaneModule1","imagePlaneModule2","iop2","imagePositionPatient1","imagePositionPatient2","mat","getViewportImageCornersInWorld","ratio","topRightCanvas","bottomRightCanvas","bottomLeftCanvas","topLeftWorld","topRightWorld","bottomRightWorld","bottomLeftWorld","topLeftImage","worldToIndex","topRightImage","bottomRightImage","bottomLeftImage","topLeftImageWorld","_isInBounds","topRightImageWorld","bottomRightImageWorld","bottomLeftImageWorld","_getStackViewportImageCorners","imageCoord","getEnabledElement","StackViewport","getCornerstoneImage","isValidVolume","imageId0","seriesInstanceUID","usingDefaultValues","baseMetadata","validVolume","isEqual","videoUIDs","Set","isVideoTransferSyntax","uidOrUids","async","convertStackToVolumeViewport","uuidv4","getUnknownVolumeLoaderSchema","prevViewPresentation","getViewPresentation","prevViewReference","getViewReference","background","orientation","createAndCacheVolume","load","volumeViewport","volumeViewportNewVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","setViewPresentation","convertVolumeToStackViewport","ImageVolume","prevView","stackViewport","setStack","roundToPrecision","roundNumber","precision","absValue","fixedPrecision","toFixed","convertToGrayscale","isRGBA","isRGB","newScalarData","destOffset","increment","getRandomSampleFromArray","clonedArray","shuffleArray","random","componentToHex","c","hex","rgbToHex","hexToRgb","result","exec","parseInt","deepEqual","obj1","obj2","JSON","stringify","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","frame_value_set","frames","frame_value","setEquals","getTagValue","tag","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","reduce","rv","frame_count","getIPPGroups","imageIdGroups","splittingTag","tags","fncList2","timePoints","isDynamicVolume","scaleArray","arrayLength","clip","val","low","high","scrollSlabs","getVolumeViewportScrollInfo","newFocalPoint","snapFocalPointToSlice","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","getCurrentImageId","triggerEvent","VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS","VOLUME_VIEWPORT_SCROLL","scrollVolume","eventData","STACK_SCROLL_OUT_OF_BOUNDS","scroll","debounceLoading","loop","jumpToSlice","currentImageIndex","getTargetImageIdIndex","getNumberOfSlices","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","createSubVolume","referencedVolumeId","referencedVolume","refVolumeDim","minY","maxY","minZ","maxZ","ijkTopLeft","boundingBoxOriginWorld","transformIndexToWorld","subVolumeOptions","subVolume","createLocalVolume","subVolumeData","getCompleteScalarDataArray","subVolumeSliceSize","refVolumeSliceSize","refVolumeData","rowStartWorld","refVolumeRowStartIJK","transformWorldToIndex","refVolumeRowStartOffset","rowData","subVolumeLineStartOffset","setCompleteScalarDataArray","getVolumeDirectionVectors","viewUp","ijkOrigin","worldVecColDir","worldVecSliceDir","worldVecRowDir","ijkVecColDir","ijkVecSliceDir","ijkVecRowDir","calculateNeighborhoodStats","centerIjk","radius","numSlices","numPixelsPerSlice","sumSq","cx","cy","cz","centerIndex","mean","stdDev","variance","sqrt","projectionRadiographSOPClassUIDs","getPixelSpacingInformation","instance","PixelSpacing","SOPClassUID","SequenceOfUltrasoundRegions","isArrayOfSequences","PhysicalDeltaX","PhysicalDeltaY","calculateUSPixelSpacing","ImagerPixelSpacing","EstimatedRadiographicMagnificationFactor","PixelSpacingCalibrationType","PixelSpacingCalibrationDescription","isProjection","CalibrationTypes","UNKNOWN","ERMF","PROJECTION","CALIBRATED","calculateRadiographicPixelSpacing","NOT_APPLICABLE","getViewportModality","Modality","_getViewportModality","invertRgbTransferFunction","areNumbersEqualWithTolerance","num1","num2","isNumberType","isNumberArrayLike","arr1","arr2","areArraysEqual","negative","isEqualNegative","isEqualAbs","isNumber","isFinite","loglevel","getRootLogger","logger","names","cs3dLog","toolsLog","loaderLog","aiLog","examplesLog","dicomConsistencyLog","imageConsistencyLog","makeVolumeMetadata","voiLut","voiLutModule","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","ImageOrientationPatient","Columns","Rows","VOILUTFunction","SeriesInstanceUID","linePlaneIntersection","p0","p1","x0","y0","z0","z1","A","B","C","D","t","normal","normalized","threePlaneIntersection","firstPlane","secondPlane","thirdPlane","A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","C3","D3","m0","m1","m2","m3","signed","numerator","sign","isPointOnPlane","deltaFrames","posDiffFromFocalPoint","steps","frameIndex","newSlicePosFromMin","sortImageIdsAndGetSpacing","usingWadoUri","sortedImageIds","getTransferFunctionNodes","transferFunction","setTransferFunctionNodes","nodes","node","canvasPoint","vtkImageData","worldPoint","voxelPos","transformWorldToIndexContinuous","updateVTKImageDataWithCornerstoneImage","sourceImageData","getPointData","getScalars","getData","newPixelData","modified","toWindowLevel","toLowHighRange","LINEAR_EXACT","SAMPLED_SIGMOID","Active","Passive","Enabled","ToolModes","CAMERA_MODIFIED","Enums","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","calibratedPixelSpacingMetadataProvider","utilities","ViewportStatus","sumOverDimensionGroups","dimensionGroups","getScalarDataLength","resultArray","dimensionGroupNumber","getDimensionGroupScalarData","SUM","AVERAGE","SUBTRACT","idx","idx3","getPolyDataPointIndexes","polyData","linesData","getLines","lineSegments","segmentSize","segment","contours","findStartingPoint","startPoint","contour","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","getPoints","contourIndexes","ColorbarRangeTextPosition","Right","Widget","extractWindowLevelRegionToolData","VolumeViewport","extractImageDataVolume","extractImageDataStack","setAnnotationLabel","annotation","updatedLabel","triggerAnnotationModified","ChangeTypes","LabelChange","calculateFanShapeCorners","imageBuffer","hull","roughContour","rough","slack","next","walk","to","i2","i3","P2","P3","pathA","pathB","globalYmin","upperPath","topY","arcPts","P1","best","P4","pickPoints","refined","edgeBuf","opts","maxDist","directions","snapQuadrant","xmin","xmax","ymin","ymax","xi","yi","xAlign","yAlign","refineCornersDirectional","step","angleRad","atan2","getImage","calculateFanGeometry","buffer","totalPixels","channelCount","mask","isForeground","labels","currentLabel","regionSizes","px","py","pixelCount","onFlood","largestLabel","isBorder","nx","ny","outer","dirs","prev","dx0","dy0","startDir","d","nextPt","bdx","bdy","segmentLargestUSOutlineFromBuffer","simplified","generateConvexHullFromContour","fanGeometry","params","centerResult","intersectLine","startAngle","endAngle","tempAngle","d1","hypot","d4","d2","d3","innerRadius","outerRadius","deriveFanGeometry","props","_controlPoints","_invalidated","_resolution","resolution","_fixedResolution","fixedResolution","_closed","closed","controlPoints","numControlPoints","aabb","_update","_aabb","hasTangentPoints","addControlPoint","addControlPoints","addControlPointAtU","u","lineSegment","_getLineSegmentAt","endPoint","curveSegmentIndex","curveSegment","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","setControlPoints","updateControlPoint","newControlPoint","getControlPoints","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","len","squaredDist","getClosestControlPointWithinDistance","closestControlPoint","getClosestPoint","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","math","distanceToPointSquaredInfo","uValue","previousLineSegmentsLength","distanceToPoint","getClosestPointOnControlPointLines","linePoints","getPolylinePoints","_convertCurveSegmentsToPolyline","getPreviewPolylinePoints","controlPointPreview","closeDistance","closeSpline","previewCurveSegments","getPreviewCurveSegments","isPointNearCurve","curveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","distanceToPointSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","p2","isVerticalLine","xIntersection","getSplineCurves","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","CubicSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","getTransformMatrix","_getCurveSegment","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","mirror","_getLineSegments","numLineSegments","inc","maxU","curveSegmentLength","lineSegAABB","lineSegLength","TRANSFORM_MATRIX","BSpline","CardinalSpline","super","_scale","_fixedScale","fixedScale","s","s2","CatmullRomSpline","LinearSpline","PanTool","toolProps","defaultToolProps","supportedInteractionTypes","touchDragCallback","evt","_dragCallback","mouseDragCallback","deltaPoints","deltaPointsWorld","world","updatedPosition","updatedFocalPoint","toolName","TrackballRotateTool","rotateIncrementDegrees","rotateSampleDistanceFactor","_resizeObservers","_hasResolutionChanged","preMouseDownCallback","mapper","getDefaultActor","originalSampleDistance","getSampleDistance","cleanUp","once","_getViewportsInfo","getToolGroup","toolGroupId","viewportsInfo","onSetToolActive","subscribeToElementResize","getEnabledElementByIds","resizeObserver","ResizeObserver","viewPresentation","observe","_viewportAddedListener","TOOLGROUP_VIEWPORT_ADDED","onSetToolDisabled","disconnect","rotateCamera","centerWorld","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPoints","lastPoints","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","dot","angleX","acos","upVec","atV","rightV","forwardV","angleY","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","frame","_getMinMax","newRange","viewportsContainingVolumeUID","properties","scaling","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","voiLutFunction","imageDynamicRange","calculatedDynamicRange","getMiddleSliceData","acc","pixel","metadataDynamicRange","_getImageDynamicRangeFromViewport","imageDataRange","voxel","WindowLevelRegionTool","minWindowWidth","addNewAnnotation","isDrawing","getReferencedImageId","getFrameOfReferenceUID","highlighted","getToolName","handles","cachedStats","viewportIdsToRender","getViewportIdsWithToolToRender","editData","_activateDraw","hideElementCursor","preventDefault","triggerAnnotationRenderForViewportIds","_endCallback","_deactivateDraw","resetElementCursor","annotationUID","triggerAnnotationCompleted","applyWindowLevelRegion","worldToCanvas","topLeftCanvas","isInteractingWithTool","MOUSE_UP","MOUSE_DRAG","MOUSE_MOVE","MOUSE_CLICK","TOUCH_END","TOUCH_DRAG","TOUCH_TAP","renderAnnotation","svgDrawingHelper","renderStatus","annotations","filterInteractableAnnotationsForElement","styleSpecifier","canvasCoordinates","lineWidth","lineDash","getAnnotationStyle","dataId","rectangleUID","drawRect","startCanvas","endCanvas","left","pixelLuminanceData","luminance","spIndex","column","red","green","blue","minMaxMean","pixelLuminance","globalMin","globalMax","spv","isPointNearTool","toolSelectedCallback","handleSelectedCallback","_activateModify","_deactivateModify","StackScrollTool","debounceIfNotLoaded","deltaY","mouseWheelCallback","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","wheel","BaseVolumeViewport","offsetHeight","PlanarRotateTool","setAngle","startPoints","currentPointWorld","startPointWorld","centerCanvas","angleBetweenLines","cross","rotAngle","rotMat","rotatedViewUp","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","deltaDistance","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","imageWidth","imageHeight","canvasAspect","scaledImageWidth","scaledImageHeight","minParallelScaleRequired","minScaleInWorld","maxScaleInWorld","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","_zoom","currentPointsList","parallelProjection","_panCallback","eventDetails","eventName","MOUSE_WHEEL","page","client","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","getToolGroupForViewport","jumpToWorld","RENDERING_DEFAULTS","CONSTANTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","shadow","viewportIndicators","viewportIndicatorsConfig","autoPan","enabled","panSize","handleRadius","enableHDPIHandles","referenceLinesCenterGapRadius","referenceLinesCenterGapRatio","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","mobile","toolCenter","initializeViewport","_getAnnotations","removeAnnotation","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","addAnnotation","resetCrosshairs","viewportInfo","resetPan","resetZoom","resetToCenter","resetRotation","resetSlabThickness","_computeToolCenter","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","setToolCenter","jumpWorld","_jump","filteredAnnotations","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","canvasCoords","proximity","_pointNearTool","interactionType","onCameraModified","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","getViewportIds","_autoPanViewportIfNecessary","onResetCamera","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","isAnnotationLocked","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","viewportUIDSpecificCrosshairs","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","mobileConfig","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","liangBarksyClip","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","lineUID","drawLine","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandles","referenceColorCoordinates","xOffset","yOffset","circleRadius","circleUID","drawCircle","getAnnotations","toolGroupAnnotations","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewportsAnnotationsWithSameCameraDirection","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","viewportsAnnotationsToUpdate","sameScene","_applyDeltaShiftToSelectedViewportCameras","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","otherViewportsIds","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","getToolInstance","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","onSetToolPassive","onSetToolEnabled","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","_applyDeltaShiftToViewportCamera","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","viewportProperties","originalViewportRotation","canvasPos","magnifyToolElement","querySelector","magnifyElement","classList","display","magnifyViewport","pow","_dragEndCallback","viewportElement","removeChild","getTargetId","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","AdvancedMagnifyTool","Actions","magnifyingGlass","zoomFactor","zoomFactorList","padding","actions","showZoomFactorsList","method","bindings","mouseButton","MouseBindings","Secondary","modifierKey","KeyboardBindings","Shift","config","canvasHandlePoints","_getCanvasHandlePoints","magnifyViewportId","sourceViewportId","isCanvasAnnotation","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","dispose","getAllAnnotations","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","handle","handleIndex","newAnnotation","_dragDrawCallback","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","getStyle","activeHandleCanvasCoords","isAnnotationVisible","handleGroupUID","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","assign","focus","onChangeCallback","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","sourceViewport","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","getEnabledElementByViewportId","stackActorReInitialized","_reset","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","ANNOTATION_REMOVED","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","visible","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","debounce","_resizeViewport","_syncViewports","parentNode","magnifyToolGroup","mode","toolBindingsOptions","setToolActive","setToolPassive","setToolEnabled","Disabled","setToolDisabled","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","toolInstance","addViewport","addSegmentationRepresentations","segmentationId","SegmentationRepresentations","Labelmap","_cloneStack","_cloneVolumes","volumeInputArray","_cloneViewport","sourceViewportOptions","toolGroups","_cancelMouseEventCallback","closest","canvasCurrent","magnifyRadius","dist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","TOOL_MODE_CHANGED","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","ReferenceLines","AnnotationDisplayTool","enforceSameFrameOfReference","showFullDimension","_init","getRenderingEngines","filterViewportsWithToolEnabled","sourceViewportCanvasCornersInWorld","onSetToolConfiguration","topLeft","bottomRight","sourceViewPlaneNormal","isParallel","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","vec2","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","OverlayGridTool","sourceImageIds","pointSets","calculateImageIdPointSets","viewportData","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","actorEntries","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","canvasPoints","fillColor","fillOpacity","closePath","polyLineUID","drawPath","actorWorldPointsMap","getOutputData","colorArray","colorComponentToString","component","componentString","colorToString","getColor","decimals","pointToString","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","right","centerSpace","lineLength","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","renderViewport","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","enabledElements","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","bottom","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","fontFamily","fontSize","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","updateCursorSize","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","HandlesUpdated","dragCallback","polyline","sculpt","registerShapes","CircleSculptCursor","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mousePoint","mouseCanvasPoint","deltaWorld","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertHandleRadially","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","toolIndex","isLocked","isVisible","distanceFromTool","distancePointToContour","AnnotationStyleStates","Default","Highlighted","renderShape","DIRECTIONS","VolumeRotateTool","ax","ay","az","LabelTool","getTextCallback","changeTextCallback","svgLayer","textGroup","textGroupElement","bbox","getBBox","getAttribute","translateX","translateY","matches","text","initialWorldPos","anchorWorldPos","doneEditMemo","getLinkedTextBoxStyle","textBoxUID","hydrate","autoGenerated","_doneChangingTextCallback","updatedText","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","LengthTool","getTextLines","defaultGetTextLines","movingTextBox","canvasPoint1","canvasPoint2","worldPosDelta","unit","_throttledCalculateCachedStats","_calculateCachedStats","textLines","canvasTextBoxCoords","getTextBoxCoordsCanvas","textBoxPosition","boundingBox","drawLinkedTextBox","throttle","trailing","hydrateBase","serializableOptions","_calculateLength","pos1","pos2","worldPos1","worldPos2","targetIds","StatsUpdated","cachedVolumeStats","HeightTool","heightUID","drawHeight","_calculateHeight","outside","ProbeTool","probeDefaults","textCanvasOffset","mergeDefaultProps","createAnnotationForViewport","eventDispatchDetail","getStackViewports","referencedImageURI","currentImageURI","textUID","changeType","pixelUnitsOptions","isViewportPreScaled","isSuvScaled","ijk","modalityUnit","getAtIJKPoint","calibratedResults","hasEnhancedRegionValues","units","getPixelValueUnits","DragProbeTool","postMouseDownCallback","postTouchStartCallback","EllipticalROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","initialRotation","getRotation","w","h","minorEllipse","xRadius","yRadius","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","dYCanvas","newHalfCanvasWidth","canvasRight","dXCanvas","newHalfCanvasHeight","canvasCorners","getCanvasEllipseCorners","areaUnit","area","ellipseUID","centerPoint","_getCanvasEllipseCenter","pos1Index","post2Index","ellipseObj","zRadius","worldWidth","worldHeight","getWorldWidthAndHeightFromTwoPoints","isEmptyArea","pointsInShape","statsCallback","isInObject","pointLPS","pointInEllipse","fast","returnPoints","getStatistics","statsArray","ellipse","rotLocation","ellipseCanvasPoints","areaLine","CircleROITool","canvasHandles","radiusCanvas","newRadiusCanvas","getCanvasCircleCorners","radiusUnit","perimeter","wasInvalidated","pos2Index","aspect","radiusLine","ETDRSGridTool","degrees","diameters","canvasEnd","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","cos","sin","measurement","p1Canvas","p2Canvas","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","splineToolNames","SplineROITool","ContourSegmentationBaseTool","SplineTypes","simplifiedSpline","contourHoleAdditionModifierKey","epsilon","spline","Cardinal","Class","CatmullRom","Linear","drawPreviewEnabled","enableTwoPointPreview","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","fireChangeOnUpdate","contourHoleProcessingEnabled","Completed","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","_mouseMoveCallback","lastCanvasPoint","_mouseDownCallback","doubleClick","MOUSE_DOUBLE_CLICK","closeContour","addNewPoint","moveAnnotation","eventType","ANNOTATION_COMPLETED","ANNOTATION_MODIFIED","triggerChangeEvent","KEY_DOWN","MOUSE_DOWN","_renderStats","textboxStyle","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","canvasMaxX","canvasMaxY","canvasMinX","canvasMinY","getAABB","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","getArea","annotationCompletedBinded","annotationCompleted","sourceAnnotation","isContourSegmentationTool","convertContourSegmentationAnnotation","initializeListeners","removeListeners","getMouseModifier","event","createAnnotation","cancelAnnotation","renderAnnotationInstance","renderContext","annotationStyle","locked","annotationLocked","childAnnotations","getChildAnnotations","childAnnotationUIDs","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","updateContourPolyline","targetWindingDirection","Clockwise","updateWindingDirection","previewPolylinePoints","drawPolyline","controlPointsConnectors","textbox","createInterpolatedSplineControl","isSplineAnnotation","createSplineObjectFromType","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","splineInstance","SplineClass","SplineContourSegmentationTool","annotationCutMergeCompletedBinded","annotationCutMergeCompleted","ANNOTATION_CUT_MERGE_PROCESS_COMPLETED","LivewireContourTool","snapHandleNearby","nearestEdge","showInterpolationPolyline","cancelInProgress","proximitySquared","clearAnnotation","clearEditData","triggerContourAnnotationCompleted","worldToSlice","sliceToWorld","worldPosOriginal","currentPath","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","scissors","findMinNearby","pathPoints","findPathToPoint","addPoints","prependPath","confirmedPath","lastPoint","getLastPoint","startSearch","updateAnnotation","imgWidth","imgHeight","slicePoint","editHandle","setupBaseEditData","nextPos","viewportImageData","sliceImageData","ijkPoint","startPos","LivewireScissors","createInstanceFromRawPixelData","scissorsNext","currentPathNext","confirmedPathNext","handlePoints","numHandles","previousHandle","nextHandle","findHandlePolylineIndex","slicePos","pathPointsLeft","pathPointsRight","appendPath","contourSegmentationAnnotation","livewirePath","pointArray","imagePoints","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","repeatInterpolation","originalPoints","handleSmoothing","hIndex","testPoint","minPoint","acceptedPath","path","InterpolationUpdated","rendered","polylineCanvasPoints","ArrowAnnotateTool","arrowFirst","arrowHeadStyle","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","stopImmediatePropagation","markerSize","arrowUID","drawArrow","viaMarker","AngleTool","showAngleArc","arcOffset","angleStartedNotYetCompleted","line1","canvasPoint3","line2","angleArcLineDash","anglePoints","temp","segments","worldPos3","fromCharCode","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","TOUCH_START","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","firstLine","secondLine","mid1","midPoint","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","units1","values2","units2","dist1","dist2","UltrasoundPleuraBLineTool","USPleuraBLineAnnotationType","BLINE","PLEURA","bLineColor","pleuraColor","drawDepthGuide","depth_ratio","depthGuideColor","depthGuideThickness","depthGuideDashLength","depthGuideDashGap","depthGuideOpacity","fanOpacity","showFanAnnotations","updatePercentageCallback","pleuraAnnotations","bLineAnnotations","annotationType","getActiveAnnotationType","allPointsInsideShape","newPoint","isInsideFanShape","getFanShapeGeometryParameters","fanCenter","indexToCanvasRatio","getIndexToCanvasRatio","unMergedPleuraIntervals","mergedPleuraIntervals","pleuraIntervalsDisplayed","bLineIntervalsDisplayed","drawAnnotation","getColorForLineType","lineInterval","fanNumber","interval","clippedInterval","fanDataId","fanUID","drawFan","pleuraAnnotationsToDraw","bLineAnnotationsToDraw","calculateBLinePleuraPercentage","activeAnnotationType","filterAnnotations","filterFunction","countAnnotations","getImageIdIndex","annotationMapping","counts","bLine","pleura","deleteAnnotations","setActiveAnnotationType","deleteLastAnnotationType","annotationList","updateFanGeometryConfiguration","isFanShapeGeometryParametersValid","deriveFanGeometryFromViewport","pleuraIntervals","bLineIntervals","diffVector","radToDegree","rad","degreeToRad","indexToCanvas","depth_radius","theta_start","theta_range","arc_length","num_dashes","theta_step","theta1","theta2","start_point","end_point","strokeOpacity","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","setPoint","AnnotationEraserTool","_deleteNearbyAnnotations","toolGroup","tools","_toolInstances","annotationsToRemove","interactableAnnotations","setAnnotationSelected","getAnnotation","createAnnotationMemo","deleting","RegionSegmentTool","GrowCutBaseTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","currentWorldPoint","growCutData","circleBorderPoint","runGrowCut","circleCenterPoint","getGrowCutLabelmap","segmentation","sphereInfo","growCut","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","segmentIndex","RegionSegmentPlusTool","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","cursor","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","seeds","positiveSeedIndices","negativeSeedIndices","requestAnimationFrame","worldIslandPoints","getRemoveIslandData","mergedOptions","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","labelmapData","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","RectangleScissorsTool","LabelmapBaseTool","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","activeLabelmapSegmentation","activeSegmentation","segmentsLocked","segmentLocking","segmentColor","representationData","getSegmentation","segmentationImageId","getCurrentLabelmapImageIdForViewport","operationData","applyActiveStrategy","toolMetadata","CircleScissorsTool","SphereScissorsTool","activeSegmentationRepresentation","getEditData","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","throttleTimeout","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","handlesToStart","startWorld","endWorld","indexOfNormal","handlePoint","newProjectionPoints","pointsInsideVolume","baseTopLeftCanvas","baseBottomRightCanvas","basePos1","basePos2","measureInfo","modalityUnitOptions","currentCanvasCoordinates","worldPos1Index","worldProjectionPointIndex","indexOfProjection","worldPos2Index","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","pos","_context","PaintFillTool","currentSegmentationImageId","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","setAtIndex","framesModified","getFramesModified","triggerSegmentationDataModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","AXES","CUSTOM","polyDataURL","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","setEnabled","getOffscreenMultiRenderWindow","getRenderWindow","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","url","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setInputData","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","SegmentSelectTool","SelectMode","Inside","Border","hoverTimeout","searchRadius","hoverTimer","_setActiveSegment","getActiveSegmentation","_setActiveSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","getSegmentIndexAtLabelmapBorder","Contour","getHoveredContourSegmentationAnnotation","Surface","setActiveSegmentIndex","triggerSegmentationModified","SegmentBidirectionalTool","BidirectionalTool","getSegmentIndexColor","dataId1","dataId2","secondLineUID","toolAnnotations","existingAnnotation","majorAxis","minorAxis","major0","major1","minor0","minor1","SegmentLabelTool","_setHoveredSegment","_setHoveredSegmentForType","_editData","hoveredSegmentLabel","LabelMapEditWithContourTool","PlanarFreehandContourSegmentationTool","annotationsToViewportMap","viewportIdsChecked","allowOpenContours","onViewportAddedToToolGroupBinded","onViewportAddedToToolGroup","onSegmentationModifiedBinded","onSegmentationModified","annotationModified","SEGMENTATION_MODIFIED","cleanUpListeners","checkContourSegmentation","activeSeg","representations","getSegmentationRepresentation","BrushTool","viewportContoursToLabelmap","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","rectangle","active","drawRedactionRect","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldToIndexVec3","iMin","iMax","jMin","jMax","kMin","kMax","yMultiple","zMultiple","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","_getTargetStackUID","Dir","visited","DEFAULT_VALUES","publicAPI","model","initialValues","arguments","m","algo","requestData","inData","outData","output","extractContours","traverseLoop","pd","startLineId","startPtId","loopPoints","lineId","lastPtId","terminated","numInserted","cellPointIds","getCellPoints","ptId","lineCell","getPointCells","loops","inLines","setData","li","getNumberOfCells","outLines","insertNextCell","vtkContourLoopExtraction","newInstance","projectTo2D","geometricSurfaceUtils","checkStandardBasis","rotatePoints","getBoundingBoxAroundShapeWorld","isPlaneIntersectingAABB","polySegConverters","polySeg","polySegInitializing","polySegInitializingPromise","initializePolySeg","progressCallback","ICRPolySeg","moduleId","peerImport","default","initialize","updateProgress","convertContourToSurface","args","callbacks","polylines","numPointsArray","convertContourRoiToSurface","convertLabelmapToSurface","results","rotationInfo","isStandard","rotatedPoints","rotationMatrix","convertContourToVolumeLabelmap","segmentIndices","annotationUIDsInSegmentMap","segmentationVoxelManager","createScalarVolumeVoxelManager","setDimensions","setOrigin","setDirection","setSpacing","scalarArray","setScalars","holesPolyline","projectedPolyline","sharedDimensionIndex","holes","hole","projectedHole","firstDim","secondDim","pointIJK","setAtIJKPoint","point2D","convertContourToStackLabelmap","segmentationsInfo","segmentationVoxelManagers","segmentationInfo","manager","convertSurfaceToVolumeLabelmap","convertSurfaceToLabelmap","polys","convertSurfacesToVolumeLabelmap","segmentsInfo","promises","all","targetImageData","totalSize","outputVolumesInfo","extent","roundedIndex","getSurfacesAABBs","surfacesInfo","aabbs","numDimensions","cutSurfacesIntoPlanes","planesInfo","surfacesAABB","updateCacheCallback","numberOfPlanes","cutter","plane1","setCutFunction","surfacePolyData","planeInfo","sliceIndex","planes","polyDataResults","polyDataInfo","aabb3","getPolys","setNormal","getNumberOfPoints","cutterOutput","buildLinks","loopExtraction","loopOutput","lines","numberOfCells","loopError","progress","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","svgNodeCache","domRef","appendNode","svgLayerElement","svgNode","touched","setNodeTouched","clearUntouched","cacheEntry","internalDivElement","_getSvgLayer","svgNodeCacheForCanvas","fn","strokeWidth","svgNodeHash","existingCircleElement","attributes","stroke","newCircleElement","createElementNS","existingEllipse","rx","ry","svgEllipseElement","linkUID","annotationAnchorPoints","refPoint","findClosestPoint","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","centering","canvasBoundingBox","midX","endfirstLine","endsecondLine","threeLine","zIndex","_getHash","existingFanElement","startRad","endRad","centerX","centerY","outerStartX","outerStartY","outerEndX","outerEndY","innerStartX","innerStartY","largeArcFlag","pathData","setAttributesIfNecessary","newFanElement","setNewAttributesIfValid","svgns","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","markerEndId","_width","existingRect","svgRectElement","Swipe","renderers","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","_needsRender","_pendingRenderQueue","_animationFrameSet","_animationFrameHandle","_getAllViewports","_renderFlaggedSegmentations","_throwIfDestroyed","_triggerRender","nextViewportIds","shift","_setViewportsToBeRenderedNextFrame","_getViewportIdsForSegmentation","renderSegmentation","segmentationRepresentations","_render","viewportRenderList","segmentationRenderList","representation","_addPlanarFreeHandToolIfAbsent","allSettled","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","hasTool","addTool","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","defaultSegmentationStateManager","getDefaultRenderingConfig","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","freeze","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","updateSegmentation","draftState","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","isBaseVolumeSegmentation","updateLabelmapSegmentationImageReferences","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","isReferenceViewable","asOverlay","_updateLabelmapImageIdReferenceMap","_updateAllLabelmapSegmentationImageReferences","withNavigation","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","addColorLUT","removeColorLUT","_getStackIdForImageIds","getAllViewportSegmentationRepresentations","getSegmentationRepresentationsBySegmentationId","viewportReps","filteredReps","segmentationStyle","global","viewportsStyle","setStyle","styles","currentStyles","updatedStyles","copyActiveToInactiveIfNotProvided","renderInactiveSegmentations","repConfig","perSegment","allSegments","ALL_SEGMENTATIONS_KEY","segConfig","processedStyles","labelmapStyles","renderOutlineInactive","renderOutline","outlineWidthInactive","outlineWidth","renderFillInactive","renderFill","fillAlphaInactive","fillAlpha","outlineOpacityInactive","outlineOpacity","contourStyles","outlineDashInactive","outlineDash","combinedStyle","getDefaultStyle","allSegmentationsKey","getRenderInactiveSegmentations","clearSegmentationStyle","clearAllSegmentationStyles","clearViewportStyle","clearAllViewportStyles","resetToGlobalStyle","hasCustomStyle","segmentationStateManager","indexToUse","colorLUTToUse","missingColorLUTs","segmentationInputArray","segmentationInput","addContourRepresentationToViewport","contourInputArray","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","rest","normalizedSegment","geometryId","geometry","getGeometry","normalizeContourSegments","surfaceData","normalizeSurfaceSegments","normalizeSegments","addSegmentations","setColorLUT","colorLUTsIndex","segmentationRepresentation","colorValue","setSegmentIndexColor","colorReference","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","getSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","convertVolumeToStackLabelmap","segmentationVolume","computeVolumeLabelmapFromStack","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","colorLUTOrIndex","parse","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegmentIndices","destroy","re","toolGroupFilteredByIds","tg","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","index3","index4","handles1","handles2","scale1","scale2","widthUnit","vector1","vector2","renderResult","pointCanProjectOnLine","PlanarFreehandROITool","alwaysRenderOpenContourHandles","closeContourProximity","checkCanvasEditFallbackProximity","makeClockWise","subPixelResolution","smoothing","smoothOnAdd","smoothOnEdit","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","displayOnePointAsCrosshairs","isEditingClosed","isEditingOpen","activateDraw","activateOpenContourEndEdit","activateClosedContourEdit","activateOpenContourEdit","previousPoint","pStart","pEnd","cancelDrawing","cancelOpenContourEdit","cancelClosedContourEdit","calibratedScale","numPoints","updateClosedCachedStats","updateOpenCachedStats","annotationsToDisplay","filterAnnotationsWithinSlice","filterAnnotationsForDisplay","annotationsWithParallelNormals","td","annotationViewPlaneNormal","vector","annotationsWithinSlice","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","renderPointContourWithMarker","renderContour","_calculateStatsIfActive","worldPosIndex","worldPosIndex2","iDelta","jDelta","kDelta","ceil","worldPosEnd","canvasPosEnd","curRow","intersections","intersectionCounter","_pointIJK","getLineSegmentIntersectionsCoordinates","RectangleROITool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","applyActiveStrategyCallback","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","Preview","OnInteractionEnd","acceptPreview","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","circleUID1","previewData","NaN","memoMap","acceptedMemoIds","hasSegmentIndex","hasPreviewIndex","changedIndices","_historyRedoHandler","memoData","hasPreviewData","shouldResolvePreviewRequests","voxelManagerId","redoVoxelManager","ERROR_EVENT","message","cancelable","actors","volumes","referencedVolumeIdToThreshold","activeRepresentation","configColor","previewColor","previewSegmentIndex","factor","lightenColor","previewOnHover","addPreview","acceptReject","AddPreview","removeContours","viewAnnotations","contourAnnotations","fillInsideCircle","previewVoxels","segmentationVoxels","sourceVoxelManager","bound","activeIndex","startIndex","startValue","hasZeroIndex","hasPositiveIndex","polyPoint","polyIndex","polyValue","isPointInsidePolyline3D","setAtIJK","slices","getArrayOfModifiedSlices","initializeCircle","Initialize","segmentationImageData","centerIJK","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","worldInfo","sphereObj","radius2","precalculated","precalculatePointInEllipse","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","strategyFunction","thresholdInsideCircle","initializeRectangle","imageVoxelManager","pointInShapeFn","rectangleCornersIJK","coord","isStackViewport","isAligned","getSpacing","EPS","pointsBoundsLPS","xMin","xMax","yMin","yMax","zMin","zMax","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","getClosestImageIdForStackViewport","ImagePositionPatient","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","DEFAULT_CONTOUR_SEG_TOOL_NAME","removeContourSegmentationAnnotation","endPointWorld","originalToolName","interpolationUID","interpolationCompleted","addContourSegmentationAnnotation","closestDistance","testIndex","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","useRAF","TypeError","invokeFunc","thisArg","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","Boolean","cancelAnimationFrame","cancelTimer","flush","pending","annotationCanvasPoints","handlesLeftToRight","_compareX","handlesTopToBottom","_compareY","_determineCorners","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","getCalibratedLengthUnitsAndScale","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","USER","ERROR","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","rowCosine","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getViewportForAnnotation","pointInSphere","sphere","interpolateSegmentPoints","iniIndex","endIndex","knotsRatioPercentage","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","knotsIndexes","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","continuosDistributionValue","getContinuousUniformDistributionValues","axisList","isAxisAlignedRectangle","rectangleVec1","rectangleVec2","calculateAnglesWithAxes","vec","SegmentStatsCalculator","calculators","indices","statsInit","statsData","calculator","lpad","string","character","seed","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","visits","currentArgs","job","getArgs","prevArgs","previousArgs","iKey","markAsVisited","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","toolInstances","annotationUIDs","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","getSegmentIndexAtWorldForContour","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","labelmap","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","binding","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","sphereRadius","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nz","neighborVoxelIndex","neighborPixelValue","getAtIndex","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","tool","getViewportsInfo","getDeltaPoints","curr","getMeanPoints","_subtractPoints2D","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","DesiredOutputPrecision","DEFAULT","SINGLE","DOUBLE","Constants","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","vtkErrorMacro","dataDescription","EMPTY","Float64Array","setGetArray","getArray","classHierarchy","setExtent","deleted","_len","inExtent","_key","extentArray","changeDetected","dims","nCells","SINGLE_POINT","X_LINE","Y_LINE","Z_LINE","XY_PLANE","YZ_PLANE","XZ_PLANE","XYZ_GRID","coords","getBounds","getSpatialExtent","ex","computeTransforms","ain","aout","indexToWorldVec3","indexToWorldBounds","bin","bout","worldToIndexBounds","onModified","getCenter","computeHistogram","worldBounds","voxelFunction","yStride","zStride","pixels","maximum","minimum","sumOfSquares","isum","inum","average","sigma","computeIncrements","increments","incr","computeOffsetIndex","_ref","getNumberOfComponents","getOffsetIndexFromWorld","offsetIndex","getComponent","vtkImageData$1","ColorSpace","Scale","ScalarMappingTarget","vtkDebugMacro","vtkWarningMacro","vtkColorTransferFunctionLabToMsh","lab","msh","L","M","vtkColorTransferFunctionAdjustHue","unsatM","hueSpin","vtkColorTransferFunctionInterpolateDiverging","rgb1","rgb2","lab1","lab2","msh1","msh2","localS","adiff","vtkColorTransferFunctionAngleDiff","Mmid","mshTmp","labTmp","vtkColorTransferFunctionMshToLab","clamping","colorSpace","RGB","hSVWrap","nanColor","belowRangeColor","aboveRangeColor","useAboveRangeColor","useBelowRangeColor","allowDuplicateScalars","tableSize","buildTime","discretize","numberOfValues","setGet","enum","setArray","addRGBPointLong","sharpness","removePoint","sortAndUpdateRange","addHSVPoint","addHSVPointLong","rgb","hsv","setNodes","before","after","modifiedInvoked","updateRange","oldRange","mappingRange","retVal","movePoint","oldX","newX","addRGBSegment","r1","g1","r2","g2","addHSVSegment","h1","s1","h2","hsv1","hsv2","mapValue","indexedLookup","numNodes","getAnnotatedValueIndexInternal","getNanColorByReference","nodeVal","getRedValue","getGreenValue","getBlueValue","xStart_","xEnd_","xStart","xEnd","lastR","lastG","lastB","tmpVec","usingLogScale","LOG10","logStart","logEnd","logX","log10","tidx","deltaRange","xn","discretizeIndex","getUseAboveRangeColor","getUseBelowRangeColor","HSV","hsvTmp","LAB","DIVERGING","ss","sss","h3","h4","getUint8Table","withAlpha","getMTime","tableWithAlpha","nbChannels","tmpTable","numComponents","getNumberOfTuples","buildFunctionFromTable","getNumberOfAvailableColors","nNodes","getIndexedColor","nodeValue","fillFromDataPointer","nb","ptr","originalRange","adjustRange","functionRange","estimateMinNumberOfSamples","findMinimumXDistance","currentDist","mapScalarsThroughTable","outFormat","inputOffset","mapDataIndexed","alpha","getAlpha","inIncr","outputV","inputV","RGBA","LUMINANCE","LUMINANCE_ALPHA","colorMap","oldColorSpace","isModified","oldNanColor","NanColor","oldNodes","callModified","vtkColorTransferFunction","vtkColorTransferFunction$1","out","fromValues","copy","subtract","multiply","divide","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","normalize","bx","by","bz","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rotateY","mag","cosine","zero","exactEquals","a0","b0","mul","div","sqrDist","sqrLen","stride","arg","l","zip","interpolator","samples"],"sourceRoot":""}