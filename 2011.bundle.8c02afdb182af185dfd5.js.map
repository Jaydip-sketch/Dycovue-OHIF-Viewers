{"version":3,"file":"2011.bundle.8c02afdb182af185dfd5.js","mappings":"uJAEA,IAAIA,EAAS,CAAC,EACP,SAASC,IACZ,OAAOD,CACX,CACO,SAASE,EAAUC,GACtBH,EAASG,CACb,CAIA,IAAIC,GAAqB,EAClB,SAASC,IACZ,IAAKL,EAAOM,QAAQC,QAEhB,OADAC,QAAQC,KAAK,6SACN,KAEX,MAAMC,EAAUV,EAAOM,OAAOC,QAK9B,OAJKH,IACDM,EAAQC,OACRP,GAAqB,GAElBM,CACX,C,gDCxBA,MAiQA,EAjQ8B,CAC1B,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,I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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/config.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/setCursorForElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipse.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPath.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRectByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setAttributesIfNecessary.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setNewAttributesIfValid.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageRenderedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/onLabelmapSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performVolumeLabelmapUpdate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performStackLabelmapUpdate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationDataModifiedEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationModifiedEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationCompletedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationSelectionListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationModifiedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationRemovedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationRemoved.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationModifiedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/init.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getFont.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getCurrentLabelmapImageIdForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportIdsWithSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/getSegmentationActor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/styleHelpers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationMapFromSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getPolylineMap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/extractSegmentPolylines.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/decimateContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeCompleteContourAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourIslands.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/smoothContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/convertContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/clearSegmentValue.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getLabelmapImageIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/createSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroy.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroySynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getAllSynchronizers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/createToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroy.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/addEnabledElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/cancelActiveManipulations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/removeEnabledElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/areViewportsCoplanar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/cameraSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/imageSliceSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/presentationViewSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/slabThicknessSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/voiSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/zoomPanSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createVOISynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticBezier.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Surface/surfaceDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureImageVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/types/ContourAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/AnnotationMultiSlice.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areSameSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areViewReferencesEqual.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/contourSegmentationOperation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/copyAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getIntersectingAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getViewReferenceFromAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/isContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addPolylinesToSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/logicalOperators.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/mergeMultipleAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineIntersect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineSubtract.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineUnify.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineXor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/removeContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/sharedOperations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/calculatePerimeter.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/contourFinder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findIslands.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataWorld.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getDeduplicatedVTKPolyDataPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/areCoplanarContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/detectContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/generateContourSetsFromLabelmap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/AnnotationToPointData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/acceptAutogeneratedInterpolations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/updateContourPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/getDataInTime.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getAnnotationNearPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getPixelValueUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportsForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/arePolylinesIdentical.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/containsPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/decimate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSignedArea.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/isClosed.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/moveAnnotationToViewPlane.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/normalizeViewportPlane.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/getOrientationStringLPS.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/invertOrientationStringLPS.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/registerComputeWorker.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/InterpolationManager/InterpolationManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/VolumetricCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushSizeForToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushThresholdForToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/computeMetabolicStats.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/contourAndFindLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createBidirectionalToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapMemo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/findLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateImageVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getStatistics.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getUniqueSegmentIndices.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isLineInSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/islandRemoval.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/segmentContourAction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdSegmentationByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilsForWorker.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/validateLabelmap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackContextPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/version.js","webpack:///../../../node_modules/lodash.get/index.js"],"sourcesContent":["import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from './enums/Events';\nlet config = {};\nexport function getConfig() {\n    return config;\n}\nexport function setConfig(newConfig) {\n    config = newConfig;\n}\nexport function getAddOns() {\n    return config.addons;\n}\nlet polysegInitialized = false;\nexport function getPolySeg() {\n    if (!config.addons?.polySeg) {\n        console.warn('PolySeg add-on not configured. This will prevent automatic conversion between segmentation representations (labelmap, contour, surface). To enable these features, install @cornerstonejs/polymorphic-segmentation and register it during initialization: cornerstoneTools.init({ addons: { polySeg } }).');\n        return null;\n    }\n    const polyseg = config.addons.polySeg;\n    if (!polysegInitialized) {\n        polyseg.init();\n        polysegInitialized = true;\n    }\n    return polyseg;\n}\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n    'alias',\n    'all-scroll',\n    'auto',\n    'cell',\n    'col-resize',\n    'context-menu',\n    'copy',\n    'crosshair',\n    'default',\n    'e-resize',\n    'ew-resize',\n    'grab',\n    'grabbing',\n    'help',\n    'move',\n    'ne-resize',\n    'nesw-resize',\n    'no-drop',\n    'none',\n    'not-allowed',\n    'n-resize',\n    'ns-resize',\n    'nw-resize',\n    'nwse-resize',\n    'pointer',\n    'progress',\n    'row-resize',\n    'se-resize',\n    's-resize',\n    'sw-resize',\n    'text',\n    'vertical-text',\n    'wait',\n    'w-resize',\n    'zoom-in',\n    'zoom-out',\n]);\nexport default class MouseCursor {\n    constructor(name, fallback) {\n        this.name = name + '';\n        this.fallback = fallback;\n    }\n    getName() {\n        return this.name + '';\n    }\n    addFallbackStyleProperty(style) {\n        const { fallback } = this;\n        if (fallback instanceof MouseCursor) {\n            return `${style}, ${fallback.getStyleProperty()}`;\n        }\n        return style + '';\n    }\n    getStyleProperty() {\n        return this.addFallbackStyleProperty(this.name) + '';\n    }\n    static getDefinedCursor(name) {\n        const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n        let mouseCursor = definedCursors.get(name);\n        if (mouseCursor instanceof MouseCursor) {\n            return mouseCursor;\n        }\n        if (STANDARD_CURSORS.has(name)) {\n            mouseCursor = new MouseCursor(name);\n            definedCursors.set(name, mouseCursor);\n            return mouseCursor;\n        }\n    }\n    static setDefinedCursor(name, cursor) {\n        if (cursor instanceof MouseCursor) {\n            const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n            definedCursors.set(name, cursor);\n            return true;\n        }\n        return false;\n    }\n}\nfunction getDefinedCursors(context, symbol) {\n    let definedCursors = context[symbol];\n    if (!(definedCursors instanceof Map)) {\n        definedCursors = new Map();\n        Object.defineProperty(context, symbol, { value: definedCursors });\n    }\n    return definedCursors;\n}\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import MouseCursor from './MouseCursor';\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\nfunction initElementCursor(element, cursor) {\n    _getElementCursors(element)[0] = cursor;\n    _setElementCursor(element, cursor);\n}\nfunction _setElementCursor(element, cursor) {\n    const cursors = _getElementCursors(element);\n    cursors[1] = cursors[0];\n    cursors[0] = cursor;\n    element.style.cursor = (cursor instanceof MouseCursor\n        ? cursor\n        : MouseCursor.getDefinedCursor('auto')).getStyleProperty();\n}\nfunction resetElementCursor(element) {\n    _setElementCursor(element, _getElementCursors(element)[1]);\n}\nfunction hideElementCursor(element) {\n    _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\nfunction _getElementCursors(element) {\n    let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n    if (!(map instanceof WeakMap)) {\n        map = new WeakMap();\n        Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n            value: map,\n        });\n    }\n    let cursors = map.get(element);\n    if (!cursors) {\n        cursors = [null, null];\n        map.set(element, cursors);\n    }\n    return cursors;\n}\nexport { initElementCursor, resetElementCursor, hideElementCursor, _setElementCursor as setElementCursor, };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\nconst DEFAULT_NAME = 'image-cursor';\nexport default class ImageMouseCursor extends MouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME), fallback);\n        this.url = url;\n        this.x = Number(x) || 0;\n        this.y = Number(y) || 0;\n    }\n    getStyleProperty() {\n        const { url, x, y } = this;\n        let style = `url('${url}')`;\n        if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n            style += ` ${x} ${y}`;\n        }\n        return this.addFallbackStyleProperty(style);\n    }\n    static getUniqueInstanceName(prefix) {\n        return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n    }\n}\n","const BASE = {\n    iconContent: '',\n    iconSize: 16,\n    viewBox: {\n        x: 16,\n        y: 16,\n    },\n    mousePoint: {\n        x: 8,\n        y: 8,\n    },\n    mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n    x: 127,\n    y: 60,\n};\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CursorSVG = {\n    Angle: extend(BASE, {\n        name: 'Angle',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    ArrowAnnotate: extend(BASE, {\n        name: 'ArrowAnnotate',\n        iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Bidirectional: extend(BASE, {\n        name: 'Bidirectional',\n        iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n        viewBox: {\n            x: 48,\n            y: 48,\n        },\n    }),\n    CobbAngle: extend(BASE, {\n        name: 'CobbAngle',\n        iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    CircleROI: extend(BASE, {\n        name: 'CircleROI',\n        iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    EllipticalROI: extend(BASE, {\n        name: 'EllipticalROI',\n        iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    FreehandROI: extend(BASE, {\n        name: 'FreehandROI',\n        iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    FreehandROISculptor: extend(BASE, {\n        name: 'FreehandROISculptor',\n        iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Length: extend(BASE, {\n        name: 'Length',\n        iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Height: extend(BASE, {\n        name: 'Height',\n        iconContent: `<path d=\"m 6 22 l 8.5 0 v -16 h 8\" stroke-width=\"3\" fill=\"none\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Probe: extend(BASE, {\n        name: 'Probe',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    RectangleROI: extend(BASE, {\n        name: 'RectangleROI',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Label: extend(BASE, {\n        name: 'Label',\n        iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Crosshairs: extend(BASE, {\n        name: 'Crosshairs',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Eraser: extend(BASE, {\n        name: 'Eraser',\n        iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n        viewBox: {\n            x: 2048,\n            y: 1792,\n        },\n    }),\n    Magnify: extend(BASE, {\n        name: 'Magnify',\n        iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n        viewBox: {\n            x: 512,\n            y: 512,\n        },\n    }),\n    Pan: extend(BASE, {\n        name: 'Pan',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Rotate: extend(BASE, {\n        name: 'Rotate',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    StackScroll: extend(BASE, {\n        name: 'StackScroll',\n        iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n        viewBox: {\n            x: 24,\n            y: 28,\n        },\n    }),\n    WindowLevelRegion: extend(BASE, {\n        name: 'WindowLevelRegion',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    WindowLevel: extend(BASE, {\n        name: 'WindowLevel',\n        iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Zoom: extend(BASE, {\n        name: 'Zoom',\n        iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n        viewBox: {\n            x: 640,\n            y: 512,\n        },\n    }),\n    SegmentationFreeHandEraseInside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseInside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillInside: extend(BASE, {\n        name: 'SegmentationFreeHandFillInside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandEraseOutside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseOutside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillOutside: extend(BASE, {\n        name: 'SegmentationFreeHandFillOutside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationRectangleEraseInside: extend(BASE, {\n        name: 'SegmentationRectangleEraseInside',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    RectangleScissor: extend(BASE, {\n        name: 'RectangleScissor',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    CircleScissor: extend(BASE, {\n        name: 'CircleScissor',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_INSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.ERASE_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n};\nfunction extend(base, values) {\n    return Object.assign(Object.create(base), {\n        ...values,\n        name: values.name || base.name,\n    });\n}\nfunction registerCursor(toolName, iconContent, viewBox) {\n    CursorSVG[toolName] = extend(BASE, {\n        iconContent,\n        viewBox,\n    });\n}\nfunction getDefinedSVGCursorDescriptor(name) {\n    return CursorSVG[name];\n}\nconst svgCursorNames = Object.keys(CursorSVG);\nexport { getDefinedSVGCursorDescriptor, registerCursor, svgCursorNames, CursorSVG, };\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\nexport default class SVGMouseCursor extends ImageMouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(url, x, y, name, fallback);\n    }\n    static getDefinedCursor(name, pointer = false, color) {\n        if (!color) {\n            color = getStyleProperty(PROPERTY, {}, STATE, MODE);\n        }\n        const urn = getCursorURN(name, pointer, color);\n        let cursor = super.getDefinedCursor(urn);\n        if (!cursor) {\n            const descriptor = getDefinedSVGCursorDescriptor(name);\n            if (descriptor) {\n                cursor = createSVGMouseCursor(descriptor, urn, pointer, color, super.getDefinedCursor('default'));\n                super.setDefinedCursor(urn, cursor);\n            }\n        }\n        return cursor;\n    }\n}\nfunction format(template, dictionary) {\n    const dict = Object(dictionary);\n    const defined = Object.prototype.hasOwnProperty.bind(dict);\n    return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n        return defined(key) ? dict[key] + '' : '';\n    });\n}\nfunction getCursorURN(name, pointer, color) {\n    const type = pointer ? 'pointer' : 'cursor';\n    return `${type}:${name}/${color}`;\n}\nfunction createSVGMouseCursor(descriptor, name, pointer, color, fallback) {\n    const { x, y } = descriptor.mousePoint;\n    return new SVGMouseCursor(createSVGIconUrl(descriptor, pointer, { color }), x, y, name, fallback);\n}\nfunction createSVGIconUrl(descriptor, pointer, options) {\n    const blob = createSVGIconBlob(descriptor, pointer, options);\n    const url = URL.createObjectURL(blob);\n    const urn = `${url}#${descriptor.name || 'unknown'}-${pointer ? 'pointer' : 'cursor'}`;\n    return urn;\n}\nfunction createSVGIconBlob(descriptor, pointer, options) {\n    const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(descriptor, options);\n    return new Blob([svgString], { type: 'image/svg+xml' });\n}\nfunction createSVGIcon(descriptor, options) {\n    const { iconContent, iconSize, viewBox } = descriptor;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n    return format(svgString, options);\n}\nfunction createSVGIconWithPointer(descriptor, options) {\n    const { iconContent, iconSize, viewBox, mousePointerGroupString } = descriptor;\n    const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n    const svgSize = 16 + iconSize;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n    return format(svgString, options);\n}\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nfunction setCursorForElement(element, cursorName) {\n    let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n    if (!cursor) {\n        cursor = MouseCursor.getDefinedCursor(cursorName);\n    }\n    if (!cursor) {\n        console.log(`Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`);\n        cursor = MouseCursor.getDefinedCursor(cursorName);\n    }\n    setElementCursor(element, cursor);\n}\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport { registerCursor, svgCursorNames, CursorSVG, } from './SVGCursorDescriptor';\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\nexport { MouseCursor, ImageMouseCursor, SVGMouseCursor, elementCursor, registerCursor, CursorNames, CursorSVG, setCursorForElement, };\n","import _getHash from './_getHash';\nimport drawEllipseByCoordinates from './drawEllipseByCoordinates';\nfunction drawEllipse(svgDrawingHelper, annotationUID, ellipseUID, corner1, corner2, options = {}, dataId = '') {\n    const top = [(corner1[0] + corner2[0]) / 2, corner1[1]];\n    const bottom = [(corner1[0] + corner2[0]) / 2, corner2[1]];\n    const left = [corner1[0], (corner1[1] + corner2[1]) / 2];\n    const right = [corner2[0], (corner1[1] + corner2[1]) / 2];\n    drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, [bottom, top, left, right], (options = {}), (dataId = ''));\n}\nexport default drawEllipse;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options = {}, uniqueIndex) {\n    const { color, handleRadius, width, lineWidth, fill, type, opacity } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'handle', `hg-${handleGroupUID}-index-${uniqueIndex}`);\n    let attributes;\n    if (type === 'circle') {\n        attributes = {\n            cx: `${handle[0]}`,\n            cy: `${handle[1]}`,\n            r: handleRadius,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            opacity: opacity,\n        };\n    }\n    else if (type === 'rect') {\n        const handleRadiusFloat = parseFloat(handleRadius);\n        const side = handleRadiusFloat * 1.5;\n        const x = handle[0] - side * 0.5;\n        const y = handle[1] - side * 0.5;\n        attributes = {\n            x: `${x}`,\n            y: `${y}`,\n            width: `${side}`,\n            height: `${side}`,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            rx: `${side * 0.1}`,\n            opacity: opacity,\n        };\n    }\n    else {\n        throw new Error(`Unsupported handle type: ${type}`);\n    }\n    const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingHandleElement) {\n        setAttributesIfNecessary(attributes, existingHandleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newHandleElement = document.createElementNS(svgns, type);\n        setNewAttributesIfValid(attributes, newHandleElement);\n        svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n    }\n}\nexport default drawHandle;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, options = {}, dataId = '') {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color = 'rgb(0, 255, 0)', width = 10, lineWidth, lineDash, markerStartId = null, markerEndId = null, shadow = false, strokeOpacity = 1, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n    const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const dropShadowStyle = shadow ? `filter:url(#shadow-${layerId});` : '';\n    const attributes = {\n        x1: `${start[0]}`,\n        y1: `${start[1]}`,\n        x2: `${end[0]}`,\n        y2: `${end[1]}`,\n        stroke: color,\n        style: dropShadowStyle,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'marker-start': markerStartId ? `url(#${markerStartId})` : '',\n        'marker-end': markerEndId ? `url(#${markerEndId})` : '',\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingLine) {\n        setAttributesIfNecessary(attributes, existingLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newLine = document.createElementNS(svgns, 'line');\n        if (dataId !== '') {\n            newLine.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newLine);\n        svgDrawingHelper.appendNode(newLine, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPath(svgDrawingHelper, annotationUID, pathUID, points, options) {\n    const hasSubArrays = points.length && points[0].length && Array.isArray(points[0][0]);\n    const pointsArrays = hasSubArrays ? points : [points];\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'path', pathUID);\n    const existingNode = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (let i = 0, numArrays = pointsArrays.length; i < numArrays; i++) {\n        const points = pointsArrays[i];\n        const numPoints = points.length;\n        if (numPoints < 2) {\n            continue;\n        }\n        for (let j = 0; j < numPoints; j++) {\n            const point = points[j];\n            const cmd = j ? 'L' : 'M';\n            pointsAttribute += `${cmd} ${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n        }\n        if (closePath) {\n            pointsAttribute += 'Z ';\n        }\n    }\n    if (!pointsAttribute) {\n        return;\n    }\n    const attributes = {\n        d: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingNode) {\n        setAttributesIfNecessary(attributes, existingNode);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newNode = document.createElementNS(svgns, 'path');\n        setNewAttributesIfValid(attributes, newNode);\n        svgDrawingHelper.appendNode(newNode, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPolyline(svgDrawingHelper, annotationUID, polylineUID, points, options) {\n    if (points.length < 2) {\n        return;\n    }\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, markerStartId = null, markerEndId = null, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n    const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (const point of points) {\n        pointsAttribute += `${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n    }\n    if (closePath) {\n        const firstPoint = points[0];\n        pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n    }\n    const attributes = {\n        points: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'marker-start': markerStartId ? `url(#${markerStartId})` : '',\n        'marker-end': markerEndId ? `url(#${markerEndId})` : '',\n    };\n    if (existingPolyLine) {\n        setAttributesIfNecessary(attributes, existingPolyLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newPolyLine = document.createElementNS(svgns, 'polyline');\n        setNewAttributesIfValid(attributes, newPolyLine);\n        svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [topLeft, topRight, bottomLeft, bottomRight] = canvasCoordinates;\n    const width = Math.hypot(topLeft[0] - topRight[0], topLeft[1] - topRight[1]);\n    const height = Math.hypot(topLeft[0] - bottomLeft[0], topLeft[1] - bottomLeft[1]);\n    const center = [\n        (bottomRight[0] + topLeft[0]) / 2,\n        (bottomRight[1] + topLeft[1]) / 2,\n    ];\n    const leftEdgeCenter = [\n        (bottomLeft[0] + topLeft[0]) / 2,\n        (bottomLeft[1] + topLeft[1]) / 2,\n    ];\n    const angle = (Math.atan2(center[1] - leftEdgeCenter[1], center[0] - leftEdgeCenter[0]) *\n        180) /\n        Math.PI;\n    const attributes = {\n        x: `${center[0] - width / 2}`,\n        y: `${center[1] - height / 2}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        if (dataId !== '') {\n            svgRectElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawTextBox(svgDrawingHelper, annotationUID, textUID, textLines, position, options = {}) {\n    const mergedOptions = Object.assign({\n        fontFamily: 'Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        color: 'rgb(255, 255, 0)',\n        background: '',\n        padding: 25,\n        centerX: false,\n        centerY: true,\n    }, options);\n    const textGroupBoundingBox = _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines, position, mergedOptions);\n    return textGroupBoundingBox;\n}\nfunction _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines = [''], position, options) {\n    const { padding, color, fontFamily, fontSize, background } = options;\n    let textGroupBoundingBox;\n    const [x, y] = [position[0] + padding, position[1] + padding];\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n    const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingTextGroup) {\n        const textElement = existingTextGroup.querySelector('text');\n        const textSpans = Array.from(textElement.children);\n        for (let i = 0; i < textSpans.length; i++) {\n            const textSpanElement = textSpans[i];\n            const text = textLines[i] || '';\n            textSpanElement.textContent = text;\n        }\n        if (textLines.length > textSpans.length) {\n            for (let i = 0; i < textLines.length - textSpans.length; i++) {\n                const textLine = textLines[i + textSpans.length];\n                const textSpan = _createTextSpan(textLine);\n                textElement.appendChild(textSpan);\n            }\n            existingTextGroup.appendChild(textElement);\n            svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n        }\n        const textAttributes = {\n            fill: color,\n            'font-size': fontSize,\n            'font-family': fontFamily,\n        };\n        const textGroupAttributes = {\n            transform: `translate(${x} ${y})`,\n        };\n        setAttributesIfNecessary(textAttributes, textElement);\n        setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n        existingTextGroup.setAttribute('data-annotation-uid', annotationUID);\n        textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const textGroup = document.createElementNS(svgns, 'g');\n        textGroup.setAttribute('data-annotation-uid', annotationUID);\n        textGroup.setAttribute('transform', `translate(${x} ${y})`);\n        const textElement = _createTextElement(svgDrawingHelper, options);\n        for (let i = 0; i < textLines.length; i++) {\n            const textLine = textLines[i];\n            const textSpan = _createTextSpan(textLine);\n            textElement.appendChild(textSpan);\n        }\n        textGroup.appendChild(textElement);\n        svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n        textGroupBoundingBox = _drawTextBackground(textGroup, background);\n    }\n    return Object.assign({}, textGroupBoundingBox, {\n        x,\n        y,\n        height: textGroupBoundingBox.height + padding,\n        width: textGroupBoundingBox.width + padding,\n    });\n}\nfunction _createTextElement(svgDrawingHelper, options) {\n    const { color, fontFamily, fontSize } = options;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textElement = document.createElementNS(svgns, 'text');\n    const noSelectStyle = 'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n    const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n    const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n    textElement.setAttribute('x', '0');\n    textElement.setAttribute('y', '0');\n    textElement.setAttribute('fill', color);\n    textElement.setAttribute('font-family', fontFamily);\n    textElement.setAttribute('font-size', fontSize);\n    textElement.setAttribute('style', combinedStyle);\n    textElement.setAttribute('pointer-events', 'visible');\n    return textElement;\n}\nfunction _createTextSpan(text) {\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textSpanElement = document.createElementNS(svgns, 'tspan');\n    textSpanElement.setAttribute('x', '0');\n    textSpanElement.setAttribute('dy', '1.2em');\n    textSpanElement.textContent = text;\n    return textSpanElement;\n}\nfunction _drawTextBackground(group, color) {\n    let element = group.querySelector('rect.background');\n    if (!color) {\n        if (element) {\n            group.removeChild(element);\n        }\n        return group.getBBox();\n    }\n    if (!element) {\n        element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        element.setAttribute('class', 'background');\n        group.insertBefore(element, group.firstChild);\n    }\n    const bBox = group.getBBox();\n    const attributes = {\n        x: `${bBox.x}`,\n        y: `${bBox.y}`,\n        width: `${bBox.width}`,\n        height: `${bBox.height}`,\n        fill: color,\n    };\n    setAttributesIfNecessary(attributes, element);\n    return bBox;\n}\nexport default drawTextBox;\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = '', zIndex) {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'fan', fanUID);\n    const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    const centerX = center[0];\n    const centerY = center[1];\n    const outerStartX = centerX + outerRadius * Math.cos(startRad);\n    const outerStartY = centerY + outerRadius * Math.sin(startRad);\n    const outerEndX = centerX + outerRadius * Math.cos(endRad);\n    const outerEndY = centerY + outerRadius * Math.sin(endRad);\n    const innerStartX = centerX + innerRadius * Math.cos(startRad);\n    const innerStartY = centerY + innerRadius * Math.sin(startRad);\n    const innerEndX = centerX + innerRadius * Math.cos(endRad);\n    const innerEndY = centerY + innerRadius * Math.sin(endRad);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    let pathData = `M ${outerStartX} ${outerStartY}`;\n    pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;\n    pathData += ` L ${innerEndX} ${innerEndY}`;\n    pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;\n    pathData += ` Z`;\n    const attributes = {\n        d: pathData,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n        'mix-blend-mode': 'normal',\n    };\n    if (existingFanElement) {\n        setAttributesIfNecessary(attributes, existingFanElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newFanElement = document.createElementNS(svgns, 'path');\n        if (dataId !== '') {\n            newFanElement.setAttribute('data-id', dataId);\n        }\n        if (zIndex !== undefined) {\n            newFanElement.style.zIndex = zIndex.toString();\n        }\n        setNewAttributesIfValid(attributes, newFanElement);\n        svgDrawingHelper.appendNode(newFanElement, svgNodeHash);\n    }\n}\nexport default drawFan;\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","export function setAttributesIfNecessary(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const currentValue = svgNode.getAttribute(key);\n        const newValue = attributes[key];\n        if (newValue === undefined || newValue === '') {\n            svgNode.removeAttribute(key);\n        }\n        else if (currentValue !== newValue) {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setAttributesIfNecessary;\n","export function setNewAttributesIfValid(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const newValue = attributes[key];\n        if (newValue !== undefined && newValue !== '') {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setNewAttributesIfValid;\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\nconst onImageRendered = function (evt) {\n    triggerAnnotationRender(evt.detail.element);\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, onImageRendered);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, onImageRendered);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.KEY_DOWN, keyDown);\n    element.addEventListener(Events.KEY_UP, keyUp);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.KEY_DOWN, keyDown);\n    element.removeEventListener(Events.KEY_UP, keyUp);\n};\nconst keyboardToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default keyboardToolEventDispatcher;\n","import Events from '../enums/Events';\nimport { mouseClick, mouseDown, mouseDownActivate, mouseDoubleClick, mouseDrag, mouseMove, mouseUp, mouseWheel, } from './mouseEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.MOUSE_CLICK, mouseClick);\n    element.addEventListener(Events.MOUSE_DOWN, mouseDown);\n    element.addEventListener(Events.MOUSE_DOWN_ACTIVATE, mouseDownActivate);\n    element.addEventListener(Events.MOUSE_DOUBLE_CLICK, mouseDoubleClick);\n    element.addEventListener(Events.MOUSE_DRAG, mouseDrag);\n    element.addEventListener(Events.MOUSE_MOVE, mouseMove);\n    element.addEventListener(Events.MOUSE_UP, mouseUp);\n    element.addEventListener(Events.MOUSE_WHEEL, mouseWheel);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.MOUSE_CLICK, mouseClick);\n    element.removeEventListener(Events.MOUSE_DOWN, mouseDown);\n    element.removeEventListener(Events.MOUSE_DOWN_ACTIVATE, mouseDownActivate);\n    element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, mouseDoubleClick);\n    element.removeEventListener(Events.MOUSE_DRAG, mouseDrag);\n    element.removeEventListener(Events.MOUSE_MOVE, mouseMove);\n    element.removeEventListener(Events.MOUSE_UP, mouseUp);\n    element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel);\n};\nconst mouseToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default mouseToolEventDispatcher;\n","import Events from '../enums/Events';\nimport { touchStart, touchStartActivate, touchDrag, touchEnd, touchTap, touchPress, } from './touchEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.TOUCH_START, touchStart);\n    element.addEventListener(Events.TOUCH_START_ACTIVATE, touchStartActivate);\n    element.addEventListener(Events.TOUCH_DRAG, touchDrag);\n    element.addEventListener(Events.TOUCH_END, touchEnd);\n    element.addEventListener(Events.TOUCH_TAP, touchTap);\n    element.addEventListener(Events.TOUCH_PRESS, touchPress);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.TOUCH_START, touchStart);\n    element.removeEventListener(Events.TOUCH_START_ACTIVATE, touchStartActivate);\n    element.removeEventListener(Events.TOUCH_DRAG, touchDrag);\n    element.removeEventListener(Events.TOUCH_END, touchEnd);\n    element.removeEventListener(Events.TOUCH_PRESS, touchPress);\n};\nconst touchToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default touchToolEventDispatcher;\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, { mouseDoubleClickIgnoreListener, } from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\nfunction disable(element) {\n    element.removeEventListener('dblclick', mouseDoubleClickListener);\n    element.removeEventListener('mousedown', mouseDownListener);\n    element.removeEventListener('mousemove', mouseMoveListener);\n    element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n        capture: true,\n    });\n}\nfunction enable(element) {\n    disable(element);\n    element.addEventListener('dblclick', mouseDoubleClickListener);\n    element.addEventListener('mousedown', mouseDownListener);\n    element.addEventListener('mousemove', mouseMoveListener);\n    element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n        capture: true,\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\nfunction disable(element) {\n    preventGhostClick.disable(element);\n    element.removeEventListener('touchstart', touchStartListener);\n}\nfunction enable(element) {\n    disable(element);\n    preventGhostClick.enable(element);\n    element.addEventListener('touchstart', touchStartListener, {\n        passive: false,\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import wheelListener from './wheelListener';\nfunction enable(element) {\n    disable(element);\n    element.addEventListener('wheel', wheelListener, { passive: false });\n}\nfunction disable(element) {\n    element.removeEventListener('wheel', wheelListener);\n}\nexport default {\n    enable,\n    disable,\n};\n","import { VolumeViewport, getEnabledElementByViewportId, StackViewport, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nimport { performVolumeLabelmapUpdate } from './performVolumeLabelmapUpdate';\nimport { performStackLabelmapUpdate } from './performStackLabelmapUpdate';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { getViewportIdsWithSegmentation } from '../../../stateManagement/segmentation/getViewportIdsWithSegmentation';\nconst onLabelmapSegmentationDataModified = function (evt) {\n    const { segmentationId, modifiedSlicesToUse } = evt.detail;\n    const { representationData } = getSegmentation(segmentationId);\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    const hasVolumeViewport = viewportIds.some((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        return viewport instanceof VolumeViewport;\n    });\n    const hasStackViewport = viewportIds.some((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        return viewport instanceof StackViewport;\n    });\n    const hasBothStackAndVolume = hasVolumeViewport && hasStackViewport;\n    viewportIds.forEach((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        if (viewport instanceof VolumeViewport) {\n            performVolumeLabelmapUpdate({\n                modifiedSlicesToUse: hasBothStackAndVolume ? [] : modifiedSlicesToUse,\n                representationData,\n                type: SegmentationRepresentations.Labelmap,\n            });\n        }\n        if (viewport instanceof StackViewport) {\n            performStackLabelmapUpdate({\n                viewportIds,\n                segmentationId,\n            });\n        }\n    });\n};\nexport default onLabelmapSegmentationDataModified;\n","import { cache } from '@cornerstonejs/core';\nexport function performVolumeLabelmapUpdate({ modifiedSlicesToUse, representationData, type, }) {\n    const segmentationVolume = cache.getVolume(representationData[type].volumeId);\n    if (!segmentationVolume) {\n        console.warn('segmentation not found in cache');\n        return;\n    }\n    const { imageData, vtkOpenGLTexture } = segmentationVolume;\n    let slicesToUpdate;\n    if (modifiedSlicesToUse?.length > 0) {\n        slicesToUpdate = modifiedSlicesToUse;\n    }\n    else {\n        const numSlices = imageData.getDimensions()[2];\n        slicesToUpdate = [...Array(numSlices).keys()];\n    }\n    slicesToUpdate.forEach((i) => {\n        vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n    imageData.modified();\n}\n","import { cache, utilities as csUtils, VolumeViewport, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nimport { getLabelmapActorEntries } from '../../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/getSegmentationRepresentation';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nexport function performStackLabelmapUpdate({ viewportIds, segmentationId, }) {\n    viewportIds.forEach((viewportId) => {\n        let representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n        representations.forEach((representation) => {\n            if (representation.segmentationId !== segmentationId) {\n                return;\n            }\n            const enabledElement = getEnabledElementByViewportId(viewportId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            if (viewport instanceof VolumeViewport) {\n                return;\n            }\n            const actorEntries = getLabelmapActorEntries(viewportId, segmentationId);\n            if (!actorEntries?.length) {\n                return;\n            }\n            actorEntries.forEach((actorEntry, i) => {\n                const segImageData = actorEntry.actor.getMapper().getInputData();\n                const currentSegmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n                const segmentationImage = cache.getImage(currentSegmentationImageIds[i]);\n                segImageData.modified();\n                csUtils.updateVTKImageDataWithCornerstoneImage(segImageData, segmentationImage);\n            });\n        });\n    });\n}\n","import { triggerSegmentationRenderBySegmentationId } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport onLabelmapSegmentationDataModified from './labelmap/onLabelmapSegmentationDataModified';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nconst onSegmentationDataModified = function (evt) {\n    const { segmentationId } = evt.detail;\n    const { representationData } = getSegmentation(segmentationId);\n    if (representationData.Labelmap) {\n        onLabelmapSegmentationDataModified(evt);\n    }\n    triggerSegmentationRenderBySegmentationId(segmentationId);\n};\nexport default onSegmentationDataModified;\n","import { triggerSegmentationRenderBySegmentationId } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nconst segmentationModifiedListener = function (evt) {\n    const { segmentationId } = evt.detail;\n    triggerSegmentationRenderBySegmentationId(segmentationId);\n};\nexport default segmentationModifiedListener;\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        let shouldTriggerSegmentationRender = false;\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                shouldTriggerSegmentationRender = true;\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        if (shouldTriggerSegmentationRender) {\n            triggerSegmentationRender(viewportId);\n        }\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport getViewportsForAnnotation from '../../../utilities/getViewportsForAnnotation';\nimport { getAllAnnotations } from '../../../stateManagement/annotation/annotationState';\nimport { areSameSegment, isContourSegmentationAnnotation, } from '../../../utilities/contourSegmentation';\nimport { getToolGroupForViewport } from '../../../store/ToolGroupManager';\nimport { findAllIntersectingContours } from '../../../utilities/contourSegmentation/getIntersectingAnnotations';\nimport { processMultipleIntersections } from '../../../utilities/contourSegmentation/mergeMultipleAnnotations';\nimport { convertContourPolylineToCanvasSpace, createPolylineHole, combinePolylines, } from '../../../utilities/contourSegmentation/sharedOperations';\nimport { Events } from '../../../enums';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default async function contourSegmentationCompletedListener(evt) {\n    const sourceAnnotation = evt.detail\n        .annotation;\n    if (!isContourSegmentationAnnotation(sourceAnnotation)) {\n        return;\n    }\n    const viewport = getViewport(sourceAnnotation);\n    const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(viewport, sourceAnnotation);\n    if (!contourSegmentationAnnotations.length) {\n        triggerEvent(eventTarget, Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {\n            element: viewport.element,\n            sourceAnnotation,\n        });\n        return;\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const intersectingContours = findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations);\n    if (!intersectingContours.length) {\n        triggerEvent(eventTarget, Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {\n            element: viewport.element,\n            sourceAnnotation,\n        });\n        return;\n    }\n    if (intersectingContours.length > 1) {\n        processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours);\n        return;\n    }\n    const { targetAnnotation, targetPolyline, isContourHole } = intersectingContours[0];\n    if (isContourHole) {\n        const { contourHoleProcessingEnabled = false } = evt.detail;\n        if (!contourHoleProcessingEnabled) {\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction isFreehandContourSegToolRegisteredForViewport(viewport, silent = false) {\n    const toolName = 'PlanarFreehandContourSegmentationTool';\n    const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n    let errorMessage;\n    if (!toolGroup) {\n        errorMessage = `ToolGroup not found for viewport ${viewport.id}`;\n    }\n    else if (!toolGroup.hasTool(toolName)) {\n        errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;\n    }\n    else if (!toolGroup.getToolOptions(toolName)) {\n        errorMessage = `Tool ${toolName} must be in active/passive state in ${toolGroup.id} toolGroup`;\n    }\n    if (errorMessage && !silent) {\n        console.warn(errorMessage);\n    }\n    return !errorMessage;\n}\nfunction getViewport(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    const viewportWithToolRegistered = viewports.find((viewport) => isFreehandContourSegToolRegisteredForViewport(viewport, true));\n    return viewportWithToolRegistered ?? viewports[0];\n}\nfunction getValidContourSegmentationAnnotations(viewport, sourceAnnotation) {\n    const { annotationUID: sourceAnnotationUID } = sourceAnnotation;\n    const allAnnotations = getAllAnnotations();\n    return allAnnotations.filter((targetAnnotation) => targetAnnotation.annotationUID &&\n        targetAnnotation.annotationUID !== sourceAnnotationUID &&\n        isContourSegmentationAnnotation(targetAnnotation) &&\n        areSameSegment(targetAnnotation, sourceAnnotation) &&\n        viewport.isReferenceViewable(targetAnnotation.metadata));\n}\n","import * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationCompleted } from './contourSegmentation';\nexport default function annotationCompletedListener(evt) {\n    const annotation = evt.detail.annotation;\n    if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n        contourSegmentationCompleted(evt);\n    }\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nfunction annotationSelectionListener(evt) {\n    const deselectedAnnotation = evt.detail.removed;\n    if (!deselectedAnnotation.length) {\n        return;\n    }\n    const renderingEngines = getRenderingEngines();\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getViewports();\n        const viewportIds = viewports.map((vp) => vp.id);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    });\n}\nexport default annotationSelectionListener;\n","import triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nfunction annotationModifiedListener(evt) {\n    const { viewportId } = evt.detail;\n    triggerAnnotationRenderForViewportIds([viewportId]);\n}\nexport default annotationModifiedListener;\n","import * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationRemoved } from './contourSegmentation';\nexport default function annotationRemovedListener(evt) {\n    const annotation = evt.detail.annotation;\n    if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n        contourSegmentationRemoved(evt);\n    }\n}\n","import { removeContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\nexport default function contourSegmentationRemovedListener(evt) {\n    const annotation = evt.detail.annotation;\n    removeContourSegmentationAnnotation(annotation);\n}\n","import { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nconst segmentationRepresentationModifiedListener = function (evt) {\n    const { viewportId } = evt.detail;\n    triggerSegmentationRender(viewportId);\n};\nexport default segmentationRepresentationModifiedListener;\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport { annotationCompletedListener, annotationRemovedListener, annotationSelectionListener, annotationModifiedListener, segmentationDataModifiedEventListener, segmentationModifiedListener, } from './eventListeners';\nimport { annotationInterpolationEventDispatcher } from './eventDispatchers';\nimport * as ToolGroupManager from './store/ToolGroupManager';\nimport { defaultSegmentationStateManager } from './stateManagement/segmentation/SegmentationStateManager';\nimport segmentationRepresentationModifiedListener from './eventListeners/segmentation/segmentationRepresentationModifiedListener';\nimport { setConfig } from './config';\nlet csToolsInitialized = false;\nexport function init(defaultConfiguration = {}) {\n    if (csToolsInitialized) {\n        return;\n    }\n    setConfig(defaultConfiguration);\n    _addCornerstoneEventListeners();\n    _addCornerstoneToolsEventListeners();\n    csToolsInitialized = true;\n}\nexport function destroy() {\n    _removeCornerstoneEventListeners();\n    _removeCornerstoneToolsEventListeners();\n    ToolGroupManager.destroy();\n    resetCornerstoneToolsState();\n    const annotationManager = getAnnotationManager();\n    const segmentationStateManager = defaultSegmentationStateManager;\n    annotationManager.restoreAnnotations({});\n    segmentationStateManager.resetState();\n    csToolsInitialized = false;\n}\nfunction _addCornerstoneEventListeners() {\n    _removeCornerstoneEventListeners();\n    const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n    const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n    eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n    eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n    annotationInterpolationEventDispatcher.enable();\n}\nfunction _removeCornerstoneEventListeners() {\n    const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n    const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n    eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n    eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n    annotationInterpolationEventDispatcher.disable();\n}\nfunction _addCornerstoneToolsEventListeners() {\n    _removeCornerstoneToolsEventListeners();\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_COMPLETED, annotationCompletedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_MODIFIED, annotationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_REMOVED, annotationRemovedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_MODIFIED, segmentationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener);\n}\nfunction _removeCornerstoneToolsEventListeners() {\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_COMPLETED, annotationCompletedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_MODIFIED, annotationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_MODIFIED, segmentationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener);\n}\nexport default init;\n","import { getEnabledElement, triggerEvent, getRenderingEngine, } from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../../enums';\nimport { draw as drawSvg } from '../../drawingSvg';\nimport getToolsWithModesForElement from '../../utilities/getToolsWithModesForElement';\nconst { Active, Passive, Enabled } = ToolModes;\nclass AnnotationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._renderFlaggedViewports = () => {\n            this._throwIfDestroyed();\n            const elements = Array.from(this._viewportElements.values());\n            for (let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                if (this._needsRender.has(element)) {\n                    this._triggerRender(element);\n                    this._needsRender.delete(element);\n                    if (this._needsRender.size === 0) {\n                        break;\n                    }\n                }\n            }\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            this._render();\n        };\n        this._viewportElements = new Map();\n    }\n    addViewportElement(viewportId, element) {\n        this._viewportElements.set(viewportId, element);\n    }\n    removeViewportElement(viewportId, element) {\n        this._viewportElements.delete(viewportId);\n        this._needsRender.delete(element);\n        this._reset();\n    }\n    renderViewport(element) {\n        this._setViewportsToBeRenderedNextFrame([element]);\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setAllViewportsToBeRenderedNextFrame() {\n        const elements = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            this._needsRender.add(element);\n        });\n        this._renderFlaggedViewports();\n    }\n    _setViewportsToBeRenderedNextFrame(elements) {\n        const elementsEnabled = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            if (elementsEnabled.indexOf(element) !== -1) {\n                this._needsRender.add(element);\n            }\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedViewports);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(element) {\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const renderingEngine = getRenderingEngine(enabledElement.renderingEngineId);\n        if (!renderingEngine) {\n            console.warn('rendering Engine has been destroyed');\n            return;\n        }\n        const enabledTools = getToolsWithModesForElement(element, [\n            Active,\n            Passive,\n            Enabled,\n        ]);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const eventDetail = {\n            element,\n            renderingEngineId,\n            viewportId,\n        };\n        drawSvg(element, (svgDrawingHelper) => {\n            let anyRendered = false;\n            const handleDrawSvg = (tool) => {\n                if (tool.renderAnnotation) {\n                    const rendered = tool.renderAnnotation(enabledElement, svgDrawingHelper);\n                    anyRendered = anyRendered || rendered;\n                }\n            };\n            enabledTools.forEach(handleDrawSvg);\n            if (anyRendered) {\n                triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n            }\n        });\n    }\n    _reset() {\n        window.cancelAnimationFrame(this._animationFrameHandle);\n        this._needsRender.clear();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._setAllViewportsToBeRenderedNextFrame();\n    }\n}\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\nexport { annotationRenderingEngine };\n","import { Enums, eventTarget, getEnabledElement, utilities, } from '@cornerstonejs/core';\nclass FrameOfReferenceSpecificAnnotationManager {\n    constructor(uid) {\n        this.getGroupKey = (annotationGroupSelector) => {\n            if (typeof annotationGroupSelector === 'string') {\n                return annotationGroupSelector;\n            }\n            const element = annotationGroupSelector;\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID');\n            }\n            return enabledElement.FrameOfReferenceUID;\n        };\n        this._imageVolumeModifiedHandler = (evt) => {\n            const eventDetail = evt.detail;\n            const { FrameOfReferenceUID } = eventDetail;\n            const annotations = this.annotations;\n            const frameOfReferenceSpecificAnnotations = annotations[FrameOfReferenceUID];\n            if (!frameOfReferenceSpecificAnnotations) {\n                return;\n            }\n            Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                toolSpecificAnnotations.forEach((annotation) => {\n                    const invalidated = annotation.invalidated;\n                    if (invalidated !== undefined) {\n                        annotation.invalidated = true;\n                    }\n                });\n            });\n        };\n        this.getFramesOfReference = () => {\n            return Object.keys(this.annotations);\n        };\n        this.getAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (!annotations[groupKey]) {\n                return [];\n            }\n            if (toolName) {\n                return annotations[groupKey][toolName]\n                    ? annotations[groupKey][toolName]\n                    : [];\n            }\n            return annotations[groupKey];\n        };\n        this.getAnnotation = (annotationUID) => {\n            const annotations = this.annotations;\n            for (const frameOfReferenceUID in annotations) {\n                const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n                for (const toolName in frameOfReferenceAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n                    for (const annotation of toolSpecificAnnotations) {\n                        if (annotationUID === annotation.annotationUID) {\n                            return annotation;\n                        }\n                    }\n                }\n            }\n        };\n        this.getNumberOfAnnotations = (groupKey, toolName) => {\n            const annotations = this.getAnnotations(groupKey, toolName);\n            if (!annotations.length) {\n                return 0;\n            }\n            if (toolName) {\n                return annotations.length;\n            }\n            let total = 0;\n            for (const toolName in annotations) {\n                total += annotations[toolName].length;\n            }\n            return total;\n        };\n        this.addAnnotation = (annotation, groupKey) => {\n            const { metadata } = annotation;\n            const { FrameOfReferenceUID, toolName } = metadata;\n            groupKey = groupKey || FrameOfReferenceUID;\n            const annotations = this.annotations;\n            let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            if (!frameOfReferenceSpecificAnnotations) {\n                annotations[groupKey] = {};\n                frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            }\n            let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            if (!toolSpecificAnnotations) {\n                frameOfReferenceSpecificAnnotations[toolName] = [];\n                toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            }\n            if (this.preprocessingFn) {\n                annotation = this.preprocessingFn(annotation);\n            }\n            toolSpecificAnnotations.push(annotation);\n        };\n        this.removeAnnotation = (annotationUID) => {\n            const { annotations } = this;\n            for (const groupKey in annotations) {\n                const groupAnnotations = annotations[groupKey];\n                for (const toolName in groupAnnotations) {\n                    const toolAnnotations = groupAnnotations[toolName];\n                    const index = toolAnnotations.findIndex((annotation) => annotation.annotationUID === annotationUID);\n                    if (index !== -1) {\n                        toolAnnotations.splice(index, 1);\n                        if (toolAnnotations.length === 0) {\n                            delete groupAnnotations[toolName];\n                        }\n                    }\n                }\n                if (Object.keys(groupAnnotations).length === 0) {\n                    delete annotations[groupKey];\n                }\n            }\n        };\n        this.removeAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            const removedAnnotations = [];\n            if (!annotations[groupKey]) {\n                return removedAnnotations;\n            }\n            if (toolName) {\n                const annotationsForTool = annotations[groupKey][toolName];\n                for (const annotation of annotationsForTool) {\n                    this.removeAnnotation(annotation.annotationUID);\n                    removedAnnotations.push(annotation);\n                }\n            }\n            else {\n                for (const toolName in annotations[groupKey]) {\n                    const annotationsForTool = annotations[groupKey][toolName];\n                    for (const annotation of annotationsForTool) {\n                        this.removeAnnotation(annotation.annotationUID);\n                        removedAnnotations.push(annotation);\n                    }\n                }\n            }\n            return removedAnnotations;\n        };\n        this.saveAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    return;\n                }\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                return structuredClone(toolSpecificAnnotations);\n            }\n            else if (groupKey) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                return structuredClone(frameOfReferenceSpecificAnnotations);\n            }\n            return structuredClone(annotations);\n        };\n        this.restoreAnnotations = (state, groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    annotations[groupKey] = {};\n                    frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                }\n                frameOfReferenceSpecificAnnotations[toolName] = state;\n            }\n            else if (groupKey) {\n                annotations[groupKey] = state;\n            }\n            else {\n                this.annotations = structuredClone(state);\n            }\n        };\n        this.getAllAnnotations = () => {\n            return Object.values(this.annotations)\n                .map((frameOfReferenceSpecificAnnotations) => Object.values(frameOfReferenceSpecificAnnotations))\n                .flat(2);\n        };\n        this.getNumberOfAllAnnotations = () => {\n            let count = 0;\n            const annotations = this.annotations;\n            for (const groupKey in annotations) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                for (const toolName in frameOfReferenceSpecificAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                    count += toolSpecificAnnotations.length;\n                }\n            }\n            return count;\n        };\n        this.removeAllAnnotations = () => {\n            const removedAnnotations = [];\n            for (const annotation of this.getAllAnnotations()) {\n                this.removeAnnotation(annotation.annotationUID);\n                removedAnnotations.push(annotation);\n            }\n            return removedAnnotations;\n        };\n        if (!uid) {\n            uid = utilities.uuidv4();\n        }\n        this.annotations = {};\n        this.uid = uid;\n        eventTarget.addEventListener(Enums.Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedHandler);\n    }\n    setPreprocessingFn(preprocessingFn) {\n        this.preprocessingFn = preprocessingFn;\n    }\n}\nconst defaultFrameOfReferenceSpecificAnnotationManager = new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './annotationState';\nconst globalLockedAnnotationUIDsSet = new Set();\nfunction setAnnotationLocked(annotationUID, locked = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (locked) {\n            lock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n        else {\n            unlock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction unlockAllAnnotations() {\n    const detail = makeEventDetail();\n    clearLockedAnnotationsSet(globalLockedAnnotationUIDsSet, detail);\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction getAnnotationsLocked() {\n    return Array.from(globalLockedAnnotationUIDsSet);\n}\nfunction isAnnotationLocked(annotationUID) {\n    return globalLockedAnnotationUIDsSet.has(annotationUID);\n}\nfunction getAnnotationsLockedCount() {\n    return globalLockedAnnotationUIDsSet.size;\n}\nfunction checkAndSetAnnotationLocked(annotationUID) {\n    const isLocked = isAnnotationLocked(annotationUID);\n    setAnnotationLocked(annotationUID, isLocked);\n    return isLocked;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        locked: [],\n    });\n}\nfunction lock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (!lockedAnnotationUIDsSet.has(annotationUID)) {\n        lockedAnnotationUIDsSet.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = true;\n        }\n    }\n}\nfunction unlock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (lockedAnnotationUIDsSet.delete(annotationUID)) {\n        detail.removed.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = false;\n        }\n    }\n}\nfunction clearLockedAnnotationsSet(lockedAnnotationUIDsSet, detail) {\n    lockedAnnotationUIDsSet.forEach((annotationUID) => {\n        unlock(annotationUID, lockedAnnotationUIDsSet, detail);\n    });\n}\nfunction publish(detail, lockedAnnotationUIDsSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        lockedAnnotationUIDsSet.forEach((item) => void detail.locked.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n    }\n}\nexport { setAnnotationLocked, getAnnotationsLocked, getAnnotationsLockedCount, unlockAllAnnotations, isAnnotationLocked, checkAndSetAnnotationLocked, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './annotationState';\nconst selectedAnnotationUIDs = new Set();\nfunction setAnnotationSelected(annotationUID, selected = true, preserveSelected = false) {\n    if (selected) {\n        selectAnnotation(annotationUID, preserveSelected);\n    }\n    else {\n        deselectAnnotation(annotationUID);\n    }\n}\nfunction selectAnnotation(annotationUID, preserveSelected = false) {\n    const detail = makeEventDetail();\n    if (!preserveSelected) {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n        selectedAnnotationUIDs.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction deselectAnnotation(annotationUID) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (selectedAnnotationUIDs.delete(annotationUID)) {\n            detail.removed.push(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            annotation.isSelected = false;\n        }\n    }\n    else {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelected() {\n    return Array.from(selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelectedByToolName(toolName) {\n    return getAnnotationsSelected().filter((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        return annotation?.metadata?.toolName === toolName;\n    });\n}\nfunction isAnnotationSelected(annotationUID) {\n    return selectedAnnotationUIDs.has(annotationUID);\n}\nfunction getAnnotationsSelectedCount() {\n    return selectedAnnotationUIDs.size;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        selection: [],\n    });\n}\nfunction clearSelectionSet(selectionSet, detail) {\n    selectionSet.forEach((value) => {\n        if (selectionSet.delete(value)) {\n            detail.removed.push(value);\n            const annotation = getAnnotation(value);\n            if (annotation) {\n                annotation.isSelected = false;\n            }\n        }\n    });\n}\nfunction publish(detail, selectionSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        selectionSet.forEach((item) => void detail.selection.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n    }\n}\nexport { setAnnotationSelected, getAnnotationsSelected, getAnnotationsSelectedByToolName, getAnnotationsSelectedCount, deselectAnnotation, isAnnotationSelected, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, } from './helpers/state';\nlet defaultManager;\nfunction getAnnotationManager() {\n    return defaultManager;\n}\nfunction setAnnotationManager(annotationManager) {\n    defaultManager = annotationManager;\n}\nfunction getAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getAnnotations(groupKey, toolName);\n}\nfunction getAnnotation(annotationUID) {\n    const manager = getAnnotationManager();\n    return manager.getAnnotation(annotationUID);\n}\nfunction getAllAnnotations() {\n    const manager = getAnnotationManager();\n    return manager.getAllAnnotations();\n}\nfunction clearParentAnnotation(annotation) {\n    const { annotationUID: childUID, parentAnnotationUID } = annotation;\n    if (!parentAnnotationUID) {\n        return;\n    }\n    const parentAnnotation = getAnnotation(parentAnnotationUID);\n    const childUIDIndex = parentAnnotation.childAnnotationUIDs.indexOf(childUID);\n    parentAnnotation.childAnnotationUIDs.splice(childUIDIndex, 1);\n    annotation.parentAnnotationUID = undefined;\n}\nfunction addChildAnnotation(parentAnnotation, childAnnotation) {\n    const { annotationUID: parentUID } = parentAnnotation;\n    const { annotationUID: childUID } = childAnnotation;\n    clearParentAnnotation(childAnnotation);\n    if (!parentAnnotation.childAnnotationUIDs) {\n        parentAnnotation.childAnnotationUIDs = [];\n    }\n    if (parentAnnotation.childAnnotationUIDs.includes(childUID)) {\n        return;\n    }\n    parentAnnotation.childAnnotationUIDs.push(childUID);\n    childAnnotation.parentAnnotationUID = parentUID;\n}\nfunction getParentAnnotation(annotation) {\n    return annotation.parentAnnotationUID\n        ? getAnnotation(annotation.parentAnnotationUID)\n        : undefined;\n}\nfunction getChildAnnotations(annotation) {\n    return (annotation.childAnnotationUIDs?.map((childAnnotationUID) => getAnnotation(childAnnotationUID)) ?? []);\n}\nfunction addAnnotation(annotation, annotationGroupSelector) {\n    if (!annotation.annotationUID) {\n        annotation.annotationUID = csUtils.uuidv4();\n    }\n    const manager = getAnnotationManager();\n    if (annotationGroupSelector instanceof HTMLDivElement) {\n        const groupKey = manager.getGroupKey(annotationGroupSelector);\n        manager.addAnnotation(annotation, groupKey);\n        triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n    }\n    else {\n        manager.addAnnotation(annotation, undefined);\n        triggerAnnotationAddedForFOR(annotation);\n    }\n    return annotation.annotationUID;\n}\nfunction getNumberOfAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getNumberOfAnnotations(groupKey, toolName);\n}\nfunction removeAnnotation(annotationUID) {\n    if (!annotationUID) {\n        return;\n    }\n    const manager = getAnnotationManager();\n    const annotation = manager.getAnnotation(annotationUID);\n    if (!annotation) {\n        return;\n    }\n    annotation.childAnnotationUIDs?.forEach((childAnnotationUID) => removeAnnotation(childAnnotationUID));\n    manager.removeAnnotation(annotationUID);\n    triggerAnnotationRemoved({ annotation, annotationManagerUID: manager.uid });\n}\nfunction removeAllAnnotations() {\n    const manager = getAnnotationManager();\n    const removedAnnotations = manager.removeAllAnnotations();\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction removeAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    const removedAnnotations = manager.removeAnnotations(groupKey, toolName);\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction invalidateAnnotation(annotation) {\n    let currAnnotation = annotation;\n    while (currAnnotation) {\n        currAnnotation.invalidated = true;\n        currAnnotation = currAnnotation.parentAnnotationUID\n            ? getAnnotation(currAnnotation.parentAnnotationUID)\n            : undefined;\n    }\n}\nexport { getAllAnnotations, getAnnotations, getParentAnnotation, getChildAnnotations, clearParentAnnotation, addChildAnnotation, getNumberOfAnnotations, addAnnotation, removeAnnotation, removeAnnotations, removeAllAnnotations, setAnnotationManager, getAnnotationManager, invalidateAnnotation, getAnnotation, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { isAnnotationSelected, deselectAnnotation, } from './annotationSelection';\nimport { getAnnotation } from './annotationState';\nconst globalHiddenAnnotationUIDsSet = new Set();\nfunction setAnnotationVisibility(annotationUID, visible = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (visible) {\n            show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n        else {\n            hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail);\n}\nfunction showAllAnnotations() {\n    const detail = makeEventDetail();\n    globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n        show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    });\n    publish(detail);\n}\nfunction isAnnotationVisible(annotationUID) {\n    const annotation = getAnnotation(annotationUID);\n    if (annotation) {\n        return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    }\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        lastVisible: [],\n        lastHidden: [],\n        hidden: [],\n    });\n}\nfunction show(annotationUID, annotationUIDsSet, detail) {\n    if (annotationUIDsSet.delete(annotationUID)) {\n        detail.lastVisible.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        annotation.isVisible = true;\n    }\n}\nfunction hide(annotationUID, annotationUIDsSet, detail) {\n    if (!annotationUIDsSet.has(annotationUID)) {\n        annotationUIDsSet.add(annotationUID);\n        if (isAnnotationSelected(annotationUID)) {\n            deselectAnnotation(annotationUID);\n        }\n        detail.lastHidden.push(annotationUID);\n    }\n}\nfunction publish(detail) {\n    if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n        globalHiddenAnnotationUIDsSet.forEach((item) => void detail.hidden.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n    }\n}\nfunction checkAndSetAnnotationVisibility(annotationUID) {\n    const isVisible = !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    setAnnotationVisibility(annotationUID, isVisible);\n    return isVisible;\n}\nexport { setAnnotationVisibility, showAllAnnotations, isAnnotationVisible, checkAndSetAnnotationVisibility, };\n","class ToolStyle {\n    constructor() {\n        const defaultConfig = {\n            color: 'rgb(255, 255, 0)',\n            colorHighlighted: 'rgb(0, 255, 0)',\n            colorSelected: 'rgb(0, 220, 0)',\n            colorLocked: 'rgb(209, 193, 90)',\n            lineWidth: '1',\n            lineDash: '',\n            shadow: true,\n            textBoxVisibility: true,\n            textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            textBoxFontSize: '14px',\n            textBoxColor: 'rgb(255, 255, 0)',\n            textBoxColorHighlighted: 'rgb(0, 255, 0)',\n            textBoxColorSelected: 'rgb(0, 255, 0)',\n            textBoxColorLocked: 'rgb(209, 193, 90)',\n            textBoxBackground: '',\n            textBoxLinkLineWidth: '1',\n            textBoxLinkLineDash: '2,3',\n            textBoxShadow: true,\n            markerSize: '10',\n            angleArcLineDash: '',\n        };\n        this._initializeConfig(defaultConfig);\n    }\n    getAnnotationToolStyles(annotationUID) {\n        return this.config.annotations && this.config.annotations[annotationUID];\n    }\n    getViewportToolStyles(viewportId) {\n        return this.config.viewports && this.config.viewports[viewportId];\n    }\n    getToolGroupToolStyles(toolGroupId) {\n        return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n    }\n    getDefaultToolStyles() {\n        return this.config.default;\n    }\n    setAnnotationStyles(annotationUID, styles) {\n        let annotationSpecificStyles = this.config.annotations;\n        if (!annotationSpecificStyles) {\n            this.config = {\n                ...this.config,\n                annotations: {},\n            };\n            annotationSpecificStyles = this.config.annotations;\n        }\n        annotationSpecificStyles[annotationUID] = styles;\n    }\n    setViewportToolStyles(viewportId, styles) {\n        let viewportSpecificStyles = this.config.viewports;\n        if (!viewportSpecificStyles) {\n            this.config = {\n                ...this.config,\n                viewports: {},\n            };\n            viewportSpecificStyles = this.config.viewports;\n        }\n        viewportSpecificStyles[viewportId] = styles;\n    }\n    setToolGroupToolStyles(toolGroupId, styles) {\n        let toolGroupSpecificStyles = this.config.toolGroups;\n        if (!toolGroupSpecificStyles) {\n            this.config = {\n                ...this.config,\n                toolGroups: {},\n            };\n            toolGroupSpecificStyles = this.config.toolGroups;\n        }\n        toolGroupSpecificStyles[toolGroupId] = styles;\n    }\n    setDefaultToolStyles(styles) {\n        this.config.default = styles;\n    }\n    getStyleProperty(toolStyle, specifications) {\n        const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n        return this._getToolStyle(toolStyle, annotationUID, viewportId, toolGroupId, toolName);\n    }\n    _getToolStyle(property, annotationUID, viewportId, toolGroupId, toolName) {\n        if (annotationUID) {\n            const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);\n            if (annotationToolStyles) {\n                if (annotationToolStyles[property] !== undefined) {\n                    return annotationToolStyles[property];\n                }\n            }\n        }\n        if (viewportId) {\n            const viewportToolStyles = this.getViewportToolStyles(viewportId);\n            if (viewportToolStyles) {\n                if (viewportToolStyles[toolName] &&\n                    viewportToolStyles[toolName][property] !== undefined) {\n                    return viewportToolStyles[toolName][property];\n                }\n                if (viewportToolStyles.global &&\n                    viewportToolStyles.global[property] !== undefined) {\n                    return viewportToolStyles.global[property];\n                }\n            }\n        }\n        if (toolGroupId) {\n            const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);\n            if (toolGroupToolStyles) {\n                if (toolGroupToolStyles[toolName] &&\n                    toolGroupToolStyles[toolName][property] !== undefined) {\n                    return toolGroupToolStyles[toolName][property];\n                }\n                if (toolGroupToolStyles.global &&\n                    toolGroupToolStyles.global[property] !== undefined) {\n                    return toolGroupToolStyles.global[property];\n                }\n            }\n        }\n        const globalStyles = this.getDefaultToolStyles();\n        if (globalStyles[toolName] &&\n            globalStyles[toolName][property] !== undefined) {\n            return globalStyles[toolName][property];\n        }\n        if (globalStyles.global && globalStyles.global[property] !== undefined) {\n            return globalStyles.global[property];\n        }\n    }\n    _initializeConfig(config) {\n        const toolStyles = {};\n        for (const name in config) {\n            toolStyles[name] = config[name];\n        }\n        this.config = {\n            default: {\n                global: toolStyles,\n            },\n        };\n    }\n}\nconst toolStyle = new ToolStyle();\nexport default toolStyle;\n","import toolStyle from './ToolStyle';\nfunction getHierarchalPropertyStyles(property, state, mode) {\n    const list = [`${property}`];\n    if (state) {\n        list.push(`${list[0]}${state}`);\n    }\n    if (mode) {\n        list.push(`${list[list.length - 1]}${mode}`);\n    }\n    return list;\n}\nfunction getStyleProperty(property, styleSpecifier, state, mode) {\n    const alternatives = getHierarchalPropertyStyles(property, state, mode);\n    for (let i = alternatives.length - 1; i >= 0; --i) {\n        const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n        if (style !== undefined) {\n            return style;\n        }\n    }\n}\nexport { getStyleProperty };\n","import { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\nfunction getState(annotation) {\n    if (annotation) {\n        if (annotation.data && annotation.highlighted) {\n            return AnnotationStyleStates.Highlighted;\n        }\n        if (isAnnotationSelected(annotation.annotationUID)) {\n            return AnnotationStyleStates.Selected;\n        }\n        if (isAnnotationLocked(annotation.annotationUID)) {\n            return AnnotationStyleStates.Locked;\n        }\n        if (annotation.data && annotation.autoGenerated) {\n            return AnnotationStyleStates.AutoGenerated;\n        }\n    }\n    return AnnotationStyleStates.Default;\n}\nexport default getState;\n","import { getStyleProperty } from './helpers';\nfunction getFont(styleSpecifier, state, mode) {\n    const fontSize = getStyleProperty('textBoxFontSize', styleSpecifier, state, mode);\n    const fontFamily = getStyleProperty('textBoxFontFamily', styleSpecifier, state, mode);\n    return `${fontSize}px ${fontFamily}`;\n}\nexport default getFont;\n","import { getEnabledElement, triggerEvent, eventTarget, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { Events, ChangeTypes } from '../../../enums';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nfunction triggerAnnotationAddedForElement(annotation, element) {\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewportId } = enabledElement;\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId: renderingEngine.id,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationAddedForFOR(annotation) {\n    const { toolName } = annotation.metadata;\n    const toolGroups = getToolGroupsWithToolName(toolName);\n    if (!toolGroups.length) {\n        return;\n    }\n    const viewportsToRender = [];\n    toolGroups.forEach((toolGroup) => {\n        toolGroup.viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const { FrameOfReferenceUID } = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n                viewportsToRender.push(viewportInfo);\n            }\n        });\n    });\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = { annotation };\n    if (!viewportsToRender.length) {\n        triggerEvent(eventTarget, eventType, eventDetail);\n        return;\n    }\n    viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n        eventDetail.viewportId = viewportId;\n        eventDetail.renderingEngineId = renderingEngineId;\n        triggerEvent(eventTarget, eventType, eventDetail);\n    });\n}\nfunction triggerAnnotationRemoved(eventDetail) {\n    const eventType = Events.ANNOTATION_REMOVED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationModified(annotation, element, changeType = ChangeTypes.HandlesUpdated) {\n    const enabledElement = element && getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement || {};\n    const eventType = Events.ANNOTATION_MODIFIED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n        changeType,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationCompleted(annotation) {\n    const eventDetail = {\n        annotation,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled = false) {\n    const eventDetail = {\n        annotation,\n        contourHoleProcessingEnabled,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction _triggerAnnotationCompleted(eventDetail) {\n    const eventType = Events.ANNOTATION_COMPLETED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, triggerAnnotationModified, triggerAnnotationCompleted, triggerContourAnnotationCompleted, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { getAnnotation } from './annotationState';\nexport default class AnnotationGroup {\n    constructor() {\n        this.annotationUIDs = new Set();\n        this._isVisible = true;\n        this.visibleFilter = this.unboundVisibleFilter.bind(this);\n    }\n    unboundVisibleFilter(uid) {\n        return !this._isVisible || !this.annotationUIDs.has(uid);\n    }\n    has(uid) {\n        return this.annotationUIDs.has(uid);\n    }\n    setVisible(isVisible = true, baseEvent, filter) {\n        if (this._isVisible === isVisible) {\n            return;\n        }\n        this._isVisible = isVisible;\n        this.annotationUIDs.forEach((uid) => {\n            const annotation = getAnnotation(uid);\n            if (!annotation) {\n                this.annotationUIDs.delete(uid);\n                return;\n            }\n            if (annotation.isVisible === isVisible) {\n                return;\n            }\n            if (!isVisible && filter?.(uid) === false) {\n                return;\n            }\n            annotation.isVisible = isVisible;\n            const eventDetail = {\n                ...baseEvent,\n                annotation,\n            };\n            triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n        });\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n    findNearby(uid, direction) {\n        const uids = [...this.annotationUIDs];\n        if (uids.length === 0) {\n            return null;\n        }\n        if (!uid) {\n            return uids[direction === 1 ? 0 : uids.length - 1];\n        }\n        const index = uids.indexOf(uid);\n        if (index === -1 ||\n            index + direction < 0 ||\n            index + direction >= uids.length) {\n            return null;\n        }\n        return uids[index + direction];\n    }\n    add(...annotationUIDs) {\n        annotationUIDs.forEach((annotationUID) => this.annotationUIDs.add(annotationUID));\n    }\n    remove(...annotationUIDs) {\n        annotationUIDs.forEach((annotationUID) => this.annotationUIDs.delete(annotationUID));\n    }\n    clear() {\n        this.annotationUIDs.clear();\n    }\n}\n","import * as config from './config';\nimport * as locking from './annotationLocking';\nimport * as selection from './annotationSelection';\nimport * as annotationState from './annotationState';\nimport * as annotationStateHelpers from './helpers/state';\nimport * as visibility from './annotationVisibility';\nimport FrameOfReferenceSpecificAnnotationManager from './FrameOfReferenceSpecificAnnotationManager';\nimport AnnotationGroup from './AnnotationGroup';\nimport { resetAnnotationManager } from './resetAnnotationManager';\nconst state = {\n    ...annotationState,\n    ...annotationStateHelpers,\n    resetAnnotationManager,\n};\nexport { config, locking, selection, state, visibility, FrameOfReferenceSpecificAnnotationManager, AnnotationGroup, };\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._pendingRenderQueue = [];\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            if (this._pendingRenderQueue.length > 0) {\n                const nextViewportIds = this._pendingRenderQueue.shift();\n                if (nextViewportIds && nextViewportIds.length > 0) {\n                    this._setViewportsToBeRenderedNextFrame(nextViewportIds);\n                }\n            }\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        if (this._animationFrameSet) {\n            this._pendingRenderQueue.push(viewportIds);\n            return;\n        }\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            const { label, locked, cachedStats, active, ...rest } = segment;\n            const normalizedSegment = {\n                segmentIndex: Number(segmentIndex),\n                label: label ?? `Segment ${segmentIndex}`,\n                locked: locked ?? false,\n                cachedStats: cachedStats ?? {},\n                active: active ?? false,\n                ...rest,\n            };\n            normalizedSegments[segmentIndex] = normalizedSegment;\n        });\n    }\n    else if (type === SegmentationRepresentations.Contour) {\n        normalizeContourSegments(normalizedSegments, data);\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeContourSegments(normalizedSegments, contourData) {\n    const { geometryIds } = contourData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { getSegmentation } from './getSegmentation';\nexport function getActiveSegmentIndex(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation) {\n        const activeSegmentIndex = Object.keys(segmentation.segments).find((segmentIndex) => segmentation.segments[segmentIndex].active);\n        return activeSegmentIndex ? Number(activeSegmentIndex) : undefined;\n    }\n    return undefined;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getColorLUT(index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getColorLUT(index);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n    const imageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n    return imageIds[0];\n}\nexport function getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n}\nexport function getLabelmapImageIdsForImageId(imageId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getLabelmapImageIdsForImageId(imageId, segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentation(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportIdsWithSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportSegRepresentations = state.viewportSegRepresentations;\n    const viewportIdsWithSegmentation = Object.entries(viewportSegRepresentations)\n        .filter(([, viewportSegmentations]) => viewportSegmentations.some((segRep) => segRep.segmentationId === segmentationId))\n        .map(([viewportId]) => viewportId);\n    return viewportIdsWithSegmentation;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nfunction getActorEntry(viewportId, segmentationId, filterFn) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngine, viewport } = enabledElement;\n    if (!renderingEngine || !viewport) {\n        return;\n    }\n    const actors = viewport.getActors();\n    const filteredActors = actors.filter(filterFn);\n    return filteredActors.length > 0 ? filteredActors[0] : undefined;\n}\nfunction getActorEntries(viewportId, filterFn) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngine, viewport } = enabledElement;\n    if (!renderingEngine || !viewport) {\n        return;\n    }\n    const actors = viewport.getActors();\n    const filteredActors = actors.filter(filterFn);\n    return filteredActors.length > 0 ? filteredActors : undefined;\n}\nexport function getLabelmapActorUID(viewportId, segmentationId) {\n    const actorEntry = getLabelmapActorEntry(viewportId, segmentationId);\n    return actorEntry?.uid;\n}\nexport function getLabelmapActorEntries(viewportId, segmentationId) {\n    return getActorEntries(viewportId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations.Labelmap}`));\n}\nexport function getLabelmapActorEntry(viewportId, segmentationId) {\n    return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations.Labelmap}`));\n}\nexport function getSurfaceActorEntry(viewportId, segmentationId, segmentIndex) {\n    return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID ===\n        getSurfaceRepresentationUID(segmentationId, segmentIndex));\n}\nexport function getSurfaceRepresentationUID(segmentationId, segmentIndex) {\n    return `${segmentationId}-${SegmentationRepresentations.Surface}-${segmentIndex}`;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nexport function updateSegmentations(segmentationUpdateArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationUpdateArray.forEach((segmentationUpdate) => {\n        segmentationStateManager.updateSegmentation(segmentationUpdate.segmentationId, segmentationUpdate.payload);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentationUpdate.segmentationId);\n        }\n    });\n}\n","import { getSegmentationRepresentation, getSegmentationRepresentations, } from '../getSegmentationRepresentation';\nimport { setSegmentationRepresentationVisibility as _setSegmentationRepresentationVisibility } from '../setSegmentationRepresentationVisibility';\nimport { getSegmentationRepresentationVisibility as _getSegmentationRepresentationVisibility } from '../getSegmentationRepresentationVisibility';\nimport { triggerSegmentationRenderBySegmentationId } from '../SegmentationRenderingEngine';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction setSegmentationRepresentationVisibility(viewportId, specifier, visibility) {\n    const representations = getSegmentationRepresentations(viewportId, specifier);\n    if (!representations) {\n        return;\n    }\n    representations.forEach((representation) => {\n        _setSegmentationRepresentationVisibility(viewportId, {\n            segmentationId: representation.segmentationId,\n            type: representation.type,\n        }, visibility);\n    });\n}\nfunction getSegmentationRepresentationVisibility(viewportId, specifier) {\n    return _getSegmentationRepresentationVisibility(viewportId, specifier);\n}\nfunction setSegmentIndexVisibility(viewportId, specifier, segmentIndex, visibility) {\n    const representations = getSegmentationRepresentations(viewportId, specifier);\n    if (!representations) {\n        return;\n    }\n    representations.forEach((representation) => {\n        if (!representation.segments || !representation.segments[segmentIndex]) {\n            return;\n        }\n        representation.segments[segmentIndex].visible = visibility;\n    });\n    triggerSegmentationRenderBySegmentationId(specifier.segmentationId);\n    triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId);\n}\nfunction getSegmentIndexVisibility(viewportId, specifier, segmentIndex) {\n    const hiddenSegments = getHiddenSegmentIndices(viewportId, specifier);\n    return !hiddenSegments.has(segmentIndex);\n}\nfunction getHiddenSegmentIndices(viewportId, specifier) {\n    const representation = getSegmentationRepresentation(viewportId, specifier);\n    if (!representation) {\n        return new Set();\n    }\n    const segmentsHidden = Object.entries(representation.segments).reduce((acc, [segmentIndex, segment]) => {\n        if (!segment.visible) {\n            acc.add(Number(segmentIndex));\n        }\n        return acc;\n    }, new Set());\n    return segmentsHidden;\n}\nexport { setSegmentationRepresentationVisibility, getSegmentationRepresentationVisibility, setSegmentIndexVisibility, getSegmentIndexVisibility, getHiddenSegmentIndices, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setSegmentationRepresentationVisibility(viewportId, specifier, visible);\n}\n","import { getSegmentations } from '../getSegmentations';\nimport { getViewportSegmentations } from '../getViewportSegmentations';\nimport { triggerSegmentationRender } from '../SegmentationRenderingEngine';\nimport { segmentationStyle } from '../SegmentationStyle';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction getStyle(specifier) {\n    return segmentationStyle.getStyle(specifier);\n}\nfunction setStyle(specifier, style) {\n    segmentationStyle.setStyle(specifier, style);\n    if (!specifier.viewportId && !specifier.segmentationId) {\n        const segmentations = getSegmentations();\n        segmentations.forEach((segmentation) => {\n            triggerSegmentationRender(segmentation.segmentationId);\n        });\n    }\n    triggerSegmentationRepresentationModified(specifier.viewportId, specifier.segmentationId, specifier.type);\n}\nfunction setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n    segmentationStyle.setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations);\n    triggerSegmentationRender(viewportId);\n    const segmentations = getViewportSegmentations(viewportId);\n    segmentations.forEach((segmentation) => {\n        triggerSegmentationRepresentationModified(viewportId, segmentation.segmentationId);\n    });\n}\nfunction getRenderInactiveSegmentations(viewportId) {\n    return segmentationStyle.getRenderInactiveSegmentations(viewportId);\n}\nfunction resetToGlobalStyle() {\n    segmentationStyle.resetToGlobalStyle();\n    triggerSegmentationRender();\n}\nfunction hasCustomStyle(specifier) {\n    return segmentationStyle.hasCustomStyle(specifier);\n}\nexport { getStyle, setStyle, setRenderInactiveSegmentations, getRenderInactiveSegmentations, resetToGlobalStyle, hasCustomStyle, };\n","import { getAnnotation } from '../../annotation/annotationState';\nexport function getAnnotationMapFromSegmentation(contourRepresentationData, options = {}) {\n    const annotationMap = contourRepresentationData.annotationUIDsMap;\n    const segmentIndices = options.segmentIndices?.length\n        ? options.segmentIndices\n        : Array.from(annotationMap.keys());\n    const annotationUIDsInSegmentMap = new Map();\n    segmentIndices.forEach((index) => {\n        const annotationUIDsInSegment = annotationMap.get(index);\n        let uids = Array.from(annotationUIDsInSegment);\n        uids = uids.filter((uid) => !getAnnotation(uid).parentAnnotationUID);\n        const annotations = uids.map((uid) => {\n            const annotation = getAnnotation(uid);\n            const hasChildAnnotations = annotation.childAnnotationUIDs?.length;\n            const childPolylinesInformation = hasChildAnnotations &&\n                annotation.childAnnotationUIDs.map((childUID) => {\n                    const childAnnotation = getAnnotation(childUID);\n                    return {\n                        polyline: childAnnotation.data.contour.polyline,\n                        isClosed: childAnnotation.data.contour.closed,\n                    };\n                });\n            const holesClosed = hasChildAnnotations &&\n                childPolylinesInformation.map((childInfo) => childInfo.isClosed);\n            const childPolylines = hasChildAnnotations &&\n                childPolylinesInformation.map((childInfo) => childInfo.polyline);\n            return {\n                polyline: annotation.data.contour.polyline,\n                isClosed: annotation.data.contour.closed,\n                annotationUID: annotation.annotationUID,\n                referencedImageId: annotation.metadata.referencedImageId,\n                holesPolyline: childPolylines,\n                holesUIDs: annotation.childAnnotationUIDs,\n                holesClosed,\n            };\n        });\n        annotationUIDsInSegmentMap.set(index, annotations);\n    });\n    return { segmentIndices, annotationUIDsInSegmentMap };\n}\n","import { getAnnotationMapFromSegmentation, } from './getAnnotationMapFromSegmentation';\nfunction closePolyline(polyline, closed) {\n    if (!polyline || polyline.length === 0) {\n        return [];\n    }\n    if (!closed) {\n        return [...polyline];\n    }\n    const firstPoint = polyline[0];\n    const lastPoint = polyline[polyline.length - 1];\n    const isAlreadyClosed = firstPoint[0] === lastPoint[0] &&\n        firstPoint[1] === lastPoint[1] &&\n        firstPoint[2] === lastPoint[2];\n    if (isAlreadyClosed) {\n        return [...polyline];\n    }\n    return [...polyline, firstPoint];\n}\nexport function getPolylinesMap(contourRepresentationData, segmentIndex) {\n    const { annotationUIDsInSegmentMap } = getAnnotationMapFromSegmentation(contourRepresentationData);\n    if (!annotationUIDsInSegmentMap.has(segmentIndex)) {\n        console.warn(`No contour information found for segmentIndex ${segmentIndex}`);\n        return;\n    }\n    const polylines = new Map();\n    const annotationsInfo = annotationUIDsInSegmentMap.get(segmentIndex);\n    for (const annotationInfo of annotationsInfo) {\n        polylines.set(annotationInfo.annotationUID, closePolyline(annotationInfo.polyline, annotationInfo.isClosed));\n        for (let i = 0; i < annotationInfo.holesUIDs?.length; i++) {\n            polylines.set(annotationInfo.holesUIDs[i], closePolyline(annotationInfo.holesPolyline[i], annotationInfo.holesClosed[i]));\n        }\n    }\n    return polylines;\n}\n","import { getSegmentation } from '../getSegmentation';\nimport { convertContourPolylineToCanvasSpace } from '../../../utilities/contourSegmentation';\nimport { getViewportsAssociatedToSegmentation, getViewportWithMatchingViewPlaneNormal, } from './getViewportAssociatedToSegmentation';\nimport { getPolylinesMap } from './getPolylineMap';\nimport { getAnnotation } from '../../annotation/annotationState';\nexport function extractSegmentPolylines(segmentationId, segmentIndex) {\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    if (!annotationUIDsMap.get(segmentIndex)) {\n        return;\n    }\n    const polyLinesMap = getPolylinesMap(contourRepresentationData, segmentIndex);\n    if (!polyLinesMap) {\n        return;\n    }\n    const keys = Array.from(polyLinesMap?.keys());\n    const polylinesCanvasMap = new Map();\n    for (const key of keys) {\n        const annotation = getAnnotation(key);\n        const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);\n        polylinesCanvasMap.set(key, convertContourPolylineToCanvasSpace(polyLinesMap.get(key), viewport));\n    }\n    return polylinesCanvasMap;\n}\n","import { getAnnotation, invalidateAnnotation, } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport decimate from '../../../utilities/math/polyline/decimate';\nimport { getViewportsAssociatedToSegmentation, getViewportWithMatchingViewPlaneNormal, } from './getViewportAssociatedToSegmentation';\nexport default function decimateContours(segmentationId, segmentIndex, options = { epsilon: 0.1 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    if (!viewports) {\n        console.warn('No viewport associated to the segmentation found');\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    for (const annotationUID of keys) {\n        const annotation = getAnnotation(annotationUID);\n        if (!annotation) {\n            continue;\n        }\n        const polylineCanvas = polylinesCanvasMap.get(annotationUID);\n        const decimatedPolyline2D = decimate(polylineCanvas, options.epsilon);\n        const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);\n        if (viewport) {\n            annotation.data.contour.polyline = decimatedPolyline2D.map((point2D) => viewport.canvasToWorld(point2D));\n            invalidateAnnotation(annotation);\n        }\n    }\n}\n","import { removeContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\nimport { clearParentAnnotation, removeAnnotation, } from '../../annotation/annotationState';\nexport function removeCompleteContourAnnotation(annotation) {\n    if (!annotation) {\n        return;\n    }\n    if (annotation.parentAnnotationUID) {\n        clearParentAnnotation(annotation);\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n}\n","import { findContourHoles } from '../../../utilities/contours';\nimport { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport { removeCompleteContourAnnotation } from './removeCompleteContourAnnotation';\nexport default function removeContourHoles(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const holeDetectionResults = findContourHoles(polylines);\n    if (holeDetectionResults?.length > 0) {\n        holeDetectionResults.forEach((hole) => {\n            hole.holeIndexes.forEach((index) => {\n                const annotation = getAnnotation(keys[index]);\n                removeCompleteContourAnnotation(annotation);\n            });\n        });\n    }\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport findIslands from '../../../utilities/contours/findIslands';\nimport { removeCompleteContourAnnotation } from './removeCompleteContourAnnotation';\nexport default function removeContourIslands(segmentationId, segmentIndex, options = { threshold: 3 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const islands = findIslands(polylines, options.threshold);\n    if (islands?.length > 0) {\n        islands.forEach((index) => {\n            const annotation = getAnnotation(keys[index]);\n            removeCompleteContourAnnotation(annotation);\n        });\n    }\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport interpolateSegmentPoints from '../../../utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints';\nexport default function smoothContours(segmentationId, segmentIndex, options = { knotsRatioPercentage: 30 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        console.warn(`No contours found for segmentation ${segmentationId}`);\n        return;\n    }\n    if (!annotationUIDsMap.has(segmentIndex)) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const annotationList = annotationUIDsMap.get(segmentIndex);\n    annotationList.forEach((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        if (!annotation) {\n            return;\n        }\n        const polyline = annotation.data.contour.polyline;\n        if (!polyline || polyline.length < 3) {\n            return;\n        }\n        const smoothedPolyline = interpolateSegmentPoints(polyline, 0, polyline.length - 1, options.knotsRatioPercentage);\n        annotation.data.contour.polyline = smoothedPolyline;\n    });\n}\n","import { findContourHoles } from '../../../utilities/contours';\nimport { getAnnotation, clearParentAnnotation, } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nexport default function convertContourHoles(segmentationId, segmentIndex, targetSegmentationId, targetSegmentationIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const { annotationUIDsMap } = segmentation?.representationData.Contour || {};\n    if (!annotationUIDsMap) {\n        console.warn(`No annotation map found for segmentation ${segmentationId}`);\n        return;\n    }\n    const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        console.warn(`Segmentation index ${segmentIndex} has no annotations in segmentation ${segmentationId}`);\n        return;\n    }\n    let targetUIDsSet;\n    if (targetSegmentationId && typeof targetSegmentationIndex === 'number') {\n        const targetSegmentation = getSegmentation(targetSegmentationId);\n        if (!targetSegmentation) {\n            console.warn(`Target segmentation ${targetSegmentationId} does not exist.`);\n            return;\n        }\n        if (!targetSegmentation.representationData.Contour) {\n            console.warn(`No contour representation found for target segmentation ${targetSegmentationId}`);\n            return;\n        }\n        targetUIDsSet =\n            targetSegmentation.representationData.Contour.annotationUIDsMap.get(targetSegmentationIndex);\n        if (!targetUIDsSet) {\n            targetUIDsSet = new Set();\n            targetSegmentation.representationData.Contour.annotationUIDsMap.set(targetSegmentationIndex, targetUIDsSet);\n        }\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const holeDetectionResults = findContourHoles(polylines);\n    if (holeDetectionResults?.length > 0) {\n        holeDetectionResults.forEach((hole) => {\n            hole.holeIndexes.forEach((index) => {\n                const annotation = getAnnotation(keys[index]);\n                clearParentAnnotation(annotation);\n                if (targetSegmentationId &&\n                    typeof targetSegmentationIndex === 'number') {\n                    targetUIDsSet.add(annotation.annotationUID);\n                }\n                else {\n                    annotationsUIDsSet.add(annotation.annotationUID);\n                }\n            });\n        });\n    }\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { triggerSegmentationDataModified } from '../triggerSegmentationEvents';\nexport function clearSegmentValue(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation.representationData.Labelmap) {\n        const { representationData } = segmentation;\n        const labelmapData = representationData.Labelmap;\n        if ('imageIds' in labelmapData || 'volumeId' in labelmapData) {\n            const items = 'imageIds' in labelmapData\n                ? labelmapData.imageIds.map((imageId) => cache.getImage(imageId))\n                : [cache.getVolume(labelmapData.volumeId)];\n            items.forEach((item) => {\n                if (!item) {\n                    return;\n                }\n                const { voxelManager } = item;\n                voxelManager.forEach(({ value, index }) => {\n                    if (value === segmentIndex) {\n                        voxelManager.setAtIndex(index, 0);\n                    }\n                });\n            });\n        }\n        triggerSegmentationDataModified(segmentationId);\n    }\n    else {\n        throw new Error('Invalid segmentation type, only labelmap is supported right now');\n    }\n}\n","import { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentation } from './getSegmentation';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { setActiveSegmentIndex } from './segmentIndex';\nimport { updateSegmentations } from './updateSegmentations';\nexport function removeSegment(segmentationId, segmentIndex, options = {\n    setNextSegmentAsActive: true,\n}) {\n    clearSegmentValue(segmentationId, segmentIndex);\n    const isThisSegmentActive = getActiveSegmentIndex(segmentationId) === segmentIndex;\n    const segmentation = getSegmentation(segmentationId);\n    const { segments } = segmentation;\n    delete segments[segmentIndex];\n    const updatedSegments = {\n        ...segments,\n    };\n    updateSegmentations([\n        {\n            segmentationId,\n            payload: {\n                segments: updatedSegments,\n            },\n        },\n    ]);\n    if (isThisSegmentActive && options.setNextSegmentAsActive) {\n        const segmentIndices = Object.keys(segments)\n            .map(Number)\n            .sort((a, b) => a - b);\n        const currentIndex = segmentIndices.indexOf(segmentIndex);\n        const nextSegmentIndex = segmentIndices[currentIndex + 1];\n        const previousSegmentIndex = segmentIndices[currentIndex - 1];\n        if (nextSegmentIndex !== undefined) {\n            setActiveSegmentIndex(segmentationId, nextSegmentIndex);\n        }\n        else if (previousSegmentIndex !== undefined) {\n            setActiveSegmentIndex(segmentationId, previousSegmentIndex);\n        }\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            delete representation.segments[segmentIndex];\n        });\n    });\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getLabelmapImageIds(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentation = getSegmentation(segmentationId);\n    return segmentationStateManager.getLabelmapImageIds(segmentation.representationData);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport * as utilities from './utilities';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, utilities, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getSegmentation } from '../getSegmentation';\nexport function getAnnotationsUIDMapFromSegmentation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        ?.Contour;\n    if (!contourRepresentationData) {\n        return;\n    }\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    return annotationUIDsMap;\n}\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { getViewportIdsWithSegmentation } from '../getViewportIdsWithSegmentation';\nexport function getViewportsAssociatedToSegmentation(segmentationId) {\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    if (viewportIds?.length === 0) {\n        return [];\n    }\n    const viewports = [];\n    for (const viewportId of viewportIds) {\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (viewport) {\n            viewports.push(viewport);\n        }\n    }\n    return viewports;\n}\nexport function getViewportAssociatedToSegmentation(segmentationId) {\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    return viewports.length > 0 ? viewports[0] : undefined;\n}\nexport function getViewportWithMatchingViewPlaneNormal(viewports, annotation, dotThreshold = 0.99) {\n    const annotationViewPlaneNormal = annotation.metadata?.viewPlaneNormal;\n    if (!annotationViewPlaneNormal || !Array.isArray(annotationViewPlaneNormal)) {\n        return undefined;\n    }\n    const normalizedAnnotationNormal = vec3.create();\n    vec3.normalize(normalizedAnnotationNormal, annotationViewPlaneNormal);\n    for (const viewport of viewports) {\n        const camera = viewport.getCamera();\n        if (!camera?.viewPlaneNormal) {\n            continue;\n        }\n        const normalizedCameraNormal = vec3.create();\n        vec3.normalize(normalizedCameraNormal, camera.viewPlaneNormal);\n        const dotProduct = vec3.dot(normalizedAnnotationNormal, normalizedCameraNormal);\n        if (Math.abs(dotProduct) >= dotThreshold) {\n            return viewport;\n        }\n    }\n    return undefined;\n}\n","import { getRenderingEngine, getEnabledElement, eventTarget, Enums, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nclass Synchronizer {\n    constructor(synchronizerId, eventName, eventHandler, options) {\n        this._viewportOptions = {};\n        this._onEvent = (evt) => {\n            if (this._ignoreFiredEvents === true) {\n                return;\n            }\n            if (!this._targetViewports.length) {\n                return;\n            }\n            const enabledElement = this._eventSource === 'element'\n                ? getEnabledElement(evt.currentTarget)\n                : getEnabledElementByViewportId(evt.detail?.viewportId);\n            if (!enabledElement) {\n                return;\n            }\n            const { renderingEngineId, viewportId } = enabledElement;\n            if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n                return;\n            }\n            this.fireEvent({\n                renderingEngineId,\n                viewportId,\n            }, evt);\n        };\n        this._enabled = true;\n        this._eventName = eventName;\n        this._eventHandler = eventHandler;\n        this._ignoreFiredEvents = false;\n        this._sourceViewports = [];\n        this._targetViewports = [];\n        this._options = options || {};\n        this._eventSource = this._options.eventSource || 'element';\n        this._auxiliaryEvents = this._options.auxiliaryEvents || [];\n        this.id = synchronizerId;\n    }\n    isDisabled() {\n        return !this._enabled || !this._hasSourceElements();\n    }\n    setOptions(viewportId, options = {}) {\n        this._viewportOptions[viewportId] = options;\n    }\n    setEnabled(enabled) {\n        this._enabled = enabled;\n    }\n    getOptions(viewportId) {\n        return this._viewportOptions[viewportId];\n    }\n    add(viewportInfo) {\n        this.addTarget(viewportInfo);\n        this.addSource(viewportInfo);\n    }\n    addSource(viewportInfo) {\n        if (_containsViewport(this._sourceViewports, viewportInfo)) {\n            return;\n        }\n        const { renderingEngineId, viewportId } = viewportInfo;\n        const viewport = getRenderingEngine(renderingEngineId).getViewport(viewportId);\n        if (!viewport) {\n            console.warn(`Synchronizer.addSource: No viewport for ${renderingEngineId} ${viewportId}`);\n            return;\n        }\n        const eventSource = this._eventSource === 'element' ? viewport.element : eventTarget;\n        eventSource.addEventListener(this._eventName, this._onEvent.bind(this));\n        this._auxiliaryEvents.forEach(({ name, source }) => {\n            const target = source === 'element' ? viewport.element : eventTarget;\n            target.addEventListener(name, this._onEvent.bind(this));\n        });\n        this._updateDisableHandlers();\n        this._sourceViewports.push(viewportInfo);\n    }\n    addTarget(viewportInfo) {\n        if (_containsViewport(this._targetViewports, viewportInfo)) {\n            return;\n        }\n        this._targetViewports.push(viewportInfo);\n        this._updateDisableHandlers();\n    }\n    getSourceViewports() {\n        return this._sourceViewports;\n    }\n    getTargetViewports() {\n        return this._targetViewports;\n    }\n    destroy() {\n        this._sourceViewports.forEach((s) => this.removeSource(s));\n        this._targetViewports.forEach((t) => this.removeTarget(t));\n    }\n    remove(viewportInfo) {\n        this.removeTarget(viewportInfo);\n        this.removeSource(viewportInfo);\n    }\n    removeSource(viewportInfo) {\n        const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n        if (index === -1) {\n            return;\n        }\n        const eventSource = this._eventSource === 'element'\n            ? this.getViewportElement(viewportInfo)\n            : eventTarget;\n        this._sourceViewports.splice(index, 1);\n        eventSource.removeEventListener(this._eventName, this._eventHandler);\n        this._auxiliaryEvents.forEach(({ name, source }) => {\n            const target = source === 'element'\n                ? this.getViewportElement(viewportInfo)\n                : eventTarget;\n            target.removeEventListener(name, this._eventHandler);\n        });\n        this._updateDisableHandlers();\n    }\n    removeTarget(viewportInfo) {\n        const index = _getViewportIndex(this._targetViewports, viewportInfo);\n        if (index === -1) {\n            return;\n        }\n        this._targetViewports.splice(index, 1);\n        this._updateDisableHandlers();\n    }\n    hasSourceViewport(renderingEngineId, viewportId) {\n        return _containsViewport(this._sourceViewports, {\n            renderingEngineId,\n            viewportId,\n        });\n    }\n    hasTargetViewport(renderingEngineId, viewportId) {\n        return _containsViewport(this._targetViewports, {\n            renderingEngineId,\n            viewportId,\n        });\n    }\n    fireEvent(sourceViewport, sourceEvent) {\n        if (this.isDisabled() || this._ignoreFiredEvents) {\n            return;\n        }\n        this._ignoreFiredEvents = true;\n        const promises = [];\n        try {\n            for (let i = 0; i < this._targetViewports.length; i++) {\n                const targetViewport = this._targetViewports[i];\n                const targetIsSource = sourceViewport.viewportId === targetViewport.viewportId;\n                if (targetIsSource) {\n                    continue;\n                }\n                const result = this._eventHandler(this, sourceViewport, targetViewport, sourceEvent, this._options);\n                if (result instanceof Promise) {\n                    promises.push(result);\n                }\n            }\n        }\n        catch (ex) {\n            console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n        }\n        finally {\n            if (promises.length) {\n                Promise.allSettled(promises).then(() => {\n                    this._ignoreFiredEvents = false;\n                });\n            }\n            else {\n                this._ignoreFiredEvents = false;\n            }\n        }\n    }\n    _hasSourceElements() {\n        return this._sourceViewports.length !== 0;\n    }\n    _updateDisableHandlers() {\n        const viewports = _getUniqueViewports(this._sourceViewports, this._targetViewports);\n        const _remove = this.remove.bind(this);\n        const disableHandler = (elementDisabledEvent) => {\n            _remove(elementDisabledEvent.detail.element);\n        };\n        viewports.forEach((vp) => {\n            const eventSource = this.getEventSource(vp);\n            if (!eventSource) {\n                return;\n            }\n            eventSource.removeEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n            eventSource.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n        });\n    }\n    getEventSource(viewportInfo) {\n        return this._eventSource === 'element'\n            ? this.getViewportElement(viewportInfo)\n            : eventTarget;\n    }\n    getViewportElement(viewportInfo) {\n        const { renderingEngineId, viewportId } = viewportInfo;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        if (!renderingEngine) {\n            return null;\n        }\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (!viewport) {\n            return null;\n        }\n        return viewport.element;\n    }\n}\nfunction _getUniqueViewports(vp1, vp2) {\n    const unique = [];\n    const vps = vp1.concat(vp2);\n    for (let i = 0; i < vps.length; i++) {\n        const vp = vps[i];\n        if (!unique.some((u) => vp.renderingEngineId === u.renderingEngineId &&\n            vp.viewportId === u.viewportId)) {\n            unique.push(vp);\n        }\n    }\n    return unique;\n}\nfunction _getViewportIndex(arr, vp) {\n    return arr.findIndex((ar) => vp.renderingEngineId === ar.renderingEngineId &&\n        vp.viewportId === ar.viewportId);\n}\nfunction _containsViewport(arr, vp) {\n    return arr.some((ar) => ar.renderingEngineId === vp.renderingEngineId &&\n        ar.viewportId === vp.viewportId);\n}\nexport default Synchronizer;\n","import { state } from '../state';\nimport Synchronizer, {} from './Synchronizer';\nfunction createSynchronizer(synchronizerId, eventName, eventHandler, options) {\n    const synchronizerWithSameIdExists = state.synchronizers.some((sync) => sync.id === synchronizerId);\n    if (synchronizerWithSameIdExists) {\n        throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n    }\n    const synchronizer = new Synchronizer(synchronizerId, eventName, eventHandler, options);\n    state.synchronizers.push(synchronizer);\n    return synchronizer;\n}\nexport default createSynchronizer;\n","import { state } from '../state';\nfunction destroy() {\n    while (state.synchronizers.length > 0) {\n        const synchronizer = state.synchronizers.pop();\n        synchronizer.destroy();\n    }\n}\nexport default destroy;\n","import { state } from '../state';\nfunction destroySynchronizer(synchronizerId) {\n    const synchronizerIndex = state.synchronizers.findIndex((sync) => sync.id === synchronizerId);\n    if (synchronizerIndex > -1) {\n        const synchronizer = state.synchronizers[synchronizerIndex];\n        synchronizer.destroy();\n        state.synchronizers.splice(synchronizerIndex, 1);\n    }\n}\nexport default destroySynchronizer;\n","import { state } from '../state';\nfunction getAllSynchronizers() {\n    return state.synchronizers;\n}\nexport default getAllSynchronizers;\n","import { state } from '../state';\nfunction getSynchronizer(synchronizerId) {\n    return state.synchronizers.find((s) => s.id === synchronizerId);\n}\nexport default getSynchronizer;\n","import { state } from '../state';\nfunction getSynchronizersForViewport(viewportId, renderingEngineId) {\n    const synchronizersFilteredByIds = [];\n    if (!renderingEngineId && !viewportId) {\n        throw new Error('At least one of renderingEngineId or viewportId should be given');\n    }\n    for (let i = 0; i < state.synchronizers.length; i++) {\n        const synchronizer = state.synchronizers[i];\n        const notDisabled = !synchronizer.isDisabled();\n        const hasSourceViewport = synchronizer.hasSourceViewport(renderingEngineId, viewportId);\n        const hasTargetViewport = synchronizer.hasTargetViewport(renderingEngineId, viewportId);\n        if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n            synchronizersFilteredByIds.push(synchronizer);\n        }\n    }\n    return synchronizersFilteredByIds;\n}\nexport default getSynchronizersForViewport;\n","import { state } from '../state';\nfunction getToolGroup(toolGroupId) {\n    return state.toolGroups.find((s) => s.id === toolGroupId);\n}\nexport default getToolGroup;\n","import { MouseBindings, ToolModes, Events } from '../../enums';\nimport get from 'lodash.get';\nimport { triggerEvent, eventTarget, getRenderingEngine, getRenderingEngines, getEnabledElementByIds, Settings, } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { state } from '../state';\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\nimport getToolGroup from './getToolGroup';\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\nconst PRIMARY_BINDINGS = [{ mouseButton: MouseBindings.Primary }];\nexport default class ToolGroup {\n    constructor(id) {\n        this.viewportsInfo = [];\n        this.toolOptions = {};\n        this.currentActivePrimaryToolName = null;\n        this.prevActivePrimaryToolName = null;\n        this.restoreToolOptions = {};\n        this._toolInstances = {};\n        this.id = id;\n    }\n    getViewportIds() {\n        return this.viewportsInfo.map(({ viewportId }) => viewportId);\n    }\n    getViewportsInfo() {\n        return this.viewportsInfo.slice();\n    }\n    getToolInstance(toolInstanceName) {\n        const toolInstance = this._toolInstances[toolInstanceName];\n        if (!toolInstance) {\n            console.warn(`'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`);\n            return;\n        }\n        return toolInstance;\n    }\n    getToolInstances() {\n        return this._toolInstances;\n    }\n    hasTool(toolName) {\n        return !!this._toolInstances[toolName];\n    }\n    addTool(toolName, configuration = {}) {\n        const toolDefinition = state.tools[toolName];\n        const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n        const localToolInstance = this.toolOptions[toolName];\n        if (!hasToolName) {\n            console.warn('Tool with configuration did not produce a toolName: ', configuration);\n            return;\n        }\n        if (!toolDefinition) {\n            console.warn(`'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`);\n            return;\n        }\n        if (localToolInstance) {\n            console.warn(`'${toolName}' is already registered for ToolGroup ${this.id}.`);\n            return;\n        }\n        const { toolClass: ToolClass } = toolDefinition;\n        const toolProps = {\n            name: toolName,\n            toolGroupId: this.id,\n            configuration,\n        };\n        const instantiatedTool = new ToolClass(toolProps);\n        this._toolInstances[toolName] = instantiatedTool;\n    }\n    addToolInstance(toolName, parentClassName, configuration = {}) {\n        let ToolClassToUse = state.tools[toolName]\n            ?.toolClass;\n        if (!ToolClassToUse) {\n            const ParentClass = state.tools[parentClassName]\n                .toolClass;\n            class ToolInstance extends ParentClass {\n            }\n            ToolInstance.toolName = toolName;\n            ToolClassToUse = ToolInstance;\n            state.tools[toolName] = {\n                toolClass: ToolInstance,\n            };\n        }\n        this.addTool(ToolClassToUse.toolName, configuration);\n    }\n    addViewport(viewportId, renderingEngineId) {\n        if (typeof viewportId !== 'string') {\n            throw new Error('viewportId must be defined and be a string');\n        }\n        const renderingEngineUIDToUse = this._findRenderingEngine(viewportId, renderingEngineId);\n        if (!this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)) {\n            this.viewportsInfo.push({\n                viewportId,\n                renderingEngineId: renderingEngineUIDToUse,\n            });\n        }\n        const toolName = this.getActivePrimaryMouseButtonTool();\n        this.setViewportsCursorByToolName(toolName);\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId: renderingEngineUIDToUse,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_ADDED, eventDetail);\n    }\n    removeViewports(renderingEngineId, viewportId) {\n        const indices = [];\n        this.viewportsInfo.forEach((vpInfo, index) => {\n            let match = false;\n            if (vpInfo.renderingEngineId === renderingEngineId) {\n                match = true;\n                if (viewportId && vpInfo.viewportId !== viewportId) {\n                    match = false;\n                }\n            }\n            if (match) {\n                indices.push(index);\n            }\n        });\n        if (indices.length) {\n            for (let i = indices.length - 1; i >= 0; i--) {\n                this.viewportsInfo.splice(indices[i], 1);\n            }\n        }\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_REMOVED, eventDetail);\n    }\n    setActiveStrategy(toolName, strategyName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool configuration.`);\n            return;\n        }\n        toolInstance.setActiveStrategy(strategyName);\n    }\n    setToolMode(toolName, mode, options = {}) {\n        if (!toolName) {\n            console.warn('setToolMode: toolName must be defined');\n            return;\n        }\n        if (mode === ToolModes.Active) {\n            this.setToolActive(toolName, options || this.restoreToolOptions[toolName]);\n            return;\n        }\n        if (mode === ToolModes.Passive) {\n            this.setToolPassive(toolName);\n            return;\n        }\n        if (mode === ToolModes.Enabled) {\n            this.setToolEnabled(toolName);\n            return;\n        }\n        if (mode === ToolModes.Disabled) {\n            this.setToolDisabled(toolName);\n            return;\n        }\n        console.warn('setToolMode: mode must be defined');\n    }\n    setToolActive(toolName, toolBindingsOptions = {}) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        if (!toolInstance) {\n            console.warn(`'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevBindings = this.toolOptions[toolName]\n            ? this.toolOptions[toolName].bindings\n            : [];\n        const newBindings = toolBindingsOptions.bindings\n            ? toolBindingsOptions.bindings\n            : [];\n        const bindingsToUse = [...prevBindings, ...newBindings].reduce((unique, binding) => {\n            const TouchBinding = binding.numTouchPoints !== undefined;\n            const MouseBinding = binding.mouseButton !== undefined;\n            if (!unique.some((obj) => hasSameBinding(obj, binding)) &&\n                (TouchBinding || MouseBinding)) {\n                unique.push(binding);\n            }\n            return unique;\n        }, []);\n        const toolOptions = {\n            bindings: bindingsToUse,\n            mode: Active,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        this._toolInstances[toolName].mode = Active;\n        if (!this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {\n            const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n            if (!activeToolIdentifier) {\n                const cursor = MouseCursor.getDefinedCursor('default');\n                this._setCursorForViewports(cursor);\n            }\n        }\n        else {\n            this.setViewportsCursorByToolName(toolName);\n        }\n        if (this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {\n            if (this.prevActivePrimaryToolName === null) {\n                this.prevActivePrimaryToolName = toolName;\n            }\n            else {\n                this.prevActivePrimaryToolName = this.currentActivePrimaryToolName;\n            }\n            this.currentActivePrimaryToolName = toolName;\n        }\n        if (typeof toolInstance.onSetToolActive === 'function') {\n            toolInstance.onSetToolActive();\n        }\n        this._renderViewports();\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_ACTIVATED, eventDetail);\n        this._triggerToolModeChangedEvent(toolName, Active, toolBindingsOptions);\n    }\n    setToolPassive(toolName, options) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevToolOptions = this.getToolOptions(toolName);\n        const toolOptions = Object.assign({\n            bindings: prevToolOptions ? prevToolOptions.bindings : [],\n        }, prevToolOptions, {\n            mode: Passive,\n        });\n        const matchBindings = Array.isArray(options?.removeAllBindings)\n            ? options.removeAllBindings\n            : this.getDefaultPrimaryBindings();\n        toolOptions.bindings = toolOptions.bindings.filter((binding) => options?.removeAllBindings !== true &&\n            !matchBindings.some((matchBinding) => hasSameBinding(binding, matchBinding)));\n        let mode = Passive;\n        if (toolOptions.bindings.length !== 0) {\n            mode = Active;\n            toolOptions.mode = mode;\n        }\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = mode;\n        if (typeof toolInstance.onSetToolPassive === 'function') {\n            toolInstance.onSetToolPassive();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Passive);\n    }\n    setToolEnabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Enabled,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Enabled;\n        if (typeof toolInstance.onSetToolEnabled === 'function') {\n            toolInstance.onSetToolEnabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Enabled);\n    }\n    setToolDisabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Disabled,\n        };\n        this.restoreToolOptions[toolName] = this.toolOptions[toolName];\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Disabled;\n        if (typeof toolInstance.onSetToolDisabled === 'function') {\n            toolInstance.onSetToolDisabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Disabled);\n    }\n    getToolOptions(toolName) {\n        const toolOptionsForTool = this.toolOptions[toolName];\n        if (toolOptionsForTool === undefined) {\n            return;\n        }\n        return toolOptionsForTool;\n    }\n    getActivePrimaryMouseButtonTool() {\n        return Object.keys(this.toolOptions).find((toolName) => {\n            const toolOptions = this.toolOptions[toolName];\n            return (toolOptions.mode === Active &&\n                this._hasMousePrimaryButtonBinding(toolOptions));\n        });\n    }\n    setViewportsCursorByToolName(toolName, strategyName) {\n        const cursor = this._getCursor(toolName, strategyName);\n        this._setCursorForViewports(cursor);\n    }\n    _getCursor(toolName, strategyName) {\n        let cursorName;\n        let cursor;\n        if (strategyName) {\n            cursorName = `${toolName}.${strategyName}`;\n            cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n            if (cursor) {\n                return cursor;\n            }\n        }\n        cursorName = `${toolName}`;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        cursorName = toolName;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        return MouseCursor.getDefinedCursor('default');\n    }\n    _setCursorForViewports(cursor) {\n        const runtimeSettings = Settings.getRuntimeSettings();\n        if (!runtimeSettings.get('useCursors')) {\n            return;\n        }\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            initElementCursor(viewport.element, cursor);\n        });\n    }\n    setToolConfiguration(toolName, configuration, overwrite) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return false;\n        }\n        let _configuration;\n        if (overwrite) {\n            _configuration = configuration;\n        }\n        else {\n            _configuration = Object.assign(toolInstance.configuration, configuration);\n        }\n        toolInstance.configuration = _configuration;\n        if (typeof toolInstance.onSetToolConfiguration === 'function') {\n            toolInstance.onSetToolConfiguration();\n        }\n        this._renderViewports();\n        return true;\n    }\n    getDefaultMousePrimary() {\n        return MouseBindings.Primary;\n    }\n    getDefaultPrimaryBindings() {\n        return PRIMARY_BINDINGS;\n    }\n    getToolConfiguration(toolName, configurationPath) {\n        if (this._toolInstances[toolName] === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return;\n        }\n        const _configuration = get(this._toolInstances[toolName].configuration, configurationPath) ||\n            this._toolInstances[toolName].configuration;\n        return utilities.deepClone(_configuration);\n    }\n    getPrevActivePrimaryToolName() {\n        return this.prevActivePrimaryToolName;\n    }\n    setActivePrimaryTool(toolName) {\n        const activeToolName = this.getCurrentActivePrimaryToolName();\n        this.setToolDisabled(activeToolName);\n        this.setToolActive(toolName, {\n            bindings: [{ mouseButton: MouseBindings.Primary }],\n        });\n    }\n    getCurrentActivePrimaryToolName() {\n        return this.currentActivePrimaryToolName;\n    }\n    clone(newToolGroupId, fnToolFilter = null) {\n        let toolGroup = getToolGroup(newToolGroupId);\n        if (toolGroup) {\n            console.debug(`ToolGroup ${newToolGroupId} already exists`);\n            return toolGroup;\n        }\n        toolGroup = new ToolGroup(newToolGroupId);\n        state.toolGroups.push(toolGroup);\n        fnToolFilter = fnToolFilter ?? (() => true);\n        Object.keys(this._toolInstances)\n            .filter(fnToolFilter)\n            .forEach((toolName) => {\n            const sourceToolInstance = this._toolInstances[toolName];\n            const sourceToolOptions = this.toolOptions[toolName];\n            const sourceToolMode = sourceToolInstance.mode;\n            toolGroup.addTool(toolName);\n            toolGroup.setToolMode(toolName, sourceToolMode, {\n                bindings: sourceToolOptions.bindings ?? [],\n            });\n        });\n        return toolGroup;\n    }\n    _hasMousePrimaryButtonBinding(toolOptions) {\n        const primaryBindings = this.getDefaultPrimaryBindings();\n        return toolOptions?.bindings?.some((binding) => primaryBindings.some((primary) => hasSameBinding(binding, primary)));\n    }\n    _renderViewports() {\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n        });\n    }\n    _triggerToolModeChangedEvent(toolName, mode, toolBindingsOptions) {\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            mode,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_MODE_CHANGED, eventDetail);\n    }\n    _findRenderingEngine(viewportId, renderingEngineId) {\n        const renderingEngines = getRenderingEngines();\n        if (renderingEngines?.length === 0) {\n            throw new Error('No rendering engines found.');\n        }\n        if (renderingEngineId) {\n            return renderingEngineId;\n        }\n        const matchingEngines = renderingEngines.filter((engine) => engine.getViewport(viewportId));\n        if (matchingEngines.length === 0) {\n            if (renderingEngines.length === 1) {\n                return renderingEngines[0].id;\n            }\n            throw new Error('No rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        if (matchingEngines.length > 1) {\n            throw new Error('Multiple rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        return matchingEngines[0].id;\n    }\n}\nfunction hasSameBinding(binding1, binding2) {\n    if (binding1.mouseButton !== binding2.mouseButton) {\n        return false;\n    }\n    if (binding1.numTouchPoints !== binding2.numTouchPoints) {\n        return false;\n    }\n    return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../state';\nimport ToolGroup from './ToolGroup';\nfunction createToolGroup(toolGroupId) {\n    const toolGroupWithIdExists = state.toolGroups.some((tg) => tg.id === toolGroupId);\n    if (toolGroupWithIdExists) {\n        console.warn(`'${toolGroupId}' already exists.`);\n        return;\n    }\n    const toolGroup = new ToolGroup(toolGroupId);\n    state.toolGroups.push(toolGroup);\n    return toolGroup;\n}\nexport default createToolGroup;\n","import { state } from '../state';\nfunction destroyToolGroup(toolGroupId) {\n    const toolGroupIndex = state.toolGroups.findIndex((tg) => tg.id === toolGroupId);\n    if (toolGroupIndex > -1) {\n        state.toolGroups.splice(toolGroupIndex, 1);\n    }\n}\nexport default destroyToolGroup;\n","import { state } from '../state';\nimport destroyToolGroup from './destroyToolGroup';\nfunction destroy() {\n    const toolGroups = [...state.toolGroups];\n    for (const toolGroup of toolGroups) {\n        destroyToolGroup(toolGroup.id);\n    }\n    state.toolGroups = [];\n}\nexport default destroy;\n","import { state } from '../state';\nfunction getAllToolGroups() {\n    return state.toolGroups;\n}\nexport default getAllToolGroups;\n","import { mouseEventListeners, wheelEventListener, touchEventListeners, keyEventListener, imageChangeEventListener, } from '../eventListeners';\nimport { imageRenderedEventDispatcher, cameraModifiedEventDispatcher, mouseToolEventDispatcher, touchToolEventDispatcher, keyboardToolEventDispatcher, imageSpacingCalibratedEventDispatcher, cameraResetEventDispatcher, } from '../eventDispatchers';\nimport { state } from './state';\nimport { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nexport default function addEnabledElement(evt) {\n    const { element, viewportId } = evt.detail;\n    const svgLayer = _createSvgAnnotationLayer(viewportId);\n    _setSvgNodeCache(element);\n    _appendChild(svgLayer, element);\n    annotationRenderingEngine.addViewportElement(viewportId, element);\n    mouseEventListeners.enable(element);\n    wheelEventListener.enable(element);\n    touchEventListeners.enable(element);\n    keyEventListener.enable(element);\n    imageChangeEventListener.enable(element);\n    imageRenderedEventDispatcher.enable(element);\n    cameraModifiedEventDispatcher.enable(element);\n    imageSpacingCalibratedEventDispatcher.enable(element);\n    cameraResetEventDispatcher.enable(element);\n    mouseToolEventDispatcher.enable(element);\n    keyboardToolEventDispatcher.enable(element);\n    touchToolEventDispatcher.enable(element);\n    state.enabledElements.push(element);\n}\nfunction _createSvgAnnotationLayer(viewportId) {\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgLayer = document.createElementNS(svgns, 'svg');\n    const svgLayerId = `svg-layer-${viewportId}`;\n    svgLayer.classList.add('svg-layer');\n    svgLayer.setAttribute('id', svgLayerId);\n    svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svgLayer.style.width = '100%';\n    svgLayer.style.height = '100%';\n    svgLayer.style.pointerEvents = 'none';\n    svgLayer.style.position = 'absolute';\n    const defs = document.createElementNS(svgns, 'defs');\n    const filter = document.createElementNS(svgns, 'filter');\n    const feOffset = document.createElementNS(svgns, 'feOffset');\n    const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n    const feBlend = document.createElementNS(svgns, 'feBlend');\n    filter.setAttribute('id', `shadow-${svgLayerId}`);\n    filter.setAttribute('filterUnits', 'userSpaceOnUse');\n    feOffset.setAttribute('result', 'offOut');\n    feOffset.setAttribute('in', 'SourceGraphic');\n    feOffset.setAttribute('dx', '0.5');\n    feOffset.setAttribute('dy', '0.5');\n    feColorMatrix.setAttribute('result', 'matrixOut');\n    feColorMatrix.setAttribute('in', 'offOut');\n    feColorMatrix.setAttribute('in2', 'matrix');\n    feColorMatrix.setAttribute('values', '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0');\n    feBlend.setAttribute('in', 'SourceGraphic');\n    feBlend.setAttribute('in2', 'matrixOut');\n    feBlend.setAttribute('mode', 'normal');\n    filter.appendChild(feOffset);\n    filter.appendChild(feColorMatrix);\n    filter.appendChild(feBlend);\n    defs.appendChild(filter);\n    svgLayer.appendChild(defs);\n    return svgLayer;\n}\nfunction _setSvgNodeCache(element) {\n    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;\n    const elementHash = `${viewportId}:${renderingEngineId}`;\n    state.svgNodeCache[elementHash] = {};\n}\nfunction _appendChild(newNode, referenceNode) {\n    referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { state } from './state';\nexport function addTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    if (!toolName) {\n        throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n    }\n    if (!state.tools[toolName]) {\n        state.tools[toolName] = {\n            toolClass: ToolClass,\n        };\n    }\n}\nexport function hasTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    return !!(toolName && state.tools[toolName]);\n}\nexport function hasToolByName(toolName) {\n    return !!(toolName && state.tools[toolName]);\n}\nexport function removeTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    if (!toolName) {\n        throw new Error(`No tool found for: ${ToolClass.name}`);\n    }\n    if (!state.tools[toolName] !== undefined) {\n        delete state.tools[toolName];\n    }\n    else {\n        throw new Error(`${toolName} cannot be removed because it has not been added`);\n    }\n}\nexport default addTool;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nexport default function cancelActiveManipulations(element) {\n    const tools = getToolsWithModesForElement(element, [\n        ToolModes.Active,\n        ToolModes.Passive,\n    ]);\n    const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n    for (const { tool } of toolsWithData) {\n        const annotationUID = tool.cancel(element);\n        if (annotationUID) {\n            return annotationUID;\n        }\n    }\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { mouseEventListeners, wheelEventListener, touchEventListeners, keyEventListener, imageChangeEventListener, } from '../eventListeners';\nimport { imageRenderedEventDispatcher, cameraModifiedEventDispatcher, mouseToolEventDispatcher, keyboardToolEventDispatcher, imageSpacingCalibratedEventDispatcher, touchToolEventDispatcher, cameraResetEventDispatcher, } from '../eventDispatchers';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction removeEnabledElement(elementDisabledEvt) {\n    const { element, viewportId } = elementDisabledEvt.detail;\n    _resetSvgNodeCache(element);\n    _removeSvgNode(element);\n    annotationRenderingEngine.removeViewportElement(viewportId, element);\n    mouseEventListeners.disable(element);\n    wheelEventListener.disable(element);\n    touchEventListeners.disable(element);\n    keyEventListener.disable(element);\n    imageChangeEventListener.disable(element);\n    imageRenderedEventDispatcher.disable(element);\n    cameraModifiedEventDispatcher.disable(element);\n    imageSpacingCalibratedEventDispatcher.disable(element);\n    cameraResetEventDispatcher.disable(element);\n    mouseToolEventDispatcher.disable(element);\n    keyboardToolEventDispatcher.disable(element);\n    touchToolEventDispatcher.disable(element);\n    _removeViewportFromSynchronizers(element);\n    _removeViewportFromToolGroup(element);\n    _removeEnabledElement(element);\n}\nconst _removeViewportFromSynchronizers = (element) => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const synchronizers = getSynchronizersForViewport(enabledElement.viewportId, enabledElement.renderingEngineId);\n    synchronizers.forEach((sync) => {\n        sync.remove(enabledElement);\n    });\n};\nconst _removeViewportFromToolGroup = (element) => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngineId, viewportId } = enabledElement;\n    const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n    if (toolGroup) {\n        toolGroup.removeViewports(renderingEngineId, viewportId);\n    }\n};\nconst _removeAllToolsForElement = function (element) {\n    const tools = getToolsWithModesForElement(element, [\n        ToolModes.Active,\n        ToolModes.Passive,\n    ]);\n    const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n    toolsWithData.forEach(({ annotations }) => {\n        annotations.forEach((annotation) => {\n            removeAnnotation(annotation.annotationUID);\n        });\n    });\n};\nfunction _resetSvgNodeCache(element) {\n    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;\n    const elementHash = `${viewportId}:${renderingEngineId}`;\n    delete state.svgNodeCache[elementHash];\n}\nfunction _removeSvgNode(element) {\n    const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n    const svgLayer = internalViewportNode.querySelector('svg');\n    if (svgLayer) {\n        internalViewportNode.removeChild(svgLayer);\n    }\n}\nconst _removeEnabledElement = function (element) {\n    const foundElementIndex = state.enabledElements.findIndex((el) => el === element);\n    if (foundElementIndex > -1) {\n        state.enabledElements.splice(foundElementIndex, 1);\n    }\n};\nexport default removeEnabledElement;\n","import svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\nconst defaultState = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nlet state = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nfunction resetCornerstoneToolsState() {\n    resetSvgNodeCache();\n    state = {\n        ...structuredClone({\n            ...defaultState,\n            svgNodeCache: {},\n        }),\n        svgNodeCache: {\n            ...defaultState.svgNodeCache,\n        },\n    };\n}\nexport { resetCornerstoneToolsState, state, state as default };\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec3 } from 'gl-matrix';\nexport default function areViewportsCoplanar(viewport1, viewport2) {\n    const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n    const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n    const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n    return Math.abs(dotProducts) > 0.9;\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function cameraSyncCallback(synchronizerInstance, sourceViewport, targetViewport, cameraModifiedEvent) {\n    const { camera } = cameraModifiedEvent.detail;\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    tViewport.setCamera(camera);\n    tViewport.render();\n}\n","import { vec3, mat4 } from 'gl-matrix';\nimport { getRenderingEngine, metaData, utilities, VolumeViewport, } from '@cornerstonejs/core';\nimport areViewportsCoplanar from './areViewportsCoplanar';\nconst getSpatialRegistration = (targetId, sourceId) => utilities.spatialRegistrationMetadataProvider.get('spatialRegistrationModule', targetId, sourceId);\nexport default async function imageSliceSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n    if (options?.disabled) {\n        return;\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const imageId1 = sViewport.getCurrentImageId();\n    const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n    const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n    const targetImageIds = tViewport.getImageIds();\n    if (!areViewportsCoplanar(sViewport, tViewport)) {\n        return;\n    }\n    let registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);\n    if (!registrationMatrixMat4) {\n        const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n        const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n        if (frameOfReferenceUID1 === frameOfReferenceUID2 &&\n            options?.useInitialPosition !== false) {\n            registrationMatrixMat4 = mat4.identity(mat4.create());\n        }\n        else {\n            utilities.calculateViewportsSpatialRegistration(sViewport, tViewport);\n            registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);\n        }\n        if (!registrationMatrixMat4) {\n            return;\n        }\n    }\n    const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(vec3.create(), sourceImagePositionPatient, registrationMatrixMat4);\n    const closestImageIdIndex2 = _getClosestImageIdIndex(targetImagePositionPatientWithRegistrationMatrix, targetImageIds);\n    let imageIndexToSet = closestImageIdIndex2.index;\n    if (tViewport instanceof VolumeViewport) {\n        imageIndexToSet = targetImageIds.length - closestImageIdIndex2.index - 1;\n    }\n    if (closestImageIdIndex2.index !== -1 &&\n        tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index) {\n        await utilities.jumpToSlice(tViewport.element, {\n            imageIndex: imageIndexToSet,\n        });\n    }\n}\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n    return imageIds.reduce((closestImageIdIndex, imageId, index) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = vec3.distance(imagePositionPatient, targetPoint);\n        if (distance < closestImageIdIndex.distance) {\n            return {\n                distance,\n                index,\n            };\n        }\n        return closestImageIdIndex;\n    }, {\n        distance: Infinity,\n        index: -1,\n    });\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function presentationViewSyncCallback(_synchronizerInstance, sourceViewport, targetViewport, _sourceEvent, options) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const presentationView = sViewport.getViewPresentation(options);\n    tViewport.setViewPresentation(presentationView);\n    tViewport.render();\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function slabThicknessSyncCallback(_synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const slabThickness = sViewport.getSlabThickness?.();\n    if (!slabThickness) {\n        return;\n    }\n    tViewport.setSlabThickness?.(slabThickness);\n    tViewport.render();\n}\n","import { BaseVolumeViewport, getRenderingEngine, StackViewport, } from '@cornerstonejs/core';\nexport default function voiSyncCallback(synchronizerInstance, sourceViewport, targetViewport, modifiedEvent, options) {\n    const eventDetail = modifiedEvent.detail;\n    const { volumeId, range, invertStateChanged, invert, colormap } = eventDetail;\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`Rendering Engine does not exist: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const tProperties = {\n        voiRange: range,\n    };\n    if (options?.syncInvertState && invertStateChanged) {\n        tProperties.invert = invert;\n    }\n    if (options?.syncColormap && colormap) {\n        tProperties.colormap = colormap;\n    }\n    if (tViewport instanceof BaseVolumeViewport) {\n        const isFusion = tViewport._actors && tViewport._actors.size > 1;\n        if (isFusion) {\n            tViewport.setProperties(tProperties, volumeId);\n        }\n        else {\n            tViewport.setProperties(tProperties);\n        }\n    }\n    else if (tViewport instanceof StackViewport) {\n        tViewport.setProperties(tProperties);\n    }\n    else {\n        throw new Error('Viewport type not supported.');\n    }\n    tViewport.render();\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function zoomPanSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    if (options?.syncZoom !== false) {\n        const srcZoom = sViewport.getZoom();\n        tViewport.setZoom(srcZoom);\n    }\n    if (options?.syncPan !== false) {\n        const srcPan = sViewport.getPan();\n        tViewport.setPan(srcPan);\n    }\n    tViewport.render();\n}\n","import createCameraPositionSynchronizer from './synchronizers/createCameraPositionSynchronizer';\nimport createPresentationViewSynchronizer from './synchronizers/createPresentationViewSynchronizer';\nimport createVOISynchronizer from './synchronizers/createVOISynchronizer';\nimport createZoomPanSynchronizer from './synchronizers/createZoomPanSynchronizer';\nimport createImageSliceSynchronizer from './synchronizers/createImageSliceSynchronizer';\nimport createSlabThicknessSynchronizer from './synchronizers/createSlabThicknessSynchronizer';\nconst createStackImageSynchronizer = createImageSliceSynchronizer;\nexport { createCameraPositionSynchronizer, createPresentationViewSynchronizer, createVOISynchronizer, createZoomPanSynchronizer, createImageSliceSynchronizer, createStackImageSynchronizer, createSlabThicknessSynchronizer, };\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nexport default function createVOISynchronizer(synchronizerName, options) {\n    options = Object.assign({ syncInvertState: true, syncColormap: true }, options);\n    const VOISynchronizer = createSynchronizer(synchronizerName, Enums.Events.VOI_MODIFIED, voiSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: Enums.Events.COLORMAP_MODIFIED,\n            },\n        ],\n        ...options,\n    });\n    return VOISynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nconst EPSILON = 1e-3;\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            referenceLinesCenterGapRatio: null,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n                referenceLinesCenterGapRatio: 0.05,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const mobileConfig = this.configuration.mobile;\n                const { referenceLinesCenterGapRatio } = mobileConfig?.enabled\n                    ? mobileConfig\n                    : this.configuration;\n                const centerGap = referenceLinesCenterGapRatio > 0\n                    ? canvasMinDimensionLength * referenceLinesCenterGapRatio\n                    : this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = this.editData.annotation.data.handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        this.toolCenter = toolCenter;\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            const { element } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewport.id)\n                .getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewportId)\n                .getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n            updateCursorSize: 'dynamic',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            deltaWorld: eventData.deltaPoints.world,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            if (this.configuration.updateCursorSize === 'dynamic') {\n                cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n            }\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            imageDynamicRange = Math.min(calculatedDynamicRange[1] - calculatedDynamicRange[0], metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return ratio > 1 ? Math.round(ratio) : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Enums, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { Events } from '../enums';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                spacing = imageData.spacing;\n                const { dimensions } = imageData;\n                const imageWidth = dimensions[0] * spacing[0];\n                const imageHeight = dimensions[1] * spacing[1];\n                const canvasAspect = size[0] / size[1];\n                const displayArea = viewport.options?.displayArea;\n                const imageAreaScaleX = displayArea?.imageArea?.[0] ?? 1.1;\n                const imageAreaScaleY = displayArea?.imageArea?.[1] ?? 1.1;\n                const scaledImageWidth = imageWidth * imageAreaScaleX;\n                const scaledImageHeight = imageHeight * imageAreaScaleY;\n                const scaledImageAspect = scaledImageWidth / scaledImageHeight;\n                let minParallelScaleRequired;\n                if (scaledImageAspect > canvasAspect) {\n                    minParallelScaleRequired = (scaledImageWidth / canvasAspect) * 0.5;\n                }\n                else {\n                    minParallelScaleRequired = scaledImageHeight * 0.5;\n                }\n                const { minZoomScale, maxZoomScale } = this.configuration;\n                const minScaleInWorld = minParallelScaleRequired / maxZoomScale;\n                const maxScaleInWorld = minParallelScaleRequired / minZoomScale;\n                if (parallelScaleToSet < minScaleInWorld) {\n                    cappedParallelScale = minScaleInWorld;\n                    thresholdExceeded = true;\n                }\n                else if (parallelScaleToSet > maxScaleInWorld) {\n                    cappedParallelScale = maxScaleInWorld;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    mouseWheelCallback(evt) {\n        this._zoom(evt);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _zoom(evt) {\n        const { element, points } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const wheelData = evt.detail.wheel;\n        const direction = wheelData.direction;\n        const eventDetails = {\n            detail: {\n                element,\n                eventName: Events.MOUSE_WHEEL,\n                renderingEngineId: enabledElement.renderingEngineId,\n                viewportId: viewport.id,\n                camera: {},\n                deltaPoints: {\n                    page: points.page,\n                    client: points.client,\n                    world: points.world,\n                    canvas: [0, -direction * 5],\n                },\n                startPoints: points,\n                lastPoints: points,\n                currentPoints: points,\n            },\n        };\n        if (viewport.type === Enums.ViewportType.STACK) {\n            this.preMouseDownCallback(eventDetails);\n        }\n        this._dragCallback(eventDetails);\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawPath as drawPathSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            showAngleArc: false,\n            arcOffset: 5,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (this.configuration.showAngleArc) {\n                    const center = canvasCoordinates[1];\n                    const offset = this.configuration.arcOffset;\n                    const radius = Math.min(lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;\n                    const anglePoints = [];\n                    let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);\n                    let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);\n                    if (endAngle < startAngle) {\n                        endAngle += 2 * Math.PI;\n                    }\n                    const angleDifference = endAngle - startAngle;\n                    if (angleDifference > Math.PI) {\n                        const temp = startAngle;\n                        startAngle = endAngle;\n                        endAngle = temp + 2 * Math.PI;\n                    }\n                    const segments = 32;\n                    for (let i = 0; i <= segments; i++) {\n                        const angle = startAngle + (i / segments) * (endAngle - startAngle);\n                        anglePoints.push([\n                            center[0] + radius * Math.cos(angle),\n                            center[1] + radius * Math.sin(angle),\n                        ]);\n                    }\n                    drawPathSvg(svgDrawingHelper, annotationUID, '3', anglePoints, {\n                        color: color,\n                        width: lineWidth,\n                        lineDash: angleArcLineDash,\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const { arrowFirst } = this.configuration;\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        arrowFirst,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((text) => {\n                    if (!text) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.text = text;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, text);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, text } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text: text || '',\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2, vec3 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            simplified: true,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { points } = annotation.data.handles;\n            const canvasHandles = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasHandles[0];\n            const radius = getCanvasCircleRadius([canvasCenter, canvasHandles[1]]);\n            const radiusPoint = getCanvasCircleRadius([canvasCenter, canvasCoords]);\n            return Math.abs(radiusPoint - radius) < proximity / 2;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { world: worldPos, canvas: currentCanvasPoints } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const centerWorld = data.handles.points[0];\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            if (this.configuration.simplified) {\n                data.handles.points[1] = worldPos;\n            }\n            else {\n                const radiusCanvas = vec2.distance(centerCanvas, currentCanvasPoints);\n                data.handles.points[0] = [...centerWorld];\n                data.handles.points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - radiusCanvas,\n                ]);\n                data.handles.points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + radiusCanvas,\n                ]);\n                data.handles.points[3] = canvasToWorld([\n                    centerCanvas[0] - radiusCanvas,\n                    centerCanvas[1],\n                ]);\n                data.handles.points[4] = canvasToWorld([\n                    centerCanvas[0] + radiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints, deltaPoints } = eventDetail;\n            if (handleIndex === 0) {\n                const worldPosDelta = deltaPoints.world;\n                points.forEach((point) => {\n                    vec3.add(point, point, worldPosDelta);\n                });\n            }\n            else {\n                const centerWorld = points[0];\n                const centerCanvas = worldToCanvas(centerWorld);\n                const currentCanvasPoint = currentPoints.canvas;\n                const newRadiusCanvas = vec2.distance(centerCanvas, currentCanvasPoint);\n                points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - newRadiusCanvas,\n                ]);\n                points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + newRadiusCanvas,\n                ]);\n                points[3] = canvasToWorld([\n                    centerCanvas[0] - newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n                points[4] = canvasToWorld([\n                    centerCanvas[0] + newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                annotation.highlighted = false;\n                annotation.data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([center, canvasCoordinates[1]]);\n                const canvasCorners = getCanvasCircleCorners([\n                    center,\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.calculateStats) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, targetId);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [center, canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasCoordinates[0];\n            const canvasTop = canvasCoordinates[1];\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([canvasCenter, canvasTop]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = points[0];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(radius)) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    initialRotation: viewport.getRotation(),\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const [bottom, top, left, right] = canvasCoordinates;\n            const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n            const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n            const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);\n            const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n            const minorEllipse = {\n                center,\n                xRadius: (w - proximity) / 2,\n                yRadius: (h - proximity) / 2,\n                angle,\n            };\n            const majorEllipse = {\n                center,\n                xRadius: (w + proximity) / 2,\n                yRadius: (h + proximity) / 2,\n                angle,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const post2Index = transformWorldToIndex(imageData, worldPos2);\n                post2Index[0] = Math.floor(post2Index[0]);\n                post2Index[1] = Math.floor(post2Index[1]);\n                post2Index[2] = Math.floor(post2Index[2]);\n                this.isHandleOutsideImage = !this._isInsideVolume(pos1Index, post2Index, dimensions);\n                const iMin = Math.min(pos1Index[0], post2Index[0]);\n                const iMax = Math.max(pos1Index[0], post2Index[0]);\n                const jMin = Math.min(pos1Index[1], post2Index[1]);\n                const jMax = Math.max(pos1Index[1], post2Index[1]);\n                const kMin = Math.min(pos1Index[2], post2Index[2]);\n                const kMax = Math.max(pos1Index[2], post2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = [\n                    (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                    (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                    (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                ];\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                const handles = [pos1Index, post2Index];\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n                    scale /\n                    scale;\n                const pixelUnitsOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                let pointsInShape;\n                if (voxelManager) {\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        boundsIJK,\n                        imageData,\n                        isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                        returnPoints: this.configuration.storePointData,\n                    });\n                }\n                const stats = this.configuration.statsCalculator.getStatistics();\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    mean: stats.mean?.value,\n                    max: stats.max?.value,\n                    min: stats.min?.value,\n                    stdDev: stats.stdDev?.value,\n                    statsArray: stats.array,\n                    pointsInShape,\n                    isEmptyArea,\n                    areaUnit,\n                    modalityUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const { xRadius, yRadius, center, angle } = ellipse;\n        const rotLocation = vec2.rotate(vec2.create(), location, center, -angle);\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID: null,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.text], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle, interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n            textCanvasOffset: {\n                x: 6,\n                y: -6,\n            },\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + this.configuration.textCanvasOffset.x,\n                        canvasCoordinates[1] + this.configuration.textCanvasOffset.y,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { eventTarget, utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nimport { Events } from '../../enums';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.annotationCutMergeCompletedBinded =\n            this.annotationCutMergeCompleted.bind(this);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    annotationCutMergeCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nconst splineToolNames = [\n    'CatmullRomSplineROI',\n    'LinearSplineROI',\n    'BSplineROI',\n    'CardinalSplineROI',\n];\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            simplifiedSpline: false,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                enableTwoPointPreview: false,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.splineToolNames = [\n            'CatmullRomSplineROI',\n            'LinearSplineROI',\n            'BSplineROI',\n            'CardinalSplineROI',\n        ];\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n        this.annotationCompletedBinded = this.annotationCompleted.bind(this);\n    }\n    annotationCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline ||\n            !this.isContourSegmentationTool()) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.removeListeners();\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints >= 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const { enableTwoPointPreview } = this.configuration.spline;\n            if (spline.numControlPoints === 1 && enableTwoPointPreview) {\n                const firstPoint = canvasCoordinates[0];\n                const previewPolylinePoints = [firstPoint, lastCanvasPoint];\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n            else if (spline.numControlPoints > 1) {\n                const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    isSplineAnnotation(annotation) {\n        return splineToolNames.includes(annotation?.metadata?.toolName);\n    }\n    createSplineObjectFromType(annotation, splineType) {\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        annotation.data.spline = {\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        };\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events, ChangeTypes } from '../../../enums';\nimport { getEnabledElement, utilities, metaData, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawFan as drawFanSvg, } from '../../../drawingSvg';\nimport { state } from '../../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../../cursors/elementCursor';\nimport { angleFromCenter, calculateInnerFanPercentage, clipInterval, intervalFromPoints, mergeIntervals, subtractIntervals, } from '../../../utilities/math/fan/fanUtils';\nimport { calculateFanGeometry } from './utils/fanExtraction';\nconst { transformIndexToWorld } = utilities;\nclass UltrasoundPleuraBLineTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundPleuraBLineTool'; }\n    static { this.USPleuraBLineAnnotationType = {\n        BLINE: 'bLine',\n        PLEURA: 'pleura',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            center: null,\n            innerRadius: null,\n            outerRadius: null,\n            startAngle: null,\n            endAngle: null,\n            bLineColor: 'rgb(60, 255, 60)',\n            pleuraColor: 'rgb(0, 4, 255)',\n            drawDepthGuide: true,\n            depth_ratio: 0.5,\n            depthGuideColor: 'rgb(0, 255, 255)',\n            depthGuideThickness: 4,\n            depthGuideDashLength: 20,\n            depthGuideDashGap: 16,\n            depthGuideOpacity: 0.2,\n            fanOpacity: 0.1,\n            showFanAnnotations: true,\n            updatePercentageCallback: null,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.pleuraAnnotations = [];\n        this.bLineAnnotations = [];\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    annotationType: this.getActiveAnnotationType(),\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element) || {};\n            if (!viewport) {\n                return;\n            }\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                const allPointsInsideShape = points.every((point) => {\n                    const newPoint = [\n                        point[0] + worldPosDelta[0],\n                        point[1] + worldPosDelta[1],\n                        point[2] + worldPosDelta[2],\n                    ];\n                    return this.isInsideFanShape(viewport, newPoint);\n                });\n                if (allPointsInsideShape) {\n                    points.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                    annotation.invalidated = true;\n                }\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                if (this.isInsideFanShape(viewport, worldPos)) {\n                    data.handles.points[handleIndex] = [...worldPos];\n                    annotation.invalidated = true;\n                }\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            if (!this.getFanShapeGeometryParameters(viewport)) {\n                return;\n            }\n            const { imageData } = viewport.getImageData() || {};\n            if (!imageData) {\n                return renderStatus;\n            }\n            if (this.configuration.drawDepthGuide) {\n                this.drawDepthGuide(svgDrawingHelper, viewport);\n            }\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const fanCenter = viewport.worldToCanvas(transformIndexToWorld(imageData, this.configuration.center));\n            const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);\n            const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;\n            const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;\n            const currentImageId = viewport.getCurrentImageId();\n            const unMergedPleuraIntervals = annotations\n                .filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId)\n                .map((annotation) => {\n                const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n                const interval = intervalFromPoints(fanCenter, canvasCoordinates);\n                return interval;\n            });\n            const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);\n            const pleuraIntervalsDisplayed = [];\n            const bLineIntervalsDisplayed = [];\n            const drawAnnotation = (annotation) => {\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    return;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color: this.getColorForLineType(annotation),\n                        fill: this.getColorForLineType(annotation),\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color: this.getColorForLineType(annotation),\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                if (this.configuration.showFanAnnotations) {\n                    const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);\n                    let fanNumber = 0;\n                    if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                        const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval) => {\n                            const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);\n                            clippedIntervals.forEach((clippedInterval) => {\n                                fanNumber++;\n                                const fanIndex = fanNumber;\n                                const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                                const fanUID = `2-${fanIndex}`;\n                                drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {\n                                    color: 'transparent',\n                                    fill: this.getColorForLineType(annotation),\n                                    fillOpacity: this.configuration.fanOpacity,\n                                    width: lineWidth,\n                                    lineDash,\n                                    shadow,\n                                }, fanDataId, 10);\n                                bLineIntervalsDisplayed.push(clippedInterval);\n                            });\n                        });\n                    }\n                    else if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                        const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval, index) => {\n                            fanNumber++;\n                            const fanIndex = fanNumber;\n                            const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                            const fanUID = `2-${fanIndex}`;\n                            drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {\n                                color: 'transparent',\n                                fill: this.getColorForLineType(annotation),\n                                fillOpacity: this.configuration.fanOpacity,\n                                width: lineWidth,\n                                lineDash,\n                                shadow,\n                            }, fanDataId, 5);\n                            pleuraIntervalsDisplayed.push(interval);\n                        });\n                    }\n                }\n            };\n            const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId);\n            pleuraAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n                annotation.metadata.referencedImageId === currentImageId);\n            bLineAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            renderStatus = true;\n            if (this.configuration.updatePercentageCallback && viewport) {\n                this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));\n            }\n            return renderStatus;\n        };\n        this.activeAnnotationType =\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;\n    }\n    static filterAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return [];\n        }\n        const filteredAnnotations = annotations.filter((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            return filterFunction(currentImageId);\n        });\n        return filteredAnnotations;\n    }\n    static countAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        const { viewport } = getEnabledElement(element);\n        const imageIds = viewport.getImageIds();\n        const getImageIdIndex = (imageId) => {\n            const index = imageIds.findIndex((id) => id === imageId);\n            if (index === -1) {\n                return 0;\n            }\n            return index;\n        };\n        if (!annotations?.length) {\n            return;\n        }\n        const annotationMapping = new Map();\n        annotations.forEach((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            if (!filterFunction(currentImageId)) {\n                return;\n            }\n            const { annotationType } = annotation.data;\n            let counts;\n            if (annotationMapping.has(currentImageId)) {\n                counts = annotationMapping.get(currentImageId);\n            }\n            else {\n                counts = {\n                    frame: getImageIdIndex(currentImageId),\n                    bLine: 0,\n                    pleura: 0,\n                };\n            }\n            if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                counts.pleura++;\n            }\n            else if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                counts.bLine++;\n            }\n            annotationMapping.set(currentImageId, counts);\n        });\n        return annotationMapping;\n    }\n    static deleteAnnotations(element, filterFunction = () => false) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return;\n        }\n        annotations.forEach((annotation) => {\n            if (!filterFunction(annotation.metadata.referencedImageId)) {\n                return;\n            }\n            removeAnnotation(annotation.annotationUID);\n        });\n    }\n    setActiveAnnotationType(type) {\n        this.activeAnnotationType = type;\n    }\n    getActiveAnnotationType() {\n        return this.activeAnnotationType;\n    }\n    deleteLastAnnotationType(element, type) {\n        let annotationList;\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);\n        }\n        else if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);\n        }\n        if (annotationList?.length > 0) {\n            const annotation = annotationList.pop();\n            removeAnnotation(annotation.annotationUID);\n        }\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(UltrasoundPleuraBLineTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    isInsideFanShape(viewport, point) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return false;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (imageData) {\n            const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            const angle = angleFromCenter(fanCenter, canvasCoordinates);\n            return (angle >= this.configuration.startAngle &&\n                angle <= this.configuration.endAngle);\n        }\n    }\n    updateFanGeometryConfiguration(fanGeometry) {\n        if (!fanGeometry) {\n            return;\n        }\n        if (this.isFanShapeGeometryParametersValid(fanGeometry)) {\n            this.configuration.center = [\n                fanGeometry.center[0],\n                fanGeometry.center[1],\n                0,\n            ];\n        }\n        this.configuration.innerRadius = fanGeometry.innerRadius;\n        this.configuration.outerRadius = fanGeometry.outerRadius;\n        this.configuration.startAngle = fanGeometry.startAngle;\n        this.configuration.endAngle = fanGeometry.endAngle;\n    }\n    deriveFanGeometryFromViewport(viewport) {\n        const imageId = viewport.getCurrentImageId();\n        const { fanGeometry } = calculateFanGeometry(imageId) || {};\n        if (fanGeometry) {\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n    }\n    isFanShapeGeometryParametersValid(fanGeometry) {\n        if (!fanGeometry) {\n            fanGeometry = this.configuration;\n        }\n        return (fanGeometry?.center &&\n            fanGeometry?.innerRadius > 0 &&\n            fanGeometry?.outerRadius &&\n            fanGeometry?.startAngle > 0 &&\n            fanGeometry?.startAngle < 360 &&\n            fanGeometry?.endAngle > 0 &&\n            fanGeometry?.endAngle < 360);\n    }\n    getFanShapeGeometryParameters(viewport) {\n        if (this.isFanShapeGeometryParametersValid()) {\n            return true;\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            const imageId = viewport.getCurrentImageId();\n            const fanGeometry = metaData.get('ultrasoundFanShapeGeometry', imageId);\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            this.deriveFanGeometryFromViewport(viewport);\n        }\n        return this.isFanShapeGeometryParametersValid();\n    }\n    calculateBLinePleuraPercentage(viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const { element } = viewport;\n        const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n        const currentImageId = viewport.getCurrentImageId();\n        const annotations = getAnnotations(this.getToolName(), element) || [];\n        const pleuraIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        const bLineIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);\n    }\n    getColorForLineType(annotation) {\n        const { annotationType } = annotation.data;\n        const { bLineColor, pleuraColor } = this.configuration;\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            return bLineColor;\n        }\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            return pleuraColor;\n        }\n        return bLineColor;\n    }\n    getIndexToCanvasRatio(viewport) {\n        const { imageData } = viewport.getImageData() || {};\n        const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));\n        const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));\n        const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];\n        const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);\n        return vectorSize;\n    }\n    drawDepthGuide(svgDrawingHelper, viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const radToDegree = (rad) => (rad * 180) / Math.PI;\n        const degreeToRad = (degree) => (degree * Math.PI) / 180;\n        const indexToCanvas = (point) => {\n            return viewport.worldToCanvas(transformIndexToWorld(imageData, point));\n        };\n        const depth_radius = this.configuration.innerRadius +\n            this.configuration.depth_ratio *\n                (this.configuration.outerRadius - this.configuration.innerRadius);\n        const theta_start = this.configuration.startAngle;\n        const theta_end = this.configuration.endAngle;\n        const theta_range = theta_end - theta_start;\n        const arc_length = degreeToRad(theta_range) * depth_radius;\n        let num_dashes = Math.round(arc_length /\n            (this.configuration.depthGuideDashLength +\n                this.configuration.depthGuideDashGap));\n        if (num_dashes <= 0) {\n            num_dashes = Math.max(15, Math.round(theta_range / 5));\n        }\n        const theta_step = theta_range / num_dashes;\n        for (let i = 0; i < num_dashes; i++) {\n            const theta1 = degreeToRad(theta_start + i * theta_step);\n            const theta2 = degreeToRad(theta_start +\n                i * theta_step +\n                radToDegree(this.configuration.depthGuideDashLength) / depth_radius);\n            const start_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta1),\n                this.configuration.center[1] + depth_radius * Math.sin(theta1),\n                0,\n            ];\n            const end_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta2),\n                this.configuration.center[1] + depth_radius * Math.sin(theta2),\n                0,\n            ];\n            drawLineSvg(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {\n                color: this.configuration.depthGuideColor,\n                lineWidth: this.configuration.depthGuideThickness,\n                strokeOpacity: this.configuration.depthGuideOpacity,\n            });\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (utilities.indexWithinDimensions(index1, dimensions) &&\n            utilities.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    return [''];\n}\nexport default UltrasoundPleuraBLineTool;\n","export function pickPoints(hull, slack = 7) {\n    if (!hull.length) {\n        throw new Error('Convex hull is empty');\n    }\n    const n = hull.length;\n    const next = (i) => (i + 1) % n;\n    const walk = (from, to) => {\n        const idx = [];\n        for (let i = from;; i = next(i)) {\n            idx.push(i);\n            if (i === to) {\n                break;\n            }\n        }\n        return idx;\n    };\n    let i2 = 0, i3 = 0;\n    for (let i = 1; i < n; i++) {\n        if (hull[i][0] < hull[i2][0]) {\n            i2 = i;\n        }\n        if (hull[i][0] > hull[i3][0]) {\n            i3 = i;\n        }\n    }\n    const P2 = hull[i2];\n    const P3 = hull[i3];\n    const pathA = walk(i2, i3);\n    const pathB = walk(i3, i2);\n    const globalYmin = Math.min(...hull.map((p) => p[1]));\n    const upperPath = pathA.some((i) => hull[i][1] === globalYmin)\n        ? pathA\n        : pathB;\n    const topY = Math.min(...upperPath.map((i) => hull[i][1]));\n    let arcPts = upperPath\n        .map((i) => hull[i])\n        .filter((p) => Math.abs(p[1] - topY) <= slack);\n    if (arcPts.length < 2) {\n        arcPts = upperPath\n            .map((i) => hull[i])\n            .sort((a, b) => a[1] - b[1])\n            .slice(0, 2);\n    }\n    const P1 = arcPts.reduce((best, p) => (p[0] < best[0] ? p : best), arcPts[0]);\n    const P4 = arcPts.reduce((best, p) => (p[0] > best[0] ? p : best), arcPts[0]);\n    return { P1, P2, P3, P4 };\n}\nexport function computeEdgeBuffer(buffer, width, height) {\n    const total = width * height;\n    const channels = buffer.length / total;\n    if (![1, 3, 4].includes(channels)) {\n        throw new Error('Buffer must be 1,3 or 4 channels per pixel');\n    }\n    const gray = new Float32Array(total);\n    for (let i = 0; i < total; i++) {\n        if (channels === 1) {\n            gray[i] = buffer[i];\n        }\n        else {\n            const base = i * channels;\n            const r = buffer[base];\n            const g = buffer[base + 1];\n            const b = buffer[base + 2];\n            gray[i] = 0.299 * r + 0.587 * g + 0.114 * b;\n        }\n    }\n    const edgeBuf = new Float32Array(total);\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = y * width + x;\n            const i00 = idx - width - 1;\n            const i01 = idx - width;\n            const i02 = idx - width + 1;\n            const i10 = idx - 1;\n            const i11 = idx;\n            const i12 = idx + 1;\n            const i20 = idx + width - 1;\n            const i21 = idx + width;\n            const i22 = idx + width + 1;\n            const gx = -gray[i00] +\n                gray[i02] +\n                -2 * gray[i10] +\n                2 * gray[i12] +\n                -gray[i20] +\n                gray[i22];\n            const gy = gray[i00] +\n                2 * gray[i01] +\n                gray[i02] -\n                gray[i20] -\n                2 * gray[i21] -\n                gray[i22];\n            edgeBuf[idx] = Math.hypot(gx, gy);\n        }\n    }\n    return edgeBuf;\n}\nexport function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {\n    const { maxDist = 15, slack = 2 } = opts;\n    const directions = {\n        P1: { dx: -1, dy: -1 },\n        P2: { dx: -1, dy: +1 },\n        P3: { dx: +1, dy: +1 },\n        P4: { dx: +1, dy: -1 },\n    };\n    function snapQuadrant(pt, { dx, dy }, threshold = 5) {\n        const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;\n        const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;\n        const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;\n        const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;\n        let best = pt;\n        for (const [cx, cy] of contour) {\n            if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {\n                continue;\n            }\n            const xi = Math.round(cx);\n            const yi = Math.round(cy);\n            if (xi < 0 || xi >= width || yi < 0 || yi >= height) {\n                continue;\n            }\n            const xAlign = (xi - best[0]) * dx;\n            const yAlign = (yi - best[0]) * dy;\n            const v = edgeBuf[yi * width + xi];\n            if (v > threshold && (xAlign > 0 || yAlign > 0)) {\n                best = [cx, cy];\n            }\n        }\n        return best;\n    }\n    return {\n        P1: snapQuadrant(rough.P1, directions.P1),\n        P2: snapQuadrant(rough.P2, directions.P2),\n        P3: snapQuadrant(rough.P3, directions.P3),\n        P4: snapQuadrant(rough.P4, directions.P4),\n    };\n}\nexport function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {\n    const rough = pickPoints(hull);\n    const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {\n        maxDist: 20,\n        step: 0.5,\n    });\n    return refined;\n}\n","import { intersectLine } from '../../../../utilities/math/line';\nfunction angleRad(center, p) {\n    return Math.atan2(p[1] - center[1], p[0] - center[0]);\n}\nexport function deriveFanGeometry(params) {\n    const { P1, P2, P3, P4 } = params;\n    const centerResult = intersectLine(P1, P2, P4, P3, true);\n    if (!centerResult) {\n        throw new Error('Fan edges appear parallel — no apex found');\n    }\n    const center = centerResult;\n    let startAngle = angleRad(center, P1) * (180 / Math.PI);\n    let endAngle = angleRad(center, P4) * (180 / Math.PI);\n    if (endAngle <= startAngle) {\n        const tempAngle = startAngle;\n        startAngle = endAngle;\n        endAngle = tempAngle;\n    }\n    const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);\n    const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);\n    const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);\n    const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);\n    const innerRadius = Math.min(d1, d4);\n    const outerRadius = Math.max(d2, d3);\n    return {\n        center,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius,\n    };\n}\n","import { cache } from '@cornerstonejs/core';\nimport { segmentLargestUSOutlineFromBuffer } from './segmentLargestUSOutlineFromBuffer';\nimport { generateConvexHullFromContour } from './generateConvexHullFromContour';\nimport { calculateFanShapeCorners } from './calculateFanShapeCorners';\nimport { deriveFanGeometry } from './deriveFanGeometry';\nexport function exportContourJpeg(pixelData, width, height, contour, opts = {}) {\n    const { strokeStyle = '#f00', lineWidth = 2, quality = 0.92 } = opts;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const totalPixels = width * height;\n    const channels = pixelData.length / totalPixels;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        const baseIn = i * channels;\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[baseIn];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    if (contour.length > 0) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);\n        for (let i = 1; i < contour.length; i++) {\n            ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function getPixelData(imageId) {\n    const image = cache.getImage(imageId);\n    if (!image) {\n        return;\n    }\n    const width = image.width;\n    const height = image.height;\n    const pixelData = image.getPixelData();\n    return {\n        pixelData,\n        width,\n        height,\n    };\n}\nexport default function saveBinaryData(url, filename) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.click();\n    a.remove();\n}\nfunction exportFanJpeg(pixelData, width, height, fan, opts = {}) {\n    const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius, } = fan;\n    const { strokeStyle = '#0ff', lineWidth = 2, quality = 0.92 } = opts;\n    const startAngle = (startAngleInDegrees * Math.PI) / 180;\n    const endAngle = (endAngleInDegrees * Math.PI) / 180;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const total = width * height;\n    const channels = pixelData.length / total;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < total; i++) {\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[i];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            const baseIn = i * channels;\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    ctx.beginPath();\n    for (let a = startAngle; a <= endAngle; a += 0.01) {\n        const x = center[0] + innerRadius * Math.cos(a);\n        const y = center[1] + innerRadius * Math.sin(a);\n        if (a === startAngle) {\n            ctx.moveTo(x, y);\n        }\n        else {\n            ctx.lineTo(x, y);\n        }\n    }\n    for (let a = endAngle; a >= startAngle; a -= 0.01) {\n        const x = center[0] + outerRadius * Math.cos(a);\n        const y = center[1] + outerRadius * Math.sin(a);\n        ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function downloadFanJpeg(imageId, contourType = 5) {\n    const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    let jpegDataUrl;\n    if (contourType === 1) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);\n    }\n    else if (contourType === 2) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);\n    }\n    else if (contourType === 3) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);\n    }\n    else if (contourType === 4) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, [\n            refined.P1,\n            refined.P2,\n            refined.P3,\n            refined.P4,\n        ]);\n    }\n    else {\n        jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {\n            strokeStyle: '#f00',\n            lineWidth: 3,\n            quality: 0.95,\n        });\n    }\n    saveBinaryData(jpegDataUrl, 'contour.jpg');\n}\nexport function calculateFanGeometry(imageId) {\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);\n    const { simplified, hull } = generateConvexHullFromContour(contour);\n    const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);\n    const fanGeometry = deriveFanGeometry({\n        P1: refined.P1,\n        P2: refined.P2,\n        P3: refined.P3,\n        P4: refined.P4,\n    });\n    return { contour, simplified, hull, refined, fanGeometry };\n}\n","import { utilities } from '@cornerstonejs/tools';\nexport function generateConvexHullFromContour(contour) {\n    const simplified = utilities.math.polyline.decimate(contour, 2);\n    const hull = utilities.math.polyline.convexHull(simplified);\n    return { simplified, hull };\n}\n","import { floodFill } from '../../../../utilities/segmentation';\nexport function segmentLargestUSOutlineFromBuffer(buffer, width, height) {\n    const totalPixels = width * height;\n    const channelCount = buffer.length / totalPixels;\n    if (![1, 3, 4].includes(channelCount)) {\n        throw new Error('Buffer must be 1, 3, or 4 channels per pixel');\n    }\n    const mask = Array.from({ length: height }, () => new Array(width).fill(false));\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const pixelIndex = y * width + x;\n            const base = pixelIndex * channelCount;\n            let isForeground = false;\n            for (let c = 0; c < Math.min(3, channelCount); c++) {\n                if (buffer[base + c] > 0) {\n                    isForeground = true;\n                    break;\n                }\n            }\n            mask[y][x] = isForeground;\n        }\n    }\n    const labels = Array.from({ length: height }, () => new Array(width).fill(0));\n    let currentLabel = 0;\n    const regionSizes = {};\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (mask[y][x] && labels[y][x] === 0) {\n                currentLabel++;\n                const getter = (px, py) => {\n                    if (px < 0 || px >= width || py < 0 || py >= height) {\n                        return false;\n                    }\n                    return mask[py][px] && labels[py][px] === 0;\n                };\n                let pixelCount = 0;\n                const options = {\n                    onFlood: (px, py) => {\n                        labels[py][px] = currentLabel;\n                        pixelCount++;\n                    },\n                    diagonals: false,\n                };\n                floodFill(getter, [x, y], options);\n                regionSizes[currentLabel] = pixelCount;\n            }\n        }\n    }\n    if (currentLabel === 0) {\n        return [];\n    }\n    const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);\n    function isBorder(x, y) {\n        if (labels[y][x] !== +largestLabel) {\n            return false;\n        }\n        for (const [dx, dy] of [\n            [1, 0],\n            [-1, 0],\n            [0, 1],\n            [0, -1],\n        ]) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                labels[ny][nx] !== +largestLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n    let start = null;\n    outer: for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (isBorder(x, y)) {\n                start = [x, y];\n                break outer;\n            }\n        }\n    }\n    if (!start) {\n        return [];\n    }\n    const dirs = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n    ];\n    const contour = [];\n    let current = start;\n    let prev = [start[0] - 1, start[1]];\n    do {\n        contour.push([current[0], current[1]]);\n        const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];\n        let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);\n        if (startDir < 0) {\n            startDir = 0;\n        }\n        let nextPt = null;\n        for (let k = 1; k <= 8; k++) {\n            const [dx, dy] = dirs[(startDir + k) % 8];\n            const nx = current[0] + dx, ny = current[1] + dy;\n            if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {\n                nextPt = [nx, ny];\n                const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];\n                prev = [current[0] + bdx, current[1] + bdy];\n                break;\n            }\n        }\n        if (!nextPt) {\n            break;\n        }\n        current = nextPt;\n    } while (current[0] !== start[0] || current[1] !== start[1]);\n    return contour;\n}\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.metadata.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { QuadraticSpline } from './QuadraticSpline';\nconst TRANSFORM_MATRIX = [\n    1, 0, 0,\n    -2, 2, 0,\n    1, -2, 1,\n];\nclass QuadraticBezier extends QuadraticSpline {\n    hasTangentPoints() {\n        return true;\n    }\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { QuadraticBezier as default, QuadraticBezier };\n","import { Spline } from './Spline';\nclass QuadraticSpline extends Spline {\n    getSplineCurves() {\n        return [];\n    }\n    getLineSegments() {\n        return [];\n    }\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        return [];\n    }\n}\nexport { QuadraticSpline as default, QuadraticSpline };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { utilities, getEnabledElement, cache, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nclass AnnotationDisplayTool extends BaseTool {\n    constructor() {\n        super(...arguments);\n        this.onImageSpacingCalibrated = (evt) => {\n            const { element, imageId } = evt.detail;\n            const imageURI = utilities.imageIdToURI(imageId);\n            const annotationManager = getAnnotationManager();\n            const framesOfReference = annotationManager.getFramesOfReference();\n            framesOfReference.forEach((frameOfReference) => {\n                const frameOfReferenceSpecificAnnotations = annotationManager.getAnnotations(frameOfReference);\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[this.getToolName()];\n                if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n                    return;\n                }\n                toolSpecificAnnotations.forEach((annotation) => {\n                    if (!annotation.metadata?.referencedImageId) {\n                        return;\n                    }\n                    const referencedImageURI = utilities.imageIdToURI(annotation.metadata.referencedImageId);\n                    if (referencedImageURI === imageURI) {\n                        annotation.invalidated = true;\n                        annotation.data.cachedStats = {};\n                    }\n                });\n                triggerAnnotationRender(element);\n            });\n        };\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations?.length) {\n            return [];\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        return filterAnnotationsForDisplay(viewport, annotations);\n    }\n    createAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp, position: cameraPosition } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const viewReference = viewport.getViewReference({ points: [worldPos] });\n        return {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                ...viewReference,\n                referencedImageId,\n                viewUp,\n                cameraPosition,\n            },\n            data: {\n                cachedStats: {},\n                handles: {\n                    points: [],\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n            },\n        };\n    }\n    getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId = targetId.split(/^[a-zA-Z]+:/)[1];\n        if (viewport instanceof BaseVolumeViewport) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const imageVolume = cache.getVolume(volumeId);\n            referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n        }\n        return referencedImageId;\n    }\n    getStyle(property, specifications, annotation) {\n        return getStyleProperty(property, specifications, getState(annotation), this.mode);\n    }\n}\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import { utilities } from '@cornerstonejs/core';\nimport ToolModes from '../../enums/ToolModes';\nconst { DefaultHistoryMemo } = utilities.HistoryMemo;\nclass BaseTool {\n    static { this.defaults = {\n        configuration: {\n            strategies: {},\n            defaultStrategy: undefined,\n            activeStrategy: undefined,\n            strategyOptions: {},\n        },\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        const mergedDefaults = BaseTool.mergeDefaultProps(BaseTool.defaults, defaultToolProps);\n        const initialProps = utilities.deepMerge(mergedDefaults, toolProps);\n        const { configuration = {}, supportedInteractionTypes, toolGroupId, } = initialProps;\n        this.toolGroupId = toolGroupId;\n        this.supportedInteractionTypes = supportedInteractionTypes || [];\n        this.configuration = Object.assign({}, configuration);\n        this.mode = ToolModes.Disabled;\n    }\n    static mergeDefaultProps(defaultProps = {}, additionalProps) {\n        if (!additionalProps) {\n            return defaultProps;\n        }\n        return utilities.deepMerge(defaultProps, additionalProps);\n    }\n    get toolName() {\n        return this.getToolName();\n    }\n    getToolName() {\n        return this.constructor.toolName;\n    }\n    applyActiveStrategy(enabledElement, operationData) {\n        const { strategies, activeStrategy } = this.configuration;\n        return strategies[activeStrategy]?.call(this, enabledElement, operationData);\n    }\n    applyActiveStrategyCallback(enabledElement, operationData, callbackType, ...extraArgs) {\n        const { strategies, activeStrategy } = this.configuration;\n        if (!strategies[activeStrategy]) {\n            throw new Error(`applyActiveStrategyCallback: active strategy ${activeStrategy} not found, check tool configuration or spellings`);\n        }\n        return strategies[activeStrategy][callbackType]?.call(this, enabledElement, operationData, ...extraArgs);\n    }\n    setConfiguration(newConfiguration) {\n        this.configuration = utilities.deepMerge(this.configuration, newConfiguration);\n    }\n    setActiveStrategy(strategyName) {\n        this.setConfiguration({ activeStrategy: strategyName });\n    }\n    getTargetImageData(targetId) {\n        if (targetId.startsWith('imageId:')) {\n            const imageId = targetId.split('imageId:')[1];\n            const imageURI = utilities.imageIdToURI(imageId);\n            let viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            viewports = viewports.filter((viewport) => {\n                return viewport.getCurrentImageId() === imageId;\n            });\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('volumeId:')) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const viewports = utilities.getViewportsWithVolumeId(volumeId);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('videoId:')) {\n            const imageURI = utilities.imageIdToURI(targetId);\n            const viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else {\n            throw new Error('getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"');\n        }\n    }\n    getTargetId(viewport) {\n        const targetId = viewport.getViewReferenceId?.();\n        if (targetId) {\n            return targetId;\n        }\n        throw new Error('getTargetId: viewport must have a getViewReferenceId method');\n    }\n    undo() {\n        this.doneEditMemo();\n        DefaultHistoryMemo.undo();\n    }\n    redo() {\n        DefaultHistoryMemo.redo();\n    }\n    static createZoomPanMemo(viewport) {\n        const state = {\n            pan: viewport.getPan(),\n            zoom: viewport.getZoom(),\n        };\n        const zoomPanMemo = {\n            restoreMemo: () => {\n                const currentPan = viewport.getPan();\n                const currentZoom = viewport.getZoom();\n                viewport.setZoom(state.zoom);\n                viewport.setPan(state.pan);\n                viewport.render();\n                state.pan = currentPan;\n                state.zoom = currentZoom;\n            },\n        };\n        DefaultHistoryMemo.push(zoomPanMemo);\n        return zoomPanMemo;\n    }\n    doneEditMemo() {\n        if (this.memo?.commitMemo?.()) {\n            DefaultHistoryMemo.push(this.memo);\n        }\n        this.memo = null;\n    }\n    static startGroupRecording() {\n        DefaultHistoryMemo.startGroupRecording();\n    }\n    static endGroupRecording() {\n        DefaultHistoryMemo.endGroupRecording();\n    }\n}\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { cache, getEnabledElementByViewportId, Enums, utilities, } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport { handleContourSegmentation } from './contourHandler/handleContourSegmentation';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport removeContourFromElement from './removeContourFromElement';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { getUniqueSegmentIndices } from '../../../utilities/segmentation/getUniqueSegmentIndices';\nimport { getAnnotation } from '../../../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nconst polySegConversionInProgressForViewportId = new Map();\nconst processedViewportSegmentations = new Map();\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeContourFromElement(viewportId, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, contourRepresentation) {\n    const { segmentationId } = contourRepresentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let contourData = segmentation.representationData[Representations.Contour];\n    const polySeg = getPolySeg();\n    if (!contourData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, Representations.Contour) &&\n        !polySegConversionInProgressForViewportId.get(viewport.id)) {\n        polySegConversionInProgressForViewportId.set(viewport.id, true);\n        contourData = await computeAndAddRepresentation(segmentationId, Representations.Contour, () => polySeg.computeContourData(segmentationId, { viewport }), () => undefined);\n        polySegConversionInProgressForViewportId.set(viewport.id, false);\n    }\n    else if (!contourData && !getPolySeg()) {\n        console.debug(`No contour data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to contour. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!contourData) {\n        return;\n    }\n    if (!contourData.geometryIds?.length) {\n        return;\n    }\n    let hasContourDataButNotMatchingViewport = false;\n    const viewportNormal = viewport.getCamera().viewPlaneNormal;\n    if (contourData.annotationUIDsMap) {\n        hasContourDataButNotMatchingViewport = !_checkContourNormalsMatchViewport(contourData.annotationUIDsMap, viewportNormal);\n    }\n    if (contourData.geometryIds.length > 0) {\n        hasContourDataButNotMatchingViewport = !_checkContourGeometryMatchViewport(contourData.geometryIds, viewportNormal);\n    }\n    const viewportProcessed = processedViewportSegmentations.get(viewport.id) || new Set();\n    if (hasContourDataButNotMatchingViewport &&\n        !polySegConversionInProgressForViewportId.get(viewport.id) &&\n        !viewportProcessed.has(segmentationId) &&\n        viewport.viewportStatus === Enums.ViewportStatus.RENDERED) {\n        polySegConversionInProgressForViewportId.set(viewport.id, true);\n        const segmentIndices = getUniqueSegmentIndices(segmentationId);\n        const surfacesInfo = await polySeg.computeSurfaceData(segmentationId, {\n            segmentIndices,\n            viewport,\n        });\n        const geometryIds = surfacesInfo.geometryIds;\n        const pointsAndPolys = [];\n        for (const geometryId of geometryIds.values()) {\n            const geometry = cache.getGeometry(geometryId);\n            const data = geometry.data;\n            pointsAndPolys.push({\n                points: data.points,\n                polys: data.polys,\n                segmentIndex: data.segmentIndex,\n                id: data.segmentIndex,\n            });\n        }\n        const polyDataCache = await polySeg.clipAndCacheSurfacesForViewport(pointsAndPolys, viewport);\n        const rawResults = polySeg.extractContourData(polyDataCache);\n        const annotationUIDsMap = polySeg.createAndAddContourSegmentationsFromClippedSurfaces(rawResults, viewport, segmentationId);\n        contourData.annotationUIDsMap = new Map([\n            ...contourData.annotationUIDsMap,\n            ...annotationUIDsMap,\n        ]);\n        viewportProcessed.add(segmentationId);\n        processedViewportSegmentations.set(viewport.id, viewportProcessed);\n        polySegConversionInProgressForViewportId.set(viewport.id, false);\n    }\n    handleContourSegmentation(viewport, contourData.geometryIds, contourData.annotationUIDsMap, contourRepresentation);\n}\nfunction _checkContourGeometryMatchViewport(geometryIds, viewportNormal) {\n    let validGeometry = null;\n    let geometryData = null;\n    for (const geometryId of geometryIds) {\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry) {\n            continue;\n        }\n        const data = geometry.data;\n        if (data.contours?.[0]?.points?.length >= 3) {\n            validGeometry = geometry;\n            geometryData = data;\n            break;\n        }\n    }\n    if (!validGeometry || !geometryData) {\n        return false;\n    }\n    const contours = geometryData.contours;\n    const points = contours[0].points;\n    const point1 = points[0];\n    const point2 = points[1];\n    const point3 = points[2];\n    let normal = vec3.cross(vec3.create(), vec3.sub(vec3.create(), point2, point1), vec3.sub(vec3.create(), point3, point1));\n    normal = vec3.normalize(vec3.create(), normal);\n    const dotProduct = vec3.dot(normal, viewportNormal);\n    return Math.abs(dotProduct) > 0.9;\n}\nfunction _checkContourNormalsMatchViewport(annotationUIDsMap, viewportNormal) {\n    const annotationUIDs = Array.from(annotationUIDsMap.values())\n        .flat()\n        .map((uidSet) => Array.from(uidSet))\n        .flat();\n    const randomAnnotationUIDs = utilities.getRandomSampleFromArray(annotationUIDs, 3);\n    for (const annotationUID of randomAnnotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        if (annotation?.metadata) {\n            if (!annotation.metadata.viewPlaneNormal) {\n                continue;\n            }\n            const annotationNormal = annotation.metadata.viewPlaneNormal;\n            const dotProduct = Math.abs(viewportNormal[0] * annotationNormal[0] +\n                viewportNormal[1] * annotationNormal[1] +\n                viewportNormal[2] * annotationNormal[2]);\n            if (Math.abs(dotProduct - 1) > 0.01) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nexport default {\n    render,\n    removeRepresentation,\n};\n","import { getEnabledElementByViewportId, VolumeViewport, } from '@cornerstonejs/core';\nimport addLabelmapToElement from './addLabelmapToElement';\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\nimport { getActiveSegmentation } from '../../../stateManagement/segmentation/activeSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { segmentationStyle } from '../../../stateManagement/segmentation/SegmentationStyle';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport { internalGetHiddenSegmentIndices } from '../../../stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices';\nimport { getActiveSegmentIndex } from '../../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getLabelmapActorEntries } from '../../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { defaultSegmentationStateManager } from '../../../stateManagement/segmentation/SegmentationStateManager';\nexport const MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\nlet polySegConversionInProgress = false;\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    labelMapConfigCache.forEach((value, key) => {\n        if (key.includes(segmentationId)) {\n            labelMapConfigCache.delete(key);\n        }\n    });\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeLabelmapFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId, config } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn('No segmentation found for segmentationId: ', segmentationId);\n        return;\n    }\n    let labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    let labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    if (!labelmapData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, SegmentationRepresentations.Labelmap) &&\n        !polySegConversionInProgress) {\n        polySegConversionInProgress = true;\n        const polySeg = getPolySeg();\n        labelmapData = await computeAndAddRepresentation(segmentationId, SegmentationRepresentations.Labelmap, () => polySeg.computeLabelmapData(segmentationId, { viewport }), () => null, () => {\n            defaultSegmentationStateManager.processLabelmapRepresentationAddition(viewport.id, segmentationId);\n            setTimeout(() => {\n                triggerSegmentationDataModified(segmentationId);\n            }, 0);\n        });\n        if (!labelmapData) {\n            throw new Error(`No labelmap data found for segmentationId ${segmentationId}.`);\n        }\n        polySegConversionInProgress = false;\n    }\n    else if (!labelmapData && !getPolySeg()) {\n        console.debug(`No labelmap data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to labelmap. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!labelmapData) {\n        return;\n    }\n    if (viewport instanceof VolumeViewport) {\n        if (!labelmapActorEntries?.length) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config);\n        }\n        labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    }\n    else {\n        const labelmapImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentationId);\n        if (!labelmapImageIds?.length) {\n            return;\n        }\n        if (!labelmapActorEntries) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config);\n        }\n        labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    }\n    if (!labelmapActorEntries?.length) {\n        return;\n    }\n    for (const labelmapActorEntry of labelmapActorEntries) {\n        _setLabelmapColorAndOpacity(viewport.id, labelmapActorEntry, representation);\n    }\n}\nfunction _setLabelmapColorAndOpacity(viewportId, labelmapActorEntry, segmentationRepresentation) {\n    const { segmentationId } = segmentationRepresentation;\n    const { cfun, ofun } = segmentationRepresentation.config;\n    const { colorLUTIndex } = segmentationRepresentation;\n    const activeSegmentation = getActiveSegmentation(viewportId);\n    const isActiveLabelmap = activeSegmentation?.segmentationId === segmentationId;\n    const labelmapStyle = segmentationStyle.getStyle({\n        viewportId,\n        type: SegmentationRepresentations.Labelmap,\n        segmentationId,\n    });\n    const renderInactiveSegmentations = segmentationStyle.getRenderInactiveSegmentations(viewportId);\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const numColors = Math.min(256, colorLUT.length);\n    const { outlineWidth, renderOutline, outlineOpacity, activeSegmentOutlineWidthDelta, } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap);\n    const segmentsHidden = internalGetHiddenSegmentIndices(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    });\n    for (let i = 0; i < numColors; i++) {\n        const segmentIndex = i;\n        const segmentColor = colorLUT[segmentIndex];\n        const perSegmentStyle = segmentationStyle.getStyle({\n            viewportId,\n            type: SegmentationRepresentations.Labelmap,\n            segmentationId,\n            segmentIndex,\n        });\n        const segmentSpecificLabelmapConfig = perSegmentStyle;\n        const { fillAlpha, outlineWidth, renderFill, renderOutline } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap, segmentSpecificLabelmapConfig);\n        const { forceOpacityUpdate, forceColorUpdate } = _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            segmentColor,\n            outlineWidth,\n            segmentsHidden: segmentsHidden,\n            cfun,\n            ofun,\n        });\n        if (forceColorUpdate) {\n            cfun.addRGBPoint(segmentIndex, segmentColor[0] / MAX_NUMBER_COLORS, segmentColor[1] / MAX_NUMBER_COLORS, segmentColor[2] / MAX_NUMBER_COLORS);\n        }\n        if (forceOpacityUpdate) {\n            if (renderFill) {\n                const segmentOpacity = segmentsHidden.has(segmentIndex)\n                    ? 0\n                    : (segmentColor[3] / 255) * fillAlpha;\n                ofun.removePoint(segmentIndex);\n                ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n            }\n            else {\n                ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n            }\n        }\n    }\n    ofun.setClamping(false);\n    const labelmapActor = labelmapActorEntry.actor;\n    const { preLoad } = labelmapActor.get?.('preLoad') || { preLoad: null };\n    if (preLoad) {\n        preLoad({ cfun, ofun, actor: labelmapActor });\n    }\n    else {\n        labelmapActor.getProperty().setRGBTransferFunction(0, cfun);\n        labelmapActor.getProperty().setScalarOpacity(0, ofun);\n        labelmapActor.getProperty().setInterpolationTypeToNearest();\n    }\n    if (renderOutline) {\n        labelmapActor.getProperty().setUseLabelOutline(renderOutline);\n        labelmapActor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n        const activeSegmentIndex = getActiveSegmentIndex(segmentationRepresentation.segmentationId);\n        const outlineWidths = new Array(numColors - 1);\n        for (let i = 1; i < numColors; i++) {\n            const isHidden = segmentsHidden.has(i);\n            if (isHidden) {\n                outlineWidths[i - 1] = 0;\n                continue;\n            }\n            outlineWidths[i - 1] =\n                i === activeSegmentIndex\n                    ? outlineWidth + activeSegmentOutlineWidthDelta\n                    : outlineWidth;\n        }\n        labelmapActor.getProperty().setLabelOutlineThickness(outlineWidths);\n        labelmapActor.modified();\n        labelmapActor.getProperty().modified();\n        labelmapActor.getMapper().modified();\n    }\n    else {\n        labelmapActor\n            .getProperty()\n            .setLabelOutlineThickness(new Array(numColors - 1).fill(0));\n    }\n    const visible = isActiveLabelmap || renderInactiveSegmentations;\n    labelmapActor.setVisibility(visible);\n}\nfunction _getLabelmapConfig(labelmapConfig, isActiveLabelmap, segmentsLabelmapConfig) {\n    const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n    const configToUse = {\n        ...labelmapConfig,\n        ...segmentLabelmapConfig,\n    };\n    const fillAlpha = isActiveLabelmap\n        ? configToUse.fillAlpha\n        : configToUse.fillAlphaInactive;\n    const outlineWidth = isActiveLabelmap\n        ? configToUse.outlineWidth\n        : configToUse.outlineWidthInactive;\n    const renderFill = isActiveLabelmap\n        ? configToUse.renderFill\n        : configToUse.renderFillInactive;\n    const renderOutline = isActiveLabelmap\n        ? configToUse.renderOutline\n        : configToUse.renderOutlineInactive;\n    const outlineOpacity = isActiveLabelmap\n        ? configToUse.outlineOpacity\n        : configToUse.outlineOpacityInactive;\n    const activeSegmentOutlineWidthDelta = configToUse.activeSegmentOutlineWidthDelta;\n    return {\n        fillAlpha,\n        outlineWidth,\n        renderFill,\n        renderOutline,\n        outlineOpacity,\n        activeSegmentOutlineWidthDelta,\n    };\n}\nfunction _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, { fillAlpha, renderFill, renderOutline, segmentColor, outlineWidth, segmentsHidden, cfun, ofun, }) {\n    const cacheUID = `${viewportId}-${segmentationId}-${segmentIndex}`;\n    const oldConfig = labelMapConfigCache.get(cacheUID);\n    if (!oldConfig) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n        return {\n            forceOpacityUpdate: true,\n            forceColorUpdate: true,\n        };\n    }\n    const { fillAlpha: oldFillAlpha, renderFill: oldRenderFill, renderOutline: oldRenderOutline, outlineWidth: oldOutlineWidth, segmentColor: oldSegmentColor, segmentsHidden: oldSegmentsHidden, cfunMTime: oldCfunMTime, ofunMTime: oldOfunMTime, } = oldConfig;\n    const forceColorUpdate = oldSegmentColor[0] !== segmentColor[0] ||\n        oldSegmentColor[1] !== segmentColor[1] ||\n        oldSegmentColor[2] !== segmentColor[2];\n    const forceOpacityUpdate = oldSegmentColor[3] !== segmentColor[3] ||\n        oldFillAlpha !== fillAlpha ||\n        oldRenderFill !== renderFill ||\n        oldRenderOutline !== renderOutline ||\n        oldOutlineWidth !== outlineWidth ||\n        oldSegmentsHidden !== segmentsHidden;\n    if (forceOpacityUpdate || forceColorUpdate) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n    }\n    return {\n        forceOpacityUpdate,\n        forceColorUpdate,\n    };\n}\nasync function _addLabelmapToViewport(viewport, labelmapData, segmentationId, config) {\n    const result = await addLabelmapToElement(viewport.element, labelmapData, segmentationId, config);\n    return result || undefined;\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { cache, getEnabledElementByViewportId, Enums, } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport removeSurfaceFromElement from './removeSurfaceFromElement';\nimport addOrUpdateSurfaceToElement from './addOrUpdateSurfaceToElement';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { internalGetHiddenSegmentIndices } from '../../../stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices';\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeSurfaceFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId, type } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let SurfaceData = segmentation.representationData[Representations.Surface];\n    if (!SurfaceData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, Representations.Surface)) {\n        const polySeg = getPolySeg();\n        SurfaceData = await computeAndAddRepresentation(segmentationId, Representations.Surface, () => polySeg.computeSurfaceData(segmentationId, { viewport }), () => polySeg.updateSurfaceData(segmentationId, { viewport }));\n        if (!SurfaceData) {\n            throw new Error(`No Surface data found for segmentationId ${segmentationId} even we tried to compute it`);\n        }\n    }\n    else if (!SurfaceData && !getPolySeg()) {\n        console.debug(`No surface data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to surface. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!SurfaceData) {\n        console.warn(`No Surface data found for segmentationId ${segmentationId}. Skipping render.`);\n        return;\n    }\n    const { geometryIds } = SurfaceData;\n    if (!geometryIds?.size) {\n        console.warn(`No Surfaces found for segmentationId ${segmentationId}. Skipping render.`);\n    }\n    const { colorLUTIndex } = representation;\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const surfaces = [];\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry?.data) {\n            console.warn(`No Surfaces found for geometryId ${geometryId}. Skipping render.`);\n            return;\n        }\n        const { segmentIndex } = geometry.data;\n        const hiddenSegments = internalGetHiddenSegmentIndices(viewport.id, {\n            segmentationId,\n            type,\n        });\n        const isHidden = hiddenSegments.has(segmentIndex);\n        const surface = geometry.data;\n        const color = colorLUT[segmentIndex];\n        surface.color = color.slice(0, 3);\n        surface.visible = !isHidden;\n        surfaces.push(surface);\n        addOrUpdateSurfaceToElement(viewport.element, surface, segmentationId);\n    });\n    viewport.render();\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            simplified: true,\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [canvasCoordinates[0], canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const handlesToStart = csUtils.deepClone(points);\n        const startWorld = vec3.clone(points[0]);\n        const endWorld = vec3.clone(points[0]);\n        const indexOfNormal = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        startWorld[indexOfNormal] = startCoordinate;\n        endWorld[indexOfNormal] = endCoordinate;\n        handlesToStart.forEach((handlePoint) => {\n            handlePoint[indexOfNormal] = startCoordinate;\n        });\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        if (distance >= 0) {\n            newProjectionPoints.push(handlesToStart.map((p) => Array.from(p)));\n        }\n        for (let dist = spacingInNormal; dist <= distance; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const baseTopLeftCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[0];\n        const baseBottomRightCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[1];\n        const basePos1 = viewport.canvasToWorld(baseTopLeftCanvas);\n        const basePos2 = viewport.canvasToWorld(baseBottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, basePos1, basePos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles.points);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const currentCanvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([\n                currentCanvasCoordinates[0],\n                currentCanvasCoordinates[1],\n            ]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { Events, SegmentationRepresentations } from '../../enums';\nimport { eventTarget, utilities, getRenderingEngine, } from '@cornerstonejs/core';\nimport PlanarFreehandContourSegmentationTool from '../annotation/PlanarFreehandContourSegmentationTool';\nimport BrushTool from './BrushTool';\nimport * as segmentation from '../../stateManagement/segmentation';\nimport { getSegmentationRepresentationsBySegmentationId } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nclass LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool {\n    static { this.toolName = 'LabelMapEditWithContour'; }\n    static { this.annotationsToViewportMap = new Map(); }\n    static { this.viewportIdsChecked = []; }\n    constructor(toolProps = {}) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.onViewportAddedToToolGroupBinded =\n            this.onViewportAddedToToolGroup.bind(this);\n        this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);\n    }\n    initializeListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n    }\n    cleanUpListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n    }\n    async checkContourSegmentation(viewportId) {\n        if (LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {\n            return;\n        }\n        const activeSeg = segmentation.getActiveSegmentation(viewportId);\n        if (!activeSeg) {\n            console.log('No active segmentation detected');\n            return false;\n        }\n        const segmentationId = activeSeg.segmentationId;\n        if (!activeSeg.representationData.Contour) {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n            await segmentation.addContourRepresentationToViewport(viewportId, [\n                {\n                    segmentationId,\n                    type: SegmentationRepresentations.Contour,\n                },\n            ]);\n            segmentation.addRepresentationData({\n                segmentationId,\n                type: SegmentationRepresentations.Contour,\n                data: {},\n            });\n        }\n        else {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n        }\n        return true;\n    }\n    onViewportAddedToToolGroup(evt) {\n        const { toolGroupId, viewportId } = evt.detail;\n        if (toolGroupId !== this.toolGroupId) {\n            return;\n        }\n        this.checkContourSegmentation(viewportId);\n    }\n    onSegmentationModified(evt) {\n        const { segmentationId } = evt.detail || {};\n        if (!segmentationId) {\n            return;\n        }\n        const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);\n        if (!representations) {\n            return;\n        }\n        representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.cleanUpListeners();\n    }\n    annotationModified(evt) {\n        const { annotation, renderingEngineId, viewportId } = evt.detail;\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        if (!viewport) {\n            return;\n        }\n        LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);\n    }\n    annotationCompleted(evt) {\n        const { annotation } = evt.detail;\n        const { polyline } = annotation.data?.contour || {};\n        if (annotation?.metadata?.toolName !== LabelMapEditWithContourTool.toolName) {\n            return;\n        }\n        if (!polyline) {\n            return;\n        }\n        if (LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {\n            const viewport = LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);\n            if (polyline.length > 3) {\n                BrushTool.viewportContoursToLabelmap(viewport);\n            }\n        }\n    }\n}\nexport default LabelMapEditWithContourTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                    spacingInNormal,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        projectionPointsImageIds: [referencedImageId],\n                        statistics: [],\n                    },\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let startCoord = startCoordinate;\n                let endCoord = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    startCoord = this._getCoordinateForViewplaneNormal(startCoord, viewplaneNormal);\n                    const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal);\n                    data.handles.points.forEach((point) => {\n                        point[indexOfDirection] = startCoord;\n                    });\n                    data.startCoordinate = startCoord;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    endCoord = this._getCoordinateForViewplaneNormal(endCoord, viewplaneNormal);\n                    data.endCoordinate = endCoord;\n                    data.endCoordinate = endCoord;\n                }\n                const roundedStartCoord = csUtils.roundToPrecision(startCoord);\n                const roundedEndCoord = csUtils.roundToPrecision(endCoord);\n                const coord = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCoord = csUtils.roundToPrecision(coord);\n                if (roundedCoord < Math.min(roundedStartCoord, roundedEndCoord) ||\n                    roundedCoord > Math.max(roundedStartCoord, roundedEndCoord)) {\n                    continue;\n                }\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                let firstOrLastSlice = false;\n                if (roundedCoord === roundedStartCoord ||\n                    roundedCoord === roundedEndCoord) {\n                    firstOrLastSlice = true;\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    firstOrLastSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineDashToUse = lineDash;\n                if (!firstOrLastSlice) {\n                    lineDashToUse = 2;\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth,\n                });\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    if (!data.handles.textBox.hasMoved) {\n                        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        const endIJK = transformWorldToIndex(imageData, points[0]);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        if (projectionAxisIndex == 2) {\n            startWorld[2] = startCoordinate;\n            endWorld[2] = endCoordinate;\n        }\n        else if (projectionAxisIndex == 0) {\n            startWorld[0] = startCoordinate;\n            endWorld[0] = endCoordinate;\n        }\n        else if (projectionAxisIndex == 1) {\n            startWorld[1] = startCoordinate;\n            endWorld[1] = endCoordinate;\n        }\n        const direction = vec3.create();\n        vec3.subtract(direction, endWorld, startWorld);\n        const distance = vec3.length(direction);\n        vec3.normalize(direction, direction);\n        const newProjectionPoints = [];\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(points.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, direction, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[3];\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.habdles);\n        const area = Math.abs(worldWidth * worldHeight) /\n            (measureInfo.scale * measureInfo.scale);\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const projectionPoint = projectionPoints[i][0];\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, projectionPoint);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                this.isHandleOutsideImage = false;\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, viewPlaneNormal) {\n        const startPos = worldPos;\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagate * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nclass RectangleROIThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const targetId = this.getTargetId(viewport);\n            let referencedImageId, volumeId;\n            if (viewport instanceof StackViewport) {\n                referencedImageId = targetId.split('imageId:')[1];\n            }\n            else {\n                volumeId = csUtils.getVolumeId(targetId);\n                const imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: null,\n                            worldBoundingBox: null,\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    segmentationId: null,\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                triggerAnnotationModified(annotation, element);\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n}\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const color = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, hoveredSegmentIndex);\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            color,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, color, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const offset = -15;\n        const textBoxPosition = [\n            canvasCoordinates[0] + offset,\n            canvasCoordinates[1] + offset,\n        ];\n        const boundingBox = drawTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ?? '(unnamed segment)'], textBoxPosition, {\n            color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n        });\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { cache, utilities as csUtils } from '@cornerstonejs/core';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\nimport { getSegmentation } from '../../../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateImageVolume from '../../../../utilities/segmentation/getOrCreateImageVolume';\nexport default {\n    [StrategyCallbacks.EnsureImageVolumeFor3DManipulation]: (data) => {\n        const { operationData, viewport } = data;\n        let referencedImageIds;\n        if (viewport) {\n            referencedImageIds = viewport.getImageIds();\n            const isValidVolumeForSphere = csUtils.isValidVolume(referencedImageIds);\n            if (!isValidVolumeForSphere) {\n                throw new Error('Volume is not reconstructable for sphere manipulation');\n            }\n        }\n        else {\n            const segmentation = getSegmentation(operationData.segmentationId);\n            const imageIds = segmentation.representationData\n                .Labelmap.imageIds;\n            referencedImageIds = imageIds.map((imageId) => {\n                const image = cache.getImage(imageId);\n                return image.referencedImageId;\n            });\n        }\n        const imageVolume = getOrCreateImageVolume(referencedImageIds);\n        if (!imageVolume) {\n            throw new Error('Failed to create or get image volume');\n        }\n        operationData.imageVoxelManager = imageVolume.voxelManager;\n        operationData.imageData = imageVolume.imageData;\n    },\n};\n","import { utilities, cache } from '@cornerstonejs/core';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\nimport getOrCreateSegmentationVolume from '../../../../utilities/segmentation/getOrCreateSegmentationVolume';\nexport default {\n    [StrategyCallbacks.EnsureSegmentationVolumeFor3DManipulation]: (data) => {\n        const { operationData, viewport } = data;\n        const { segmentationId, imageIds: segImageIds } = operationData;\n        const referencedImageIds = viewport\n            ? viewport.getImageIds()\n            : segImageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n        const isValidVolumeForSphere = utilities.isValidVolume(referencedImageIds);\n        if (!isValidVolumeForSphere) {\n            throw new Error('Volume is not reconstructable for sphere manipulation');\n        }\n        const segVolume = getOrCreateSegmentationVolume(segmentationId);\n        if (!segVolume) {\n            return;\n        }\n        operationData.segmentationVoxelManager = segVolume.voxelManager;\n        operationData.segmentationImageData = segVolume.imageData;\n        return;\n    },\n};\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getCanvasEllipseCorners, precalculatePointInEllipse, } from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, isEqual } = csUtils;\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = getCanvasEllipseCorners(canvasCoordinates);\n        const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n        const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n        const circleCornersIJK = points.map((world) => {\n            return transformWorldToIndex(segmentationImageData, world);\n        });\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.isInObject = createPointInEllipse({\n            topLeftWorld,\n            bottomRightWorld,\n            center,\n        });\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(worldInfo) {\n    const { topLeftWorld, bottomRightWorld, center } = worldInfo;\n    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n    const radius = Math.max(xRadius, yRadius, zRadius);\n    if (isEqual(xRadius, radius) &&\n        isEqual(yRadius, radius) &&\n        isEqual(zRadius, radius)) {\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n    }\n    const ellipseObj = {\n        center: center,\n        xRadius,\n        yRadius,\n        zRadius,\n    };\n    const { precalculated } = precalculatePointInEllipse(ellipseObj, {});\n    return precalculated;\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK, getBoundingBoxAroundShapeWorld, } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getStrategyData } from './utils/getStrategyData';\nimport { isAxisAlignedRectangle } from '../../../utilities/rectangleROITool/isAxisAlignedRectangle';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, imageVoxelManager, viewport, segmentationImageData, segmentationVoxelManager, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const isStackViewport = viewport instanceof StackViewport;\n    const isAligned = isStackViewport || isAxisAlignedRectangle(rectangleCornersIJK);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointsBoundsLPS = getBoundingBoxAroundShapeWorld(points);\n    let [[xMin, xMax], [yMin, yMax], [zMin, zMax]] = pointsBoundsLPS;\n    xMin -= EPS;\n    xMax += EPS;\n    yMin -= EPS;\n    yMax += EPS;\n    zMin -= EPS;\n    zMax += EPS;\n    const pointInShapeFn = isAligned\n        ? () => true\n        : (pointLPS) => {\n            const [x, y, z] = pointLPS;\n            const xInside = x >= xMin && x <= xMax;\n            const yInside = y >= yMin && y <= yMax;\n            const zInside = z >= zMin && z <= zMax;\n            return xInside && yInside && zInside;\n        };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","export var ContourWindingDirection;\n(function (ContourWindingDirection) {\n    ContourWindingDirection[ContourWindingDirection[\"CounterClockwise\"] = -1] = \"CounterClockwise\";\n    ContourWindingDirection[ContourWindingDirection[\"Unknown\"] = 0] = \"Unknown\";\n    ContourWindingDirection[ContourWindingDirection[\"Clockwise\"] = 1] = \"Clockwise\";\n})(ContourWindingDirection || (ContourWindingDirection = {}));\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport { ChangeTypes } from '../enums';\nexport default class AnnotationMultiSlice {\n    static setStartRange(viewport, annotation, startRange = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, startRange);\n    }\n    static setEndRange(viewport, annotation, endRange = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, undefined, endRange);\n    }\n    static setRange(viewport, annotation, startRange, endRange) {\n        const { metadata } = annotation;\n        if (startRange === undefined) {\n            startRange = metadata.sliceIndex < endRange ? metadata.sliceIndex : 0;\n            if (endRange === undefined) {\n                endRange = viewport.getNumberOfSlices() - 1;\n            }\n        }\n        const rangeEndSliceIndex = viewport.getSliceIndexForImage(metadata.multiSliceReference);\n        if (endRange === undefined) {\n            endRange =\n                rangeEndSliceIndex >= startRange\n                    ? rangeEndSliceIndex\n                    : viewport.getNumberOfSlices() - 1;\n        }\n        endRange = Math.max(startRange, endRange);\n        metadata.sliceIndex = Math.min(startRange, endRange);\n        metadata.referencedImageId = viewport.getCurrentImageId(metadata.sliceIndex);\n        metadata.referencedImageURI = undefined;\n        if (endRange === metadata.sliceIndex) {\n            metadata.multiSliceReference = undefined;\n        }\n        else if (endRange !== metadata.multiSliceReference?.sliceIndex) {\n            metadata.multiSliceReference = {\n                referencedImageId: viewport.getCurrentImageId(endRange),\n                sliceIndex: endRange,\n            };\n        }\n        const eventDetail = {\n            viewportId: viewport.id,\n            renderingEngineId: viewport.renderingEngineId,\n            changeType: ChangeTypes.MetadataReferenceModified,\n            annotation,\n        };\n        triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n        this.setViewportFrameRange(viewport, metadata);\n    }\n    static setSingle(viewport, annotation, current = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, current, current);\n    }\n    static getFrameRange(annotation) {\n        const { metadata } = annotation;\n        const { sliceIndex, multiSliceReference } = metadata;\n        const rangeEndSliceIndex = multiSliceReference?.sliceIndex;\n        return rangeEndSliceIndex\n            ? [sliceIndex + 1, rangeEndSliceIndex + 1]\n            : sliceIndex + 1;\n    }\n    static getFrameRangeStr(annotation) {\n        const range = this.getFrameRange(annotation);\n        return Array.isArray(range) ? `${range[0]}-${range[1]}` : String(range);\n    }\n    static setViewportFrameRange(viewport, specifier) {\n        if (viewport.setFrameRange && specifier.multiSliceReference?.sliceIndex) {\n            viewport.setFrameRange(specifier.sliceIndex + 1, specifier.multiSliceReference.sliceIndex + 1);\n        }\n    }\n}\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { CONSTANTS } from '@cornerstonejs/core';\nconst { EPSILON } = CONSTANTS;\nfunction calculateBoundingBox(points, dimensions, isWorld = false) {\n    let xMin = Infinity;\n    let xMax = isWorld ? -Infinity : 0;\n    let yMin = Infinity;\n    let yMax = isWorld ? -Infinity : 0;\n    let zMin = Infinity;\n    let zMax = isWorld ? -Infinity : 0;\n    const is3D = points[0]?.length === 3;\n    for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        xMin = Math.min(p[0], xMin);\n        xMax = Math.max(p[0], xMax);\n        yMin = Math.min(p[1], yMin);\n        yMax = Math.max(p[1], yMax);\n        if (is3D) {\n            zMin = Math.min(p[2] ?? zMin, zMin);\n            zMax = Math.max(p[2] ?? zMax, zMax);\n        }\n    }\n    if (dimensions) {\n        xMin = Math.max(isWorld ? dimensions[0] + EPSILON : 0, xMin);\n        xMax = Math.min(isWorld ? dimensions[0] - EPSILON : dimensions[0] - 1, xMax);\n        yMin = Math.max(isWorld ? dimensions[1] + EPSILON : 0, yMin);\n        yMax = Math.min(isWorld ? dimensions[1] - EPSILON : dimensions[1] - 1, yMax);\n        if (is3D && dimensions.length === 3) {\n            zMin = Math.max(isWorld ? dimensions[2] + EPSILON : 0, zMin);\n            zMax = Math.min(isWorld ? dimensions[2] - EPSILON : dimensions[2] - 1, zMax);\n        }\n    }\n    else if (!isWorld) {\n        xMin = Math.max(0, xMin);\n        xMax = Math.min(Infinity, xMax);\n        yMin = Math.max(0, yMin);\n        yMax = Math.min(Infinity, yMax);\n        if (is3D) {\n            zMin = Math.max(0, zMin);\n            zMax = Math.min(Infinity, zMax);\n        }\n    }\n    return is3D\n        ? [\n            [xMin, xMax],\n            [yMin, yMax],\n            [zMin, zMax],\n        ]\n        : [[xMin, xMax], [yMin, yMax], null];\n}\nexport function getBoundingBoxAroundShapeIJK(points, dimensions) {\n    return calculateBoundingBox(points, dimensions, false);\n}\nexport function getBoundingBoxAroundShapeWorld(points, clipBounds) {\n    return calculateBoundingBox(points, clipBounds, true);\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n            bounce: playClipOptions.bounce ?? false,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    if (playClipOptions.bounce !== undefined) {\n        playClipData.bounce = playClipOptions.bounce;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (outOfRange) {\n            if (playClipData.bounce) {\n                playClipData.reverse = !playClipData.reverse;\n                newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n                newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));\n            }\n            else if (!playClipData.loop) {\n                _stopClip(element, {\n                    stopDynamicCine: !isDynamicCinePlaying,\n                    viewportId: viewport.id,\n                });\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n                return;\n            }\n            else {\n                newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;\n            }\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import { getEnabledElement } from '@cornerstonejs/core';\nconst state = {};\nfunction addToolState(element, data) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n    state[viewportId] = data;\n}\nfunction getToolState(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n    return state[viewportId];\n}\nfunction getToolStateByViewportId(viewportId) {\n    return state[viewportId];\n}\nexport { addToolState, getToolState, getToolStateByViewportId };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nexport function addContourSegmentationAnnotation(annotation) {\n    if (annotation.parentAnnotationUID) {\n        return;\n    }\n    if (!annotation.data.segmentation) {\n        throw new Error('addContourSegmentationAnnotation: annotation does not have a segmentation data');\n    }\n    const { segmentationId, segmentIndex } = annotation.data.segmentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation.representationData.Contour) {\n        segmentation.representationData.Contour = { annotationUIDsMap: new Map() };\n    }\n    let { annotationUIDsMap } = segmentation.representationData.Contour;\n    if (!annotationUIDsMap) {\n        annotationUIDsMap = new Map();\n    }\n    let annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        annotationsUIDsSet = new Set();\n        annotationUIDsMap.set(segmentIndex, annotationsUIDsSet);\n    }\n    annotationUIDsMap.set(segmentIndex, annotationsUIDsSet.add(annotation.annotationUID));\n}\n","export default function areSameSegment(firstAnnotation, secondAnnotation) {\n    const { segmentation: firstSegmentation } = firstAnnotation.data;\n    const { segmentation: secondSegmentation } = secondAnnotation.data;\n    return (firstSegmentation.segmentationId === secondSegmentation.segmentationId &&\n        firstSegmentation.segmentIndex === secondSegmentation.segmentIndex);\n}\n","export function areViewReferencesEqual(a, b) {\n    if (!a || !b) {\n        return false;\n    }\n    if (a.FrameOfReferenceUID !== b.FrameOfReferenceUID) {\n        return false;\n    }\n    if (a.referencedImageId !== b.referencedImageId) {\n        return false;\n    }\n    if (!a.viewPlaneNormal || !b.viewPlaneNormal) {\n        return false;\n    }\n    if (a.viewPlaneNormal.length !== b.viewPlaneNormal.length) {\n        return false;\n    }\n    for (let i = 0; i < a.viewPlaneNormal.length; i++) {\n        if (a.viewPlaneNormal[i] !== b.viewPlaneNormal[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import { getAnnotation } from '../../stateManagement/annotation/annotationState';\nimport getViewportsForAnnotation from '../getViewportsForAnnotation';\nimport { convertContourPolylineToCanvasSpace, checkIntersection, createPolylineHole, combinePolylines, } from './sharedOperations';\nexport async function contourSegmentationOperation(sourceAnnotationOrUID, targetAnnotationOrUID, viewport, contourHoleProcessingEnabled = true) {\n    const sourceAnnotation = typeof sourceAnnotationOrUID === 'string'\n        ? getAnnotation(sourceAnnotationOrUID)\n        : sourceAnnotationOrUID;\n    const targetAnnotation = typeof targetAnnotationOrUID === 'string'\n        ? getAnnotation(targetAnnotationOrUID)\n        : targetAnnotationOrUID;\n    if (!sourceAnnotation || !targetAnnotation) {\n        throw new Error('Both source and target annotations must be valid');\n    }\n    if (!viewport) {\n        viewport = getViewportFromAnnotation(sourceAnnotation);\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n    const intersectionInfo = checkIntersection(sourcePolyline, targetPolyline);\n    if (!intersectionInfo.hasIntersection) {\n        console.warn('No intersection found between the two annotations');\n        return;\n    }\n    if (intersectionInfo.isContourHole) {\n        if (!contourHoleProcessingEnabled) {\n            console.warn('Hole processing is disabled');\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction getViewportFromAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    if (!viewports.length) {\n        throw new Error('No viewport found for the annotation');\n    }\n    return viewports[0];\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotation } from '../../stateManagement';\nimport { getViewportAssociatedToSegmentation } from '../../stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { getAnnotationsUIDMapFromSegmentation } from '../../stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation';\nexport function copyAnnotation(annotation, segmentationId, segmentIndex) {\n    const newAnnotation = {\n        annotationUID: utilities.uuidv4(),\n        data: {\n            contour: {\n                closed: true,\n                polyline: [],\n            },\n            segmentation: {\n                segmentationId,\n                segmentIndex,\n            },\n            handles: {},\n        },\n        handles: {},\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            ...annotation.metadata,\n            toolName: annotation.metadata.toolName,\n        },\n    };\n    newAnnotation.data.segmentation.segmentationId = segmentationId;\n    newAnnotation.data.segmentation.segmentIndex = segmentIndex;\n    if (annotation.data.contour?.polyline) {\n        newAnnotation.data.contour.polyline = [...annotation.data.contour.polyline];\n    }\n    if (annotation.data.handles?.points) {\n        newAnnotation.data.handles.points = annotation.data.handles.points.map((point) => [...point]);\n    }\n    return newAnnotation;\n}\nexport function copyContourSegment(segmentationId, segmentIndex, targetSegmentationId, targetSegmentIndex) {\n    const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentationId);\n    const targetAnnotationUIDsMap = getAnnotationsUIDMapFromSegmentation(targetSegmentationId);\n    if (!annotationUIDsMap || !targetAnnotationUIDsMap) {\n        return;\n    }\n    if (!annotationUIDsMap?.has(segmentIndex)) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    const viewport = getViewportAssociatedToSegmentation(targetSegmentationId);\n    if (!viewport) {\n        return;\n    }\n    const toolGroup = getToolGroupForViewport(viewport.id);\n    const copyContourAnnotation = (annotation) => {\n        const newAnnotation = copyAnnotation(annotation, targetSegmentationId, targetSegmentIndex);\n        if (toolGroup) {\n            const instance = toolGroup.getToolInstance(annotation.metadata.toolName);\n            if (instance) {\n                if (typeof instance.isSplineAnnotation === 'function' &&\n                    instance.isSplineAnnotation(annotation)) {\n                    instance.createSplineObjectFromType(newAnnotation, annotation.data.spline.type);\n                }\n            }\n        }\n        addAnnotation(newAnnotation, viewport.element);\n        newAnnotationsUID.add(newAnnotation.annotationUID);\n        return newAnnotation;\n    };\n    const newAnnotationsUID = new Set();\n    for (const annotationUID of annotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        const newAnnotation = copyContourAnnotation(annotation);\n        if (annotation?.childAnnotationUIDs) {\n            newAnnotation.childAnnotationUIDs = [];\n            for (const childAnnotationUID of annotation.childAnnotationUIDs) {\n                const childAnnotation = getAnnotation(childAnnotationUID);\n                const newChildAnnotation = copyContourAnnotation(childAnnotation);\n                newChildAnnotation.parentAnnotationUID = newAnnotation.annotationUID;\n                newAnnotation.childAnnotationUIDs.push(newChildAnnotation.annotationUID);\n            }\n        }\n    }\n    targetAnnotationUIDsMap.set(targetSegmentIndex, newAnnotationsUID);\n}\n","import * as math from '../math';\nfunction findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations) {\n    const intersectingContours = [];\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    for (let i = 0; i < contourSegmentationAnnotations.length; i++) {\n        const targetAnnotation = contourSegmentationAnnotations[i];\n        const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n        const targetAABB = math.polyline.getAABB(targetPolyline);\n        const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n        if (!aabbIntersect) {\n            continue;\n        }\n        const lineSegmentsIntersect = math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n        const isContourHole = !lineSegmentsIntersect &&\n            math.polyline.containsPoints(targetPolyline, sourcePolyline);\n        if (lineSegmentsIntersect || isContourHole) {\n            intersectingContours.push({\n                targetAnnotation,\n                targetPolyline,\n                isContourHole,\n            });\n        }\n    }\n    return intersectingContours;\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport { findAllIntersectingContours };\n","export function getViewReferenceFromAnnotation(annotation) {\n    const { metadata } = annotation;\n    if (!metadata) {\n        return {};\n    }\n    const { FrameOfReferenceUID, referencedImageId, referencedImageURI, multiSliceReference, cameraFocalPoint, viewPlaneNormal, viewUp, sliceIndex, volumeId, bounds, } = metadata;\n    const viewReference = {\n        FrameOfReferenceUID,\n        referencedImageId,\n        referencedImageURI,\n        multiSliceReference,\n        cameraFocalPoint,\n        viewPlaneNormal,\n        viewUp,\n        sliceIndex,\n        volumeId,\n        bounds,\n    };\n    return viewReference;\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, removeAnnotation } from '../../stateManagement';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default function convertContourSegmentationAnnotation(annotation) {\n    const { polyline } = annotation.data?.contour || {};\n    if (!polyline || polyline.length < 3) {\n        console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n        return;\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n    const startPointWorld = polyline[0];\n    const endPointWorld = polyline[polyline.length - 1];\n    const newAnnotation = {\n        metadata: {\n            ...annotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: annotation.data.handles.textBox\n                    ? { ...annotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                ...annotation.data.contour,\n            },\n            spline: annotation.data.spline,\n            segmentation: {\n                ...annotation.data.segmentation,\n            },\n        },\n        annotationUID: utilities.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: annotation.interpolationUID,\n        interpolationCompleted: annotation.interpolationCompleted,\n    };\n    addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);\n    addContourSegmentationAnnotation(newAnnotation);\n    return newAnnotation;\n}\n","export default function isContourSegmentationAnnotation(annotation) {\n    return !!annotation.data?.segmentation;\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation } from '../../stateManagement';\nconst DEFAULT_CONTOUR_SEG_TOOLNAME = 'PlanarFreehandContourSegmentationTool';\nexport default function addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentationId, polylinesInfo, segmentIndex) {\n    polylinesInfo.forEach(({ polyline, viewReference }) => {\n        if (polyline.length < 3) {\n            return;\n        }\n        const contourSegmentationAnnotation = {\n            annotationUID: utilities.uuidv4(),\n            data: {\n                contour: {\n                    closed: true,\n                    polyline,\n                },\n                segmentation: {\n                    segmentationId,\n                    segmentIndex,\n                },\n                handles: {},\n            },\n            handles: {},\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: DEFAULT_CONTOUR_SEG_TOOLNAME,\n                ...viewReference,\n            },\n        };\n        addAnnotation(contourSegmentationAnnotation, viewport.element);\n        const currentSet = annotationUIDsMap?.get(segmentIndex) || new Set();\n        currentSet.add(contourSegmentationAnnotation.annotationUID);\n        annotationUIDsMap.set(segmentIndex, currentSet);\n    });\n    return annotationUIDsMap;\n}\n","import { getAnnotation, removeAnnotation } from '../../stateManagement';\nimport { convertContourPolylineToCanvasSpace, convertContourPolylineToWorld, } from './sharedOperations';\nimport addPolylinesToSegmentation from './addPolylinesToSegmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { copyContourSegment } from './copyAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { getViewportAssociatedToSegmentation } from '../../stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation';\nimport { unifyPolylineSets } from './polylineUnify';\nimport { subtractPolylineSets } from './polylineSubtract';\nimport { intersectPolylinesSets } from './polylineIntersect';\nimport { xorPolylinesSets } from './polylineXor';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nexport var LogicalOperation;\n(function (LogicalOperation) {\n    LogicalOperation[LogicalOperation[\"Union\"] = 0] = \"Union\";\n    LogicalOperation[LogicalOperation[\"Subtract\"] = 1] = \"Subtract\";\n    LogicalOperation[LogicalOperation[\"Intersect\"] = 2] = \"Intersect\";\n    LogicalOperation[LogicalOperation[\"XOR\"] = 3] = \"XOR\";\n    LogicalOperation[LogicalOperation[\"Copy\"] = 4] = \"Copy\";\n    LogicalOperation[LogicalOperation[\"Delete\"] = 5] = \"Delete\";\n})(LogicalOperation || (LogicalOperation = {}));\nfunction getPolylinesInfoWorld(contourRepresentationData, segmentIndex) {\n    const polylinesInfo = [];\n    const { annotationUIDsMap } = contourRepresentationData || {};\n    if (!annotationUIDsMap?.has(segmentIndex)) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    for (const annotationUID of annotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        const { polyline } = annotation.data.contour;\n        polylinesInfo.push({\n            polyline,\n            viewReference: getViewReferenceFromAnnotation(annotation),\n        });\n    }\n    return polylinesInfo;\n}\nfunction extractPolylinesInCanvasSpace(viewport, segment1, segment2) {\n    const segmentation1 = getSegmentation(segment1.segmentationId);\n    const segmentation2 = getSegmentation(segment2.segmentationId);\n    if (!segmentation1 || !segmentation2) {\n        return;\n    }\n    if (!segmentation1.representationData.Contour ||\n        !segmentation2.representationData.Contour) {\n        return;\n    }\n    const polyLinesInfoWorld1 = getPolylinesInfoWorld(segmentation1.representationData.Contour, segment1.segmentIndex);\n    const polyLinesInfoWorld2 = getPolylinesInfoWorld(segmentation2.representationData.Contour, segment2.segmentIndex);\n    if (!polyLinesInfoWorld1 || !polyLinesInfoWorld2) {\n        return;\n    }\n    const polyLinesInfoCanvas1 = polyLinesInfoWorld1.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToCanvasSpace(polyline, viewport),\n            viewReference,\n        };\n    });\n    const polyLinesInfoCanvas2 = polyLinesInfoWorld2.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToCanvasSpace(polyline, viewport),\n            viewReference,\n        };\n    });\n    return { polyLinesInfoCanvas1, polyLinesInfoCanvas2 };\n}\nfunction addSegmentInSegmentation(segmentation, { segmentIndex, label, color }) {\n    if (!segmentation?.segments) {\n        return;\n    }\n    segmentation.segments[segmentIndex] = {\n        active: false,\n        locked: false,\n        label,\n        segmentIndex,\n        cachedStats: {},\n        color,\n    };\n}\nfunction removeAnnotations(annotationUIDList) {\n    annotationUIDList.forEach((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        removeAnnotation(annotationUID);\n        removeContourSegmentationAnnotation(annotation);\n    });\n    annotationUIDList.clear();\n}\nfunction applyLogicalOperation(segment1, segment2, options, operation) {\n    const viewport = getViewportAssociatedToSegmentation(segment1.segmentationId);\n    if (!viewport) {\n        return;\n    }\n    const { polyLinesInfoCanvas1, polyLinesInfoCanvas2 } = extractPolylinesInCanvasSpace(viewport, segment1, segment2) || {};\n    if (!polyLinesInfoCanvas1 || !polyLinesInfoCanvas2) {\n        return;\n    }\n    let polylinesMerged;\n    switch (operation) {\n        case LogicalOperation.Union:\n            polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.Subtract:\n            polylinesMerged = subtractPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.Intersect:\n            polylinesMerged = intersectPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.XOR:\n            polylinesMerged = xorPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        default:\n            polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n    }\n    const polyLinesWorld = polylinesMerged.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToWorld(polyline, viewport),\n            viewReference,\n        };\n    });\n    const resultSegment = options;\n    const segmentation = getSegmentation(resultSegment.segmentationId);\n    const segmentIndex = resultSegment.segmentIndex;\n    const color = resultSegment.color;\n    const label = resultSegment.label;\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    if (segment1.segmentationId === resultSegment.segmentationId &&\n        segment1.segmentIndex === segmentIndex) {\n        const existingAnnotationUIDs = annotationUIDsMap.get(segmentIndex);\n        if (existingAnnotationUIDs) {\n            removeAnnotations(existingAnnotationUIDs);\n        }\n    }\n    addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentation.segmentationId, polyLinesWorld, segmentIndex);\n    addSegmentInSegmentation(segmentation, { segmentIndex, color, label });\n}\nexport function add(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Union);\n}\nexport function subtract(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Subtract);\n}\nexport function intersect(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Intersect);\n}\nexport function xor(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.XOR);\n}\nexport function copy(segment, options) {\n    copyContourSegment(segment.segmentationId, segment.segmentIndex, options.segmentationId, options.segmentIndex);\n}\nexport function deleteOperation(segment) {\n    const segmentation = getSegmentation(segment.segmentationId);\n    if (!segmentation) {\n        console.log('No active segmentation detected');\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.log('No contour representation found');\n        return;\n    }\n    const representationData = segmentation.representationData.Contour;\n    const { annotationUIDsMap } = representationData;\n    if (!annotationUIDsMap) {\n        console.log('No annotation map found');\n        return;\n    }\n    if (!annotationUIDsMap.has(segment.segmentIndex)) {\n        console.log('Segmentation index has no annotations');\n        return;\n    }\n    const annotationUIDList = annotationUIDsMap.get(segment.segmentIndex);\n    removeAnnotations(annotationUIDList);\n}\n","import { utilities as csUtils, getEnabledElement } from '@cornerstonejs/core';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport * as math from '../math';\nimport updateContourPolyline from '../contours/updateContourPolyline';\nimport { addAnnotation, removeAnnotation, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../viewportFilters';\nimport { hasToolByName, hasTool } from '../../store/addTool';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nfunction processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours) {\n    const holeOperations = intersectingContours.filter((item) => item.isContourHole);\n    const mergeOperations = intersectingContours.filter((item) => !item.isContourHole);\n    if (holeOperations.length > 0) {\n        const primaryHoleTarget = holeOperations[0];\n        createPolylineHole(viewport, primaryHoleTarget.targetAnnotation, sourceAnnotation);\n        updateViewportsForAnnotations(viewport, [\n            sourceAnnotation,\n            primaryHoleTarget.targetAnnotation,\n        ]);\n        return;\n    }\n    if (mergeOperations.length === 0) {\n        return;\n    }\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone. Cannot process multiple intersections.`);\n        return;\n    }\n    processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations);\n}\nfunction processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations) {\n    const { element } = viewport;\n    const allAnnotationsToRemove = [sourceAnnotation];\n    const allResultPolylines = [];\n    const allHoles = [];\n    mergeOperations.forEach(({ targetAnnotation }) => {\n        const holes = getContourHolesData(viewport, targetAnnotation);\n        allHoles.push(...holes);\n        allAnnotationsToRemove.push(targetAnnotation);\n    });\n    const sourceStartPoint = sourcePolyline[0];\n    const shouldMerge = mergeOperations.some(({ targetPolyline }) => math.polyline.containsPoint(targetPolyline, sourceStartPoint));\n    if (shouldMerge) {\n        let resultPolyline = sourcePolyline;\n        mergeOperations.forEach(({ targetPolyline }) => {\n            resultPolyline = math.polyline.mergePolylines(resultPolyline, targetPolyline);\n        });\n        allResultPolylines.push(resultPolyline);\n    }\n    else {\n        mergeOperations.forEach(({ targetPolyline }) => {\n            const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n            allResultPolylines.push(...subtractedPolylines);\n        });\n    }\n    allAnnotationsToRemove.forEach((annotation) => {\n        removeAnnotation(annotation.annotationUID);\n        removeContourSegmentationAnnotation(annotation);\n    });\n    allHoles.forEach((holeData) => clearParentAnnotation(holeData.annotation));\n    const baseAnnotation = mergeOperations[0].targetAnnotation;\n    const newAnnotations = [];\n    allResultPolylines.forEach((polyline) => {\n        if (!polyline || polyline.length < 3) {\n            console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n            return;\n        }\n        const newAnnotation = createNewAnnotationFromPolyline(viewport, baseAnnotation, polyline);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        newAnnotations.push(newAnnotation);\n    });\n    reassignHolesToNewAnnotations(viewport, allHoles, newAnnotations);\n    updateViewportsForAnnotations(viewport, allAnnotationsToRemove);\n}\nfunction createNewAnnotationFromPolyline(viewport, baseAnnotation, polyline) {\n    const startPointWorld = viewport.canvasToWorld(polyline[0]);\n    const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);\n    const newAnnotation = {\n        metadata: {\n            ...baseAnnotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: baseAnnotation.metadata.originalToolName ||\n                baseAnnotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: baseAnnotation.data.handles.textBox\n                    ? { ...baseAnnotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                polyline: [],\n                closed: true,\n            },\n            spline: baseAnnotation.data.spline,\n            segmentation: {\n                ...baseAnnotation.data.segmentation,\n            },\n        },\n        annotationUID: csUtils.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: baseAnnotation.interpolationUID,\n        interpolationCompleted: baseAnnotation.interpolationCompleted,\n    };\n    updateContourPolyline(newAnnotation, {\n        points: polyline,\n        closed: true,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n    }, viewport);\n    return newAnnotation;\n}\nfunction reassignHolesToNewAnnotations(viewport, holes, newAnnotations) {\n    holes.forEach((holeData) => {\n        const parentAnnotation = newAnnotations.find((annotation) => {\n            const parentPolyline = convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport);\n            return math.polyline.containsPoints(parentPolyline, holeData.polyline);\n        });\n        if (parentAnnotation) {\n            addChildAnnotation(parentAnnotation, holeData.annotation);\n        }\n    });\n}\nfunction getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const contourHoleAnnotation = holeAnnotation;\n        const polyline = convertContourPolylineToCanvasSpace(contourHoleAnnotation.data.contour.polyline, viewport);\n        return { annotation: contourHoleAnnotation, polyline };\n    });\n}\nfunction createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolylineCanvas = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolylineCanvas,\n        closed: holeContour.closed,\n        targetWindingDirection: targetAnnotation.data.contour.windingDirection ===\n            ContourWindingDirection.Clockwise\n            ? ContourWindingDirection.CounterClockwise\n            : ContourWindingDirection.Clockwise,\n    }, viewport);\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nfunction updateViewportsForAnnotations(viewport, annotations) {\n    const { element } = viewport;\n    const updatedToolNames = new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME]);\n    annotations.forEach((annotation) => {\n        updatedToolNames.add(annotation.metadata.toolName);\n    });\n    for (const toolName of updatedToolNames.values()) {\n        if (hasToolByName(toolName)) {\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        }\n    }\n}\nexport { processMultipleIntersections };\n","import { checkIntersection, cleanupPolylines } from './sharedOperations';\nimport { intersectPolylines } from '../math/polyline';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function intersectPolylinesSets(set1, set2) {\n    if (!set1.length || !set2.length) {\n        return [];\n    }\n    const result = [];\n    for (const polyA of set1) {\n        for (const polyB of set2) {\n            if (!areViewReferencesEqual(polyA.viewReference, polyB.viewReference)) {\n                continue;\n            }\n            if (arePolylinesIdentical(polyA.polyline, polyB.polyline)) {\n                result.push({ ...polyA });\n                continue;\n            }\n            const intersection = checkIntersection(polyA.polyline, polyB.polyline);\n            if (intersection.hasIntersection && !intersection.isContourHole) {\n                const intersectionRegions = cleanupPolylines(intersectPolylines(polyA.polyline, polyB.polyline));\n                if (intersectionRegions && intersectionRegions.length > 0) {\n                    intersectionRegions.forEach((region) => {\n                        result.push({\n                            polyline: region,\n                            viewReference: polyA.viewReference,\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return result;\n}\n","import * as math from '../math';\nimport { checkIntersection, cleanupPolylines, convertContourPolylineToCanvasSpace, removeDuplicatePoints, } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function subtractPolylineSets(polylinesSetA, polylinesSetB) {\n    const result = [];\n    for (let i = 0; i < polylinesSetA.length; i++) {\n        let currentPolylines = [polylinesSetA[i]];\n        for (let j = 0; j < polylinesSetB.length; j++) {\n            const polylineB = polylinesSetB[j];\n            const newPolylines = [];\n            for (const currentPolyline of currentPolylines) {\n                if (!areViewReferencesEqual(currentPolyline.viewReference, polylineB.viewReference)) {\n                    newPolylines.push(currentPolyline);\n                    continue;\n                }\n                if (arePolylinesIdentical(currentPolyline.polyline, polylineB.polyline)) {\n                    continue;\n                }\n                const intersection = checkIntersection(currentPolyline.polyline, polylineB.polyline);\n                if (intersection.hasIntersection && !intersection.isContourHole) {\n                    const subtractedPolylines = cleanupPolylines(math.polyline.subtractPolylines(currentPolyline.polyline, polylineB.polyline));\n                    for (const subtractedPolyline of subtractedPolylines) {\n                        const cleaned = removeDuplicatePoints(subtractedPolyline);\n                        if (cleaned.length >= 3) {\n                            newPolylines.push({\n                                polyline: cleaned,\n                                viewReference: currentPolyline.viewReference,\n                            });\n                        }\n                    }\n                }\n                else {\n                    newPolylines.push({\n                        polyline: currentPolyline.polyline,\n                        viewReference: currentPolyline.viewReference,\n                    });\n                }\n            }\n            currentPolylines = newPolylines;\n        }\n        result.push(...currentPolylines);\n    }\n    return result;\n}\nexport function subtractMultiplePolylineSets(basePolylineSet, subtractorSets) {\n    if (subtractorSets.length === 0) {\n        return [...basePolylineSet];\n    }\n    let result = [...basePolylineSet];\n    for (let i = 0; i < subtractorSets.length; i++) {\n        result = subtractPolylineSets(result, subtractorSets[i]);\n    }\n    return result;\n}\nexport function subtractAnnotationPolylines(baseAnnotations, subtractorAnnotations, viewport) {\n    const basePolylines = baseAnnotations.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    const subtractorPolylines = subtractorAnnotations.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    return subtractPolylineSets(basePolylines, subtractorPolylines);\n}\n","import * as math from '../math';\nimport { checkIntersection, convertContourPolylineToCanvasSpace, } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function unifyPolylineSets(polylinesSetA, polylinesSetB) {\n    const result = [];\n    const processedFromA = new Set();\n    const processedFromB = new Set();\n    for (let i = 0; i < polylinesSetA.length; i++) {\n        if (processedFromA.has(i)) {\n            continue;\n        }\n        const polylineA = polylinesSetA[i];\n        let merged = false;\n        for (let j = 0; j < polylinesSetB.length; j++) {\n            if (processedFromB.has(j)) {\n                continue;\n            }\n            const polylineB = polylinesSetB[j];\n            if (!areViewReferencesEqual(polylineA.viewReference, polylineB.viewReference)) {\n                continue;\n            }\n            if (arePolylinesIdentical(polylineA.polyline, polylineB.polyline)) {\n                result.push(polylineA);\n                processedFromA.add(i);\n                processedFromB.add(j);\n                merged = true;\n                break;\n            }\n            const intersection = checkIntersection(polylineA.polyline, polylineB.polyline);\n            if (intersection.hasIntersection && !intersection.isContourHole) {\n                const mergedPolyline = math.polyline.mergePolylines(polylineA.polyline, polylineB.polyline);\n                result.push({\n                    polyline: mergedPolyline,\n                    viewReference: polylineA.viewReference,\n                });\n                processedFromA.add(i);\n                processedFromB.add(j);\n                merged = true;\n                break;\n            }\n        }\n        if (!merged) {\n            result.push(polylineA);\n            processedFromA.add(i);\n        }\n    }\n    for (let j = 0; j < polylinesSetB.length; j++) {\n        if (!processedFromB.has(j)) {\n            result.push(polylinesSetB[j]);\n        }\n    }\n    return result;\n}\nexport function unifyMultiplePolylineSets(polylineSets) {\n    if (polylineSets.length === 0) {\n        return [];\n    }\n    if (polylineSets.length === 1) {\n        return [...polylineSets[0]];\n    }\n    let result = [...polylineSets[0]];\n    for (let i = 1; i < polylineSets.length; i++) {\n        result = unifyPolylineSets(result, polylineSets[i]);\n    }\n    return result;\n}\nexport function unifyAnnotationPolylines(annotationsSetA, annotationsSetB, viewport) {\n    const polylinesSetA = annotationsSetA.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    const polylinesSetB = annotationsSetB.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    return unifyPolylineSets(polylinesSetA, polylinesSetB);\n}\n","import { cleanupPolylines } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { subtractPolylineSets } from './polylineSubtract';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function xorPolylinesSets(polylinesSetA, polylinesSetB) {\n    if (!polylinesSetA.length && !polylinesSetB.length) {\n        return [];\n    }\n    if (!polylinesSetA.length) {\n        return polylinesSetB;\n    }\n    if (!polylinesSetB.length) {\n        return polylinesSetA;\n    }\n    if (polylinesSetA.length === polylinesSetB.length) {\n        let allIdentical = true;\n        for (let i = 0; i < polylinesSetA.length; i++) {\n            let foundMatch = false;\n            for (let j = 0; j < polylinesSetB.length; j++) {\n                if (!areViewReferencesEqual(polylinesSetA[i].viewReference, polylinesSetB[j].viewReference)) {\n                    continue;\n                }\n                if (arePolylinesIdentical(polylinesSetA[i].polyline, polylinesSetB[j].polyline)) {\n                    foundMatch = true;\n                    break;\n                }\n            }\n            if (!foundMatch) {\n                allIdentical = false;\n                break;\n            }\n        }\n        if (allIdentical) {\n            return [];\n        }\n    }\n    const aMinusB = subtractPolylineSets(polylinesSetA, polylinesSetB);\n    const bMinusA = subtractPolylineSets(polylinesSetB, polylinesSetA);\n    const xorResult = [...aMinusB, ...bMinusA];\n    return xorResult;\n}\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nexport function removeContourSegmentationAnnotation(annotation) {\n    if (!annotation.data.segmentation) {\n        throw new Error('removeContourSegmentationAnnotation: annotation does not have a segmentation data');\n    }\n    const { segmentationId, segmentIndex } = annotation.data.segmentation;\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation?.representationData.Contour || {};\n    const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        return;\n    }\n    annotationsUIDsSet.delete(annotation.annotationUID);\n    if (!annotationsUIDsSet.size) {\n        annotationUIDsMap.delete(segmentIndex);\n    }\n}\n","import { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport * as math from '../math';\nimport updateContourPolyline from '../contours/updateContourPolyline';\nimport { addAnnotation, removeAnnotation, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../viewportFilters';\nimport { hasToolByName } from '../../store/addTool';\nconst TOLERANCE = 1e-10;\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport function convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport function convertContourPolylineToWorld(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.canvasToWorld(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport function checkIntersection(sourcePolyline, targetPolyline) {\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    const targetAABB = math.polyline.getAABB(targetPolyline);\n    const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n    if (!aabbIntersect) {\n        return { hasIntersection: false, isContourHole: false };\n    }\n    const lineSegmentsIntersect = math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n    const isContourHole = !lineSegmentsIntersect &&\n        math.polyline.containsPoints(targetPolyline, sourcePolyline);\n    const hasIntersection = lineSegmentsIntersect || isContourHole;\n    return { hasIntersection, isContourHole };\n}\nexport function getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const contourHoleAnnotation = holeAnnotation;\n        const polyline = convertContourPolylineToCanvasSpace(contourHoleAnnotation.data.contour.polyline, viewport);\n        return { annotation: contourHoleAnnotation, polyline };\n    });\n}\nexport function createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolylineCanvas = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolylineCanvas,\n        closed: holeContour.closed,\n        targetWindingDirection: targetAnnotation.data.contour.windingDirection ===\n            ContourWindingDirection.Clockwise\n            ? ContourWindingDirection.CounterClockwise\n            : ContourWindingDirection.Clockwise,\n    }, viewport);\n    const { element } = viewport;\n    updateViewportsForAnnotations(viewport, [targetAnnotation, holeAnnotation]);\n}\nexport function combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline) {\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone. Cannot combine polylines.`);\n        return;\n    }\n    const sourceStartPoint = sourcePolyline[0];\n    const mergePolylines = math.polyline.containsPoint(targetPolyline, sourceStartPoint);\n    const contourHolesData = getContourHolesData(viewport, targetAnnotation);\n    const unassignedContourHolesSet = new Set(contourHolesData);\n    const reassignedContourHolesMap = new Map();\n    const assignHoleToPolyline = (parentPolyline, holeData) => {\n        let holes = reassignedContourHolesMap.get(parentPolyline);\n        if (!holes) {\n            holes = [];\n            reassignedContourHolesMap.set(parentPolyline, holes);\n        }\n        holes.push(holeData);\n        unassignedContourHolesSet.delete(holeData);\n    };\n    const newPolylines = [];\n    if (mergePolylines) {\n        const mergedPolyline = math.polyline.mergePolylines(targetPolyline, sourcePolyline);\n        newPolylines.push(mergedPolyline);\n        Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => assignHoleToPolyline(mergedPolyline, holeData));\n    }\n    else {\n        const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n        subtractedPolylines.forEach((newPolyline) => {\n            newPolylines.push(newPolyline);\n            Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {\n                const containsHole = math.polyline.containsPoints(newPolyline, holeData.polyline);\n                if (containsHole) {\n                    assignHoleToPolyline(newPolyline, holeData);\n                }\n            });\n        });\n    }\n    Array.from(reassignedContourHolesMap.values()).forEach((contourHolesDataArray) => contourHolesDataArray.forEach((contourHoleData) => clearParentAnnotation(contourHoleData.annotation)));\n    const { element } = viewport;\n    const { metadata, data } = targetAnnotation;\n    const { handles, segmentation } = data;\n    const { textBox } = handles;\n    removeAnnotation(sourceAnnotation.annotationUID);\n    removeAnnotation(targetAnnotation.annotationUID);\n    removeContourSegmentationAnnotation(sourceAnnotation);\n    removeContourSegmentationAnnotation(targetAnnotation);\n    const newAnnotations = [];\n    for (let i = 0; i < newPolylines.length; i++) {\n        const polyline = newPolylines[i];\n        if (!polyline || polyline.length < 3) {\n            console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n            continue;\n        }\n        const newAnnotation = createNewAnnotationFromPolyline(viewport, targetAnnotation, polyline);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        newAnnotations.push(newAnnotation);\n        reassignedContourHolesMap\n            .get(polyline)\n            ?.forEach((holeData) => addChildAnnotation(newAnnotation, holeData.annotation));\n    }\n    updateViewportsForAnnotations(viewport, [targetAnnotation, sourceAnnotation]);\n}\nexport function createNewAnnotationFromPolyline(viewport, templateAnnotation, polyline) {\n    const startPointWorld = viewport.canvasToWorld(polyline[0]);\n    const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);\n    const newAnnotation = {\n        metadata: {\n            ...templateAnnotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: templateAnnotation.metadata.originalToolName ||\n                templateAnnotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: templateAnnotation.data.handles.textBox\n                    ? { ...templateAnnotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                polyline: [],\n                closed: true,\n            },\n            spline: templateAnnotation.data.spline,\n            segmentation: {\n                ...templateAnnotation.data.segmentation,\n            },\n        },\n        annotationUID: csUtils.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: templateAnnotation.interpolationUID,\n        interpolationCompleted: templateAnnotation.interpolationCompleted,\n    };\n    updateContourPolyline(newAnnotation, {\n        points: polyline,\n        closed: true,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n    }, viewport);\n    return newAnnotation;\n}\nexport function updateViewportsForAnnotations(viewport, annotations) {\n    const { element } = viewport;\n    const updatedToolNames = new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME]);\n    annotations.forEach((annotation) => {\n        updatedToolNames.add(annotation.metadata.toolName);\n    });\n    for (const toolName of updatedToolNames.values()) {\n        if (hasToolByName(toolName)) {\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        }\n    }\n}\nexport function removeDuplicatePoints(polyline) {\n    if (!polyline || polyline.length < 2) {\n        return polyline;\n    }\n    const cleaned = [polyline[0]];\n    for (let i = 1; i < polyline.length; i++) {\n        const currentPoint = polyline[i];\n        const lastPoint = cleaned[cleaned.length - 1];\n        const dx = Math.abs(currentPoint[0] - lastPoint[0]);\n        const dy = Math.abs(currentPoint[1] - lastPoint[1]);\n        if (dx > TOLERANCE || dy > TOLERANCE) {\n            cleaned.push(currentPoint);\n        }\n    }\n    return cleaned;\n}\nexport function cleanupPolylines(polylines) {\n    const validPolylines = [];\n    const seenPolylines = new Set();\n    for (let polyline of polylines) {\n        if (!polyline || polyline.length < 3) {\n            continue;\n        }\n        polyline = removeDuplicatePoints(polyline);\n        if (polyline.length < 3) {\n            continue;\n        }\n        const sortedPoints = [...polyline].sort((a, b) => {\n            if (a[0] !== b[0]) {\n                return a[0] - b[0];\n            }\n            return a[1] - b[1];\n        });\n        const polylineKey = sortedPoints\n            .map((p) => `${p[0].toFixed(6)},${p[1].toFixed(6)}`)\n            .join('|');\n        if (!seenPolylines.has(polylineKey)) {\n            seenPolylines.add(polylineKey);\n            validPolylines.push(polyline);\n        }\n    }\n    return validPolylines;\n}\n","function calculatePerimeter(polyline, closed) {\n    let perimeter = 0;\n    for (let i = 0; i < polyline.length - 1; i++) {\n        const point1 = polyline[i];\n        const point2 = polyline[i + 1];\n        perimeter += Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));\n    }\n    if (closed) {\n        const firstPoint = polyline[0];\n        const lastPoint = polyline[polyline.length - 1];\n        perimeter += Math.sqrt(Math.pow(lastPoint[0] - firstPoint[0], 2) +\n            Math.pow(lastPoint[1] - firstPoint[1], 2));\n    }\n    return perimeter;\n}\nexport default calculatePerimeter;\n","function findNextLink(line, lines, contourPoints) {\n    let index = -1;\n    lines.forEach((cell, i) => {\n        if (index >= 0) {\n            return;\n        }\n        if (cell.a == line.b) {\n            index = i;\n        }\n    });\n    if (index >= 0) {\n        const nextLine = lines[index];\n        lines.splice(index, 1);\n        contourPoints.push(nextLine.b);\n        if (contourPoints[0] == nextLine.b) {\n            return {\n                remainingLines: lines,\n                contourPoints,\n                type: 'CLOSED_PLANAR',\n            };\n        }\n        return findNextLink(nextLine, lines, contourPoints);\n    }\n    return {\n        remainingLines: lines,\n        contourPoints,\n        type: 'OPEN_PLANAR',\n    };\n}\nexport function findContours(lines) {\n    if (lines.length == 0) {\n        return [];\n    }\n    const contourPoints = [];\n    const firstCell = lines.shift();\n    contourPoints.push(firstCell.a);\n    contourPoints.push(firstCell.b);\n    const result = findNextLink(firstCell, lines, contourPoints);\n    if (result.remainingLines.length == 0) {\n        return [\n            {\n                type: result.type,\n                contourPoints: result.contourPoints,\n            },\n        ];\n    }\n    else {\n        const extraContours = findContours(result.remainingLines);\n        extraContours.push({\n            type: result.type,\n            contourPoints: result.contourPoints,\n        });\n        return extraContours;\n    }\n}\nexport function findContoursFromReducedSet(lines) {\n    return findContours(lines);\n}\nexport default {\n    findContours,\n    findContoursFromReducedSet,\n};\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isClosed from '../math/polyline/isClosed';\nimport { getSignedArea } from '../math/polyline';\nexport default function findIslands(polylines, threshold) {\n    if (!polylines || polylines.length === 0) {\n        return [];\n    }\n    if (threshold <= 0) {\n        return [];\n    }\n    const islandIndexes = [];\n    for (let i = 0; i < polylines.length; i++) {\n        const polyline = polylines[i];\n        if (!polyline || polyline.length < 3) {\n            continue;\n        }\n        const isClosedPolyline = isClosed(polyline);\n        if (isClosedPolyline) {\n            const area = Math.abs(getSignedArea(polyline)) / 100;\n            if (area < threshold) {\n                islandIndexes.push(i);\n            }\n        }\n    }\n    return islandIndexes;\n}\n","import getContourHolesDataWorld from './getContourHolesDataWorld';\nexport default function getContourHolesDataCanvas(annotation, viewport) {\n    const worldHoleContours = getContourHolesDataWorld(annotation);\n    const canvasHoleContours = [];\n    worldHoleContours.forEach((worldHoleContour) => {\n        const numPoints = worldHoleContour.length;\n        const canvasHoleContour = new Array(numPoints);\n        for (let i = 0; i < numPoints; i++) {\n            canvasHoleContour[i] = viewport.worldToCanvas(worldHoleContour[i]);\n        }\n        canvasHoleContours.push(canvasHoleContour);\n    });\n    return canvasHoleContours;\n}\n","import { getAnnotation } from '../../stateManagement/annotation/annotationState';\nexport default function getContourHolesDataWorld(annotation) {\n    const childAnnotationUIDs = annotation.childAnnotationUIDs ?? [];\n    return childAnnotationUIDs.map((uid) => getAnnotation(uid).data.contour.polyline);\n}\n","export function getDeduplicatedVTKPolyDataPoints(polyData, bypass = false) {\n    const points = polyData.getPoints();\n    const lines = polyData.getLines();\n    const pointsArray = new Array(points.getNumberOfPoints())\n        .fill(0)\n        .map((_, i) => points.getPoint(i).slice());\n    const linesArray = new Array(lines.getNumberOfCells()).fill(0).map((_, i) => {\n        const cell = lines.getCell(i * 3).slice();\n        return { a: cell[0], b: cell[1] };\n    });\n    if (bypass) {\n        return { points: pointsArray, lines: linesArray };\n    }\n    const newPoints = [];\n    for (const [i, pt] of pointsArray.entries()) {\n        const index = newPoints.findIndex((point) => point[0] === pt[0] && point[1] === pt[1] && point[2] === pt[2]);\n        if (index >= 0) {\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = index;\n                }\n                if (line.b === i) {\n                    line.b = index;\n                }\n                return line;\n            });\n        }\n        else {\n            const newIndex = newPoints.length;\n            newPoints.push(pt);\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = newIndex;\n                }\n                if (line.b === i) {\n                    line.b = newIndex;\n                }\n                return line;\n            });\n        }\n    }\n    const newLines = linesArray.filter((line) => line.a !== line.b);\n    return { points: newPoints, lines: newLines };\n}\nexport default { getDeduplicatedVTKPolyDataPoints };\n","import { glMatrix, vec3 } from 'gl-matrix';\nexport default function areCoplanarContours(firstAnnotation, secondAnnotation) {\n    const { viewPlaneNormal: firstViewPlaneNormal } = firstAnnotation.metadata;\n    const { viewPlaneNormal: secondViewPlaneNormal } = secondAnnotation.metadata;\n    const dot = vec3.dot(firstViewPlaneNormal, secondViewPlaneNormal);\n    const parallelPlanes = glMatrix.equals(1, Math.abs(dot));\n    if (!parallelPlanes) {\n        return false;\n    }\n    const { polyline: firstPolyline } = firstAnnotation.data.contour;\n    const { polyline: secondPolyline } = secondAnnotation.data.contour;\n    const firstDistance = vec3.dot(firstViewPlaneNormal, firstPolyline[0]);\n    const secondDistance = vec3.dot(firstViewPlaneNormal, secondPolyline[0]);\n    return glMatrix.equals(firstDistance, secondDistance);\n}\n","const getIsPointInsidePolygon = (point, vertices) => {\n    const x = point[0];\n    const y = point[1];\n    let inside = false;\n    for (let i = 0, j = vertices.length - 1; i < vertices.length; j = i++) {\n        const xi = vertices[i][0], yi = vertices[i][1];\n        const xj = vertices[j][0], yj = vertices[j][1];\n        const intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n};\nfunction checkEnclosed(outerContour, innerContour, points) {\n    const vertices = [];\n    outerContour.contourPoints.forEach((point) => {\n        vertices.push([points[point][0], points[point][1]]);\n    });\n    let pointsNotEnclosed = 0;\n    innerContour.contourPoints.forEach((point) => {\n        const result = getIsPointInsidePolygon([points[point][0], points[point][1]], vertices);\n        if (!result) {\n            pointsNotEnclosed++;\n        }\n    });\n    return pointsNotEnclosed === 0;\n}\nexport function processContourHoles(contours, points, useXOR = true) {\n    const retContours = contours.filter((contour) => contour.type !== 'CLOSED_PLANAR');\n    const closedContours = contours.filter((contour) => contour.type === 'CLOSED_PLANAR');\n    const contourWithHoles = [];\n    let contourWithoutHoles = [];\n    closedContours.forEach((contour, index) => {\n        const holes = [];\n        closedContours.forEach((hContour, hIndex) => {\n            if (index != hIndex) {\n                if (checkEnclosed(contour, hContour, points)) {\n                    holes.push(hIndex);\n                }\n            }\n        });\n        if (holes.length > 0) {\n            contourWithHoles.push({\n                contour,\n                holes,\n            });\n        }\n        else {\n            contourWithoutHoles.push(index);\n        }\n    });\n    if (useXOR) {\n        contourWithHoles.forEach((contourHoleSet) => {\n            contourHoleSet.contour.type = 'CLOSEDPLANAR_XOR';\n            retContours.push(contourHoleSet.contour);\n            contourHoleSet.holes.forEach((holeIndex) => {\n                closedContours[holeIndex].type = 'CLOSEDPLANAR_XOR';\n                retContours.push(closedContours[holeIndex]);\n                contourWithoutHoles = contourWithoutHoles.filter((contourIndex) => {\n                    return contourIndex !== holeIndex;\n                });\n            });\n        });\n        contourWithoutHoles.forEach((contourIndex) => {\n            retContours.push(closedContours[contourIndex]);\n        });\n    }\n    else {\n    }\n    return retContours;\n}\nexport default { processContourHoles };\n","import getSignedArea from '../math/polyline/getSignedArea';\nimport containsPoints from '../math/polyline/containsPoints';\nimport isClosed from '../math/polyline/isClosed';\nfunction isPolygonInsidePolygon(inner, outer) {\n    return containsPoints(outer, inner);\n}\nexport default function findContourHoles(polylines) {\n    const results = [];\n    const closedPolylines = [];\n    polylines.forEach((polyline, index) => {\n        if (isClosed(polyline)) {\n            closedPolylines.push({ polyline, originalIndex: index });\n        }\n    });\n    for (let i = 0; i < closedPolylines.length; i++) {\n        const outerContour = closedPolylines[i];\n        const outerArea = Math.abs(getSignedArea(outerContour.polyline));\n        const holeIndexes = [];\n        for (let j = 0; j < closedPolylines.length; j++) {\n            if (i === j) {\n                continue;\n            }\n            const potentialHole = closedPolylines[j];\n            const holeArea = Math.abs(getSignedArea(potentialHole.polyline));\n            if (holeArea < outerArea &&\n                isPolygonInsidePolygon(potentialHole.polyline, outerContour.polyline)) {\n                holeIndexes.push(potentialHole.originalIndex);\n            }\n        }\n        if (holeIndexes.length > 0) {\n            results.push({\n                contourIndex: outerContour.originalIndex,\n                holeIndexes: holeIndexes.sort((a, b) => a - b),\n            });\n        }\n    }\n    return results.sort((a, b) => a.contourIndex - b.contourIndex);\n}\nexport { findContourHoles };\n","import { cache as cornerstoneCache, getWebWorkerManager, cache, utilities, } from '@cornerstonejs/core';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport { triggerWorkerProgress } from '../segmentation/utilsForWorker';\nimport getOrCreateSegmentationVolume from '../segmentation/getOrCreateSegmentationVolume';\nconst { Labelmap } = SegmentationRepresentations;\nasync function generateContourSetsFromLabelmap({ segmentations }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.GENERATE_CONTOUR_SETS, 0);\n    const { representationData, segments = [0, 1], segmentationId, } = segmentations;\n    let { volumeId: segVolumeId } = representationData[Labelmap];\n    if (!segVolumeId) {\n        const segVolume = getOrCreateSegmentationVolume(segmentationId);\n        if (segVolume) {\n            segVolumeId = segVolume.volumeId;\n        }\n    }\n    const vol = cornerstoneCache.getVolume(segVolumeId);\n    if (!vol) {\n        console.warn(`No volume found for ${segVolumeId}`);\n        return;\n    }\n    const voxelManager = vol.voxelManager;\n    const segScalarData = voxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segScalarData,\n        dimensions: vol.dimensions,\n        spacing: vol.imageData.getSpacing(),\n        origin: vol.imageData.getOrigin(),\n        direction: vol.imageData.getDirection(),\n    };\n    const indices = Array.isArray(segments)\n        ? segments\n            .filter((segment) => segment !== null)\n            .map((segment) => segment.segmentIndex || segment)\n        : Object.values(segments)\n            .filter((segment) => segment !== null)\n            .map((segment) => segment.segmentIndex || segment);\n    const contourSets = await getWebWorkerManager().executeTask('compute', 'generateContourSetsFromLabelmapVolume', {\n        segmentation: segmentationInfo,\n        indices,\n        mode: 'individual',\n    });\n    const refImages = vol.imageIds.map((imageId) => {\n        const refImageId = cache.getImage(imageId)?.referencedImageId;\n        return refImageId ? cache.getImage(refImageId) : undefined;\n    });\n    const refImageDataMetadata = refImages.map((image) => {\n        return utilities.getImageDataMetadata(image);\n    });\n    const processedContourSets = contourSets\n        .map((contourSet) => {\n        const segment = segments[contourSet.segment.segmentIndex] || {};\n        if (!contourSet.sliceContours.length) {\n            return null;\n        }\n        const p1 = contourSet.sliceContours[0].polyData.points[0];\n        let refImageId;\n        if (p1) {\n            const refImageIndex = refImageDataMetadata.findIndex((imageDataMetadata) => {\n                const { scanAxisNormal, origin } = imageDataMetadata;\n                const plane = utilities.planar.planeEquation(scanAxisNormal, origin);\n                return utilities.planar.isPointOnPlane(p1, plane);\n            });\n            if (refImageIndex !== -1) {\n                refImageId = refImages[refImageIndex].imageId;\n            }\n        }\n        return {\n            label: segment.label,\n            color: segment.color,\n            metadata: {\n                FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,\n                referencedImageId: refImageId,\n            },\n            sliceContours: contourSet.sliceContours.map((contourData) => ({\n                contours: contourData.contours,\n                polyData: contourData.polyData,\n                FrameNumber: contourData.sliceIndex + 1,\n                sliceIndex: contourData.sliceIndex,\n                FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,\n                referencedImageId: refImageId,\n            })),\n        };\n    })\n        .filter((contourSet) => contourSet !== null);\n    triggerWorkerProgress(WorkerTypes.GENERATE_CONTOUR_SETS, 100);\n    return processedContourSets;\n}\nexport { generateContourSetsFromLabelmap };\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\nfunction validateAnnotation(annotation) {\n    if (!annotation?.data) {\n        throw new Error('Tool data is empty');\n    }\n    if (!annotation.metadata || annotation.metadata.referencedImageId) {\n        throw new Error('Tool data is not associated with any imageId');\n    }\n}\nclass AnnotationToPointData {\n    static { this.TOOL_NAMES = {}; }\n    constructor() {\n    }\n    static convert(annotation, index, metadataProvider) {\n        validateAnnotation(annotation);\n        const { toolName } = annotation.metadata;\n        const toolClass = AnnotationToPointData.TOOL_NAMES[toolName];\n        if (!toolClass) {\n            throw new Error(`Unknown tool type: ${toolName}, cannot convert to RTSSReport`);\n        }\n        const ContourSequence = toolClass.getContourSequence(annotation, metadataProvider);\n        const color = [\n            Math.floor(Math.random() * 255),\n            Math.floor(Math.random() * 255),\n            Math.floor(Math.random() * 255),\n        ];\n        return {\n            ReferencedROINumber: index + 1,\n            ROIDisplayColor: color,\n            ContourSequence,\n        };\n    }\n    static register(toolClass) {\n        AnnotationToPointData.TOOL_NAMES[toolClass.toolName] = toolClass;\n    }\n}\nAnnotationToPointData.register(RectangleROIStartEndThreshold);\nexport default AnnotationToPointData;\n","import InterpolationManager from '../../segmentation/InterpolationManager/InterpolationManager';\nexport default function acceptAutogeneratedInterpolations(annotationGroupSelector, selector) {\n    InterpolationManager.acceptAutoGenerated(annotationGroupSelector, selector);\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport * as math from '../math';\nimport { getParentAnnotation, invalidateAnnotation, } from '../../stateManagement/annotation/annotationState';\nexport default function updateContourPolyline(annotation, polylineData, transforms, options) {\n    const { canvasToWorld, worldToCanvas } = transforms;\n    const { data } = annotation;\n    const { targetWindingDirection } = polylineData;\n    let { points: polyline } = polylineData;\n    let windingDirection = math.polyline.getWindingDirection(polyline);\n    if (options?.decimate?.enabled) {\n        polyline = math.polyline.decimate(polylineData.points, options?.decimate?.epsilon);\n    }\n    let { closed } = polylineData;\n    const numPoints = polyline.length;\n    const polylineWorldPoints = new Array(numPoints);\n    const currentPolylineWindingDirection = math.polyline.getWindingDirection(polyline);\n    const parentAnnotation = getParentAnnotation(annotation);\n    if (closed === undefined) {\n        let currentClosedState = false;\n        if (polyline.length > 3) {\n            const lastToFirstDist = math.point.distanceToPointSquared(polyline[0], polyline[numPoints - 1]);\n            currentClosedState = csUtils.isEqual(0, lastToFirstDist);\n        }\n        closed = currentClosedState;\n    }\n    if (options?.updateWindingDirection !== false) {\n        let updatedWindingDirection = parentAnnotation\n            ? parentAnnotation.data.contour.windingDirection * -1\n            : targetWindingDirection;\n        if (updatedWindingDirection === undefined) {\n            updatedWindingDirection = windingDirection;\n        }\n        if (updatedWindingDirection !== windingDirection) {\n            polyline.reverse();\n        }\n        const handlePoints = (data.handles?.points ?? []).map(worldToCanvas);\n        if (handlePoints.length > 2) {\n            const currentHandlesWindingDirection = math.polyline.getWindingDirection(handlePoints);\n            if (currentHandlesWindingDirection !== updatedWindingDirection) {\n                data.handles.points.reverse();\n            }\n        }\n        windingDirection = updatedWindingDirection;\n    }\n    for (let i = 0; i < numPoints; i++) {\n        polylineWorldPoints[i] = canvasToWorld(polyline[i]);\n    }\n    data.contour.polyline = polylineWorldPoints;\n    data.contour.closed = closed;\n    data.contour.windingDirection = windingDirection;\n    invalidateAnnotation(annotation);\n}\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { utilities, cache } from '@cornerstonejs/core';\nimport { getVoxelOverlap } from '../segmentation/utilities';\nfunction getDataInTime(dynamicVolume, options) {\n    let dataInTime;\n    const dimensionGroups = options.dimensionGroupNumbers ||\n        options.frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (options.frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    if (!options.maskVolumeId && !options.worldCoordinate) {\n        throw new Error('You should provide either maskVolumeId or imageCoordinate');\n    }\n    if (options.maskVolumeId && options.worldCoordinate) {\n        throw new Error('You can only use one of maskVolumeId or imageCoordinate');\n    }\n    if (options.maskVolumeId) {\n        const segmentationVolume = cache.getVolume(options.maskVolumeId);\n        if (!segmentationVolume) {\n            throw new Error('Segmentation volume not found');\n        }\n        const [dataInTime, ijkCoords] = _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume);\n        return [dataInTime, ijkCoords];\n    }\n    if (options.worldCoordinate) {\n        const dataInTime = _getDimensionGroupDataCoordinate(dimensionGroups, options.worldCoordinate, dynamicVolume);\n        return dataInTime;\n    }\n    return dataInTime;\n}\nfunction _getDimensionGroupDataCoordinate(dimensionGroups, coordinate, volume) {\n    const { dimensions, imageData } = volume;\n    const index = imageData.worldToIndex(coordinate);\n    index[0] = Math.floor(index[0]);\n    index[1] = Math.floor(index[1]);\n    index[2] = Math.floor(index[2]);\n    if (!utilities.indexWithinDimensions(index, dimensions)) {\n        throw new Error('outside bounds');\n    }\n    const yMultiple = dimensions[0];\n    const zMultiple = dimensions[0] * dimensions[1];\n    const value = [];\n    dimensionGroups.forEach((dimensionGroupNumber) => {\n        const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];\n        value.push(volume.voxelManager.getAtIndexAndDimensionGroup(scalarIndex, dimensionGroupNumber));\n    });\n    return value;\n}\nfunction _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume) {\n    const { imageData: maskImageData } = segmentationVolume;\n    const segVoxelManager = segmentationVolume.voxelManager;\n    const scalarDataLength = segVoxelManager.getScalarDataLength();\n    const nonZeroVoxelIndices = [];\n    nonZeroVoxelIndices.length = scalarDataLength;\n    let actualLen = 0;\n    for (let i = 0, len = scalarDataLength; i < len; i++) {\n        if (segVoxelManager.getAtIndex(i) !== 0) {\n            nonZeroVoxelIndices[actualLen++] = i;\n        }\n    }\n    nonZeroVoxelIndices.length = actualLen;\n    const nonZeroVoxelValuesInTime = [];\n    const isSameVolume = dynamicVolume.voxelManager.getScalarDataLength() === scalarDataLength &&\n        JSON.stringify(dynamicVolume.spacing) ===\n            JSON.stringify(segmentationVolume.spacing);\n    const ijkCoords = [];\n    if (isSameVolume) {\n        for (let i = 0; i < nonZeroVoxelIndices.length; i++) {\n            const valuesInTime = [];\n            const index = nonZeroVoxelIndices[i];\n            for (let j = 0; j < dimensionGroups.length; j++) {\n                valuesInTime.push(dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[j]));\n            }\n            nonZeroVoxelValuesInTime.push(valuesInTime);\n            ijkCoords.push(segVoxelManager.toIJK(index));\n        }\n        return [nonZeroVoxelValuesInTime, ijkCoords];\n    }\n    const callback = ({ pointLPS: segPointLPS, value: segValue, pointIJK: segPointIJK, }) => {\n        if (segValue === 0) {\n            return;\n        }\n        const overlapIJKMinMax = getVoxelOverlap(dynamicVolume.imageData, dynamicVolume.dimensions, dynamicVolume.spacing, segPointLPS);\n        let count = 0;\n        const perDimensionGroupSum = new Map();\n        dimensionGroups.forEach((dimensionGroupNumber) => perDimensionGroupSum.set(dimensionGroupNumber, 0));\n        const averageCallback = ({ index }) => {\n            for (let i = 0; i < dimensionGroups.length; i++) {\n                const value = dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[i]);\n                const dimensionGroupNumber = dimensionGroups[i];\n                perDimensionGroupSum.set(dimensionGroupNumber, perDimensionGroupSum.get(dimensionGroupNumber) + value);\n            }\n            count++;\n        };\n        dynamicVolume.voxelManager.forEach(averageCallback, {\n            imageData: dynamicVolume.imageData,\n            boundsIJK: overlapIJKMinMax,\n        });\n        const averageValues = [];\n        perDimensionGroupSum.forEach((sum) => {\n            averageValues.push(sum / count);\n        });\n        ijkCoords.push(segPointIJK);\n        nonZeroVoxelValuesInTime.push(averageValues);\n    };\n    segmentationVolume.voxelManager.forEach(callback, {\n        imageData: maskImageData,\n    });\n    return [nonZeroVoxelValuesInTime, ijkCoords];\n}\nexport default getDataInTime;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport * as ToolGroupManager from '../store/ToolGroupManager';\nfunction getAnnotationNearPoint(element, canvasPoint, proximity = 5) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('getAnnotationNearPoint: enabledElement not found');\n    }\n    return getAnnotationNearPointOnEnabledElement(enabledElement, canvasPoint, proximity);\n}\nfunction getAnnotationNearPointOnEnabledElement(enabledElement, point, proximity) {\n    const { renderingEngineId, viewportId } = enabledElement;\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);\n    if (!toolGroup) {\n        return null;\n    }\n    const { _toolInstances: tools } = toolGroup;\n    for (const name in tools) {\n        const found = findAnnotationNearPointByTool(tools[name], enabledElement, point, proximity);\n        if (found) {\n            return found;\n        }\n    }\n    return null;\n}\nfunction findAnnotationNearPointByTool(tool, enabledElement, point, proximity) {\n    const { viewport } = enabledElement;\n    const annotations = getAnnotations(tool.constructor.toolName, viewport?.element);\n    const currentId = viewport?.getCurrentImageId?.();\n    if (annotations?.length) {\n        const { element } = enabledElement.viewport;\n        for (const annotation of annotations) {\n            const referencedImageId = annotation.metadata?.referencedImageId;\n            if ((currentId && referencedImageId && currentId !== referencedImageId) ||\n                !tool.isPointNearTool) {\n                continue;\n            }\n            if (tool.isPointNearTool(element, annotation, point, proximity, '') ||\n                tool.getHandleNearImagePoint(element, annotation, point, proximity)) {\n                return annotation;\n            }\n        }\n    }\n    return null;\n}\nexport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement };\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { metaData } from '@cornerstonejs/core';\nfunction getPixelValueUnitsImageId(imageId, options) {\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n    return getPixelValueUnits(generalSeriesModule.modality, imageId, options);\n}\nfunction getPixelValueUnits(modality, imageId, options) {\n    if (modality === 'CT') {\n        return 'HU';\n    }\n    else if (modality === 'PT') {\n        return _handlePTModality(imageId, options);\n    }\n    else {\n        return '';\n    }\n}\nfunction _handlePTModality(imageId, options) {\n    if (!options.isPreScaled) {\n        return 'raw';\n    }\n    if (options.isSuvScaled) {\n        return 'SUV';\n    }\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n    if (generalSeriesModule?.modality === 'PT') {\n        const petSeriesModule = metaData.get('petSeriesModule', imageId);\n        return petSeriesModule?.units || 'unitless';\n    }\n    return 'unknown';\n}\nexport { getPixelValueUnits, getPixelValueUnitsImageId };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import { getEnabledElements, utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nexport default function getViewportsForAnnotation(annotation) {\n    const { metadata } = annotation;\n    return getEnabledElements()\n        .filter((enabledElement) => {\n        if (enabledElement.FrameOfReferenceUID === metadata.FrameOfReferenceUID) {\n            const viewport = enabledElement.viewport;\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            return (isEqual(viewPlaneNormal, metadata.viewPlaneNormal) &&\n                (!metadata.viewUp || isEqual(viewUp, metadata.viewUp)));\n        }\n        return;\n    })\n        .map((enabledElement) => enabledElement.viewport);\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nimport * as usFanExtraction from '../tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, usFanExtraction, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import { pointsAreEqual } from './robustSegmentIntersection';\nexport default function arePolylinesIdentical(poly1, poly2) {\n    if (poly1.length !== poly2.length) {\n        return false;\n    }\n    const len = poly1.length;\n    if (len === 0) {\n        return true;\n    }\n    let identicalForward = true;\n    for (let i = 0; i < len; i++) {\n        if (!pointsAreEqual(poly1[i], poly2[i])) {\n            identicalForward = false;\n            break;\n        }\n    }\n    if (identicalForward) {\n        return true;\n    }\n    let identicalReverse = true;\n    for (let i = 0; i < len; i++) {\n        if (!pointsAreEqual(poly1[i], poly2[len - 1 - i])) {\n            identicalReverse = false;\n            break;\n        }\n    }\n    if (identicalReverse) {\n        return true;\n    }\n    for (let offset = 1; offset < len; offset++) {\n        let cyclicForward = true;\n        for (let i = 0; i < len; i++) {\n            if (!pointsAreEqual(poly1[i], poly2[(i + offset) % len])) {\n                cyclicForward = false;\n                break;\n            }\n        }\n        if (cyclicForward) {\n            return true;\n        }\n        let cyclicReverse = true;\n        for (let i = 0; i < len; i++) {\n            if (!pointsAreEqual(poly1[i], poly2[(len - 1 - i + offset) % len])) {\n                cyclicReverse = false;\n                break;\n            }\n        }\n        if (cyclicReverse) {\n            return true;\n        }\n    }\n    return false;\n}\n","import containsPoint from './containsPoint';\nexport default function containsPoints(polyline, points) {\n    for (let i = 0, numPoint = points.length; i < numPoint; i++) {\n        if (!containsPoint(polyline, points[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n","import * as mathLine from '../line';\nconst DEFAULT_EPSILON = 0.1;\nexport default function decimate(polyline, epsilon = DEFAULT_EPSILON) {\n    const numPoints = polyline.length;\n    if (numPoints < 3) {\n        return polyline;\n    }\n    const epsilonSquared = epsilon * epsilon;\n    const partitionQueue = [[0, numPoints - 1]];\n    const polylinePointFlags = new Array(numPoints).fill(false);\n    let numDecimatedPoints = 2;\n    polylinePointFlags[0] = true;\n    polylinePointFlags[numPoints - 1] = true;\n    while (partitionQueue.length) {\n        const [startIndex, endIndex] = partitionQueue.pop();\n        if (endIndex - startIndex === 1) {\n            continue;\n        }\n        const startPoint = polyline[startIndex];\n        const endPoint = polyline[endIndex];\n        let maxDistSquared = -Infinity;\n        let maxDistIndex = -1;\n        for (let i = startIndex + 1; i < endIndex; i++) {\n            const currentPoint = polyline[i];\n            const distSquared = mathLine.distanceToPointSquared(startPoint, endPoint, currentPoint);\n            if (distSquared > maxDistSquared) {\n                maxDistSquared = distSquared;\n                maxDistIndex = i;\n            }\n        }\n        if (maxDistSquared < epsilonSquared) {\n            continue;\n        }\n        polylinePointFlags[maxDistIndex] = true;\n        numDecimatedPoints++;\n        partitionQueue.push([maxDistIndex, endIndex]);\n        partitionQueue.push([startIndex, maxDistIndex]);\n    }\n    const decimatedPolyline = new Array(numDecimatedPoints);\n    for (let srcIndex = 0, dstIndex = 0; srcIndex < numPoints; srcIndex++) {\n        if (polylinePointFlags[srcIndex]) {\n            decimatedPolyline[dstIndex++] = polyline[srcIndex];\n        }\n    }\n    return decimatedPolyline;\n}\n","export default function getSignedArea(polyline) {\n    if (polyline.length < 3) {\n        return 0;\n    }\n    const refPoint = polyline[0];\n    let area = 0;\n    for (let i = 0, len = polyline.length; i < len; i++) {\n        const p1 = polyline[i];\n        const p2Index = i === len - 1 ? 0 : i + 1;\n        const p2 = polyline[p2Index];\n        const aX = p1[0] - refPoint[0];\n        const aY = p1[1] - refPoint[1];\n        const bX = p2[0] - refPoint[0];\n        const bY = p2[1] - refPoint[1];\n        area += aX * bY - aY * bX;\n    }\n    area *= 0.5;\n    return area;\n}\n","import { glMatrix } from 'gl-matrix';\nimport { distanceToPointSquared } from '../point';\nexport default function isClosed(polyline) {\n    if (polyline.length < 3) {\n        return false;\n    }\n    const numPolylinePoints = polyline.length;\n    const firstPoint = polyline[0];\n    const lastPoint = polyline[numPolylinePoints - 1];\n    const distFirstToLastPoints = distanceToPointSquared(firstPoint, lastPoint);\n    return glMatrix.equals(0, distFirstToLastPoints);\n}\n","export default function findClosestPoint(sourcePoints, targetPoint) {\n    let minPoint = [0, 0];\n    let minDistance = Number.MAX_SAFE_INTEGER;\n    sourcePoints.forEach(function (sourcePoint) {\n        const distance = _distanceBetween(targetPoint, sourcePoint);\n        if (distance < minDistance) {\n            minDistance = distance;\n            minPoint = [...sourcePoint];\n        }\n    });\n    return minPoint;\n}\nfunction _distanceBetween(p1, p2) {\n    const [x1, y1] = p1;\n    const [x2, y2] = p2;\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import { StackViewport } from '@cornerstonejs/core';\nimport * as vec3 from 'gl-matrix/vec3';\nexport function moveAnnotationToViewPlane(annotation, viewport) {\n    const { data } = annotation;\n    const { points } = data.handles;\n    const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n    const projectedDistance = vec3.dot(vec3.sub(vec3.create(), points[0], focalPoint), viewPlaneNormal);\n    points.forEach((point) => {\n        vec3.add(point, point, vec3.scale(vec3.create(), [-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]], projectedDistance));\n    });\n    if (viewport instanceof StackViewport) {\n        annotation.metadata.referencedImageId = viewport.getCurrentImageId();\n    }\n    return annotation;\n}\n","import { BaseVolumeViewport, utilities } from '@cornerstonejs/core';\nconst { isEqual } = utilities;\nconst acquisitionMapping = {\n    toIJK: (ijkPrime) => ijkPrime,\n    fromIJK: (ijk) => ijk,\n    type: 'acquistion',\n};\nconst jkMapping = {\n    toIJK: ([j, k, i]) => [i, j, k],\n    fromIJK: ([i, j, k]) => [j, k, i],\n    type: 'jk',\n};\nconst ikMapping = {\n    toIJK: ([i, k, j]) => [i, j, k],\n    fromIJK: ([i, j, k]) => [i, k, j],\n    type: 'ik',\n};\nexport default function normalizeViewportPlane(viewport, boundsIJK) {\n    if (!(viewport instanceof BaseVolumeViewport)) {\n        return { ...acquisitionMapping, boundsIJKPrime: boundsIJK };\n    }\n    const { viewPlaneNormal } = viewport.getCamera();\n    const mapping = (isEqual(Math.abs(viewPlaneNormal[0]), 1) && jkMapping) ||\n        (isEqual(Math.abs(viewPlaneNormal[1]), 1) && ikMapping) ||\n        (isEqual(Math.abs(viewPlaneNormal[2]), 1) && acquisitionMapping);\n    if (!mapping) {\n        return {\n            toIJK: null,\n            boundsIJKPrime: null,\n            fromIJK: null,\n            error: `Only mappings orthogonal to acquisition plane are permitted, but requested ${viewPlaneNormal}`,\n        };\n    }\n    return { ...mapping, boundsIJKPrime: mapping.fromIJK(boundsIJK) };\n}\n","export default function getOrientationStringLPS(vector) {\n    let orientation = '';\n    const orientationX = vector[0] < 0 ? 'R' : 'L';\n    const orientationY = vector[1] < 0 ? 'A' : 'P';\n    const orientationZ = vector[2] < 0 ? 'F' : 'H';\n    const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];\n    const MIN = 0.0001;\n    for (let i = 0; i < 3; i++) {\n        if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {\n            orientation += orientationX;\n            abs[0] = 0;\n        }\n        else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {\n            orientation += orientationY;\n            abs[1] = 0;\n        }\n        else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {\n            orientation += orientationZ;\n            abs[2] = 0;\n        }\n        else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {\n            orientation += orientationX + orientationY;\n            abs[0] = 0;\n            abs[1] = 0;\n        }\n        else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {\n            orientation += orientationX + orientationZ;\n            abs[0] = 0;\n            abs[2] = 0;\n        }\n        else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {\n            orientation += orientationY + orientationZ;\n            abs[1] = 0;\n            abs[2] = 0;\n        }\n        else {\n            break;\n        }\n    }\n    return orientation;\n}\n","export default function invertOrientationStringLPS(orientationString) {\n    let inverted = orientationString.replace('H', 'f');\n    inverted = inverted.replace('F', 'h');\n    inverted = inverted.replace('R', 'l');\n    inverted = inverted.replace('L', 'r');\n    inverted = inverted.replace('A', 'p');\n    inverted = inverted.replace('P', 'a');\n    inverted = inverted.toUpperCase();\n    return inverted;\n}\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\nfunction getBoundsIJKFromRectangleAnnotations(annotations, referenceVolume, options = {}) {\n    const AllBoundsIJK = [];\n    annotations.forEach((annotation) => {\n        const { data } = annotation;\n        const { points } = data.handles;\n        const { imageData, dimensions } = referenceVolume;\n        let pointsToUse = points;\n        if (data.cachedStats?.projectionPoints) {\n            const { projectionPoints } = data.cachedStats;\n            pointsToUse = [].concat(...projectionPoints);\n        }\n        const rectangleCornersIJK = pointsToUse.map((world) => csUtils.transformWorldToIndex(imageData, world));\n        let boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, dimensions);\n        if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n            boundsIJK = extend2DBoundingBoxInViewAxis(boundsIJK, options.numSlicesToProject);\n        }\n        AllBoundsIJK.push(boundsIJK);\n    });\n    if (AllBoundsIJK.length === 1) {\n        return AllBoundsIJK[0];\n    }\n    const boundsIJK = AllBoundsIJK.reduce((accumulator, currentValue) => {\n        return {\n            iMin: Math.min(accumulator.iMin, currentValue.iMin),\n            jMin: Math.min(accumulator.jMin, currentValue.jMin),\n            kMin: Math.min(accumulator.kMin, currentValue.kMin),\n            iMax: Math.max(accumulator.iMax, currentValue.iMax),\n            jMax: Math.max(accumulator.jMax, currentValue.jMax),\n            kMax: Math.max(accumulator.kMax, currentValue.kMax),\n        };\n    }, {\n        iMin: Infinity,\n        jMin: Infinity,\n        kMin: Infinity,\n        iMax: -Infinity,\n        jMax: -Infinity,\n        kMax: -Infinity,\n    });\n    return boundsIJK;\n}\nexport default getBoundsIJKFromRectangleAnnotations;\n","import { getWebWorkerManager } from '@cornerstonejs/core';\nimport { getConfig } from '../config';\nlet registered = false;\nexport function registerComputeWorker() {\n    if (registered) {\n        return;\n    }\n    registered = true;\n    const workerFn = () => {\n        return new Worker(new URL('../workers/computeWorker.js', import.meta.url), {\n            name: 'compute',\n            type: 'module',\n        });\n    };\n    const workerManager = getWebWorkerManager();\n    const config = getConfig();\n    const computeWorkerConfig = config.computeWorker;\n    const options = {\n        maxWorkerInstances: 1,\n        autoTerminateOnIdle: computeWorkerConfig?.autoTerminateOnIdle ?? {\n            enabled: true,\n            idleTimeThreshold: 2000,\n        },\n    };\n    workerManager.registerWorker('compute', workerFn, options);\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { state as annotationState } from '../../../stateManagement/annotation';\nimport getInterpolationDataCollection from '../../contours/interpolation/getInterpolationDataCollection';\nimport interpolate from '../../contours/interpolation/interpolate';\nimport deleteRelatedAnnotations from './deleteRelatedAnnotations';\nimport ChangeTypes from '../../../enums/ChangeTypes';\nimport getViewportForAnnotation from '../../getViewportForAnnotation';\nimport { addContourSegmentationAnnotation } from '../../contourSegmentation/addContourSegmentationAnnotation';\nconst { uuidv4 } = csUtils;\nconst ChangeTypesForInterpolation = [\n    ChangeTypes.HandlesUpdated,\n    ChangeTypes.InterpolationUpdated,\n];\nexport default class InterpolationManager {\n    static { this.toolNames = []; }\n    static addTool(toolName) {\n        if (!this.toolNames.includes(toolName)) {\n            this.toolNames.push(toolName);\n        }\n    }\n    static acceptAutoGenerated(annotationGroupSelector, selector = {}) {\n        const { toolNames, segmentationId, segmentIndex, sliceIndex } = selector;\n        for (const toolName of toolNames || InterpolationManager.toolNames) {\n            const annotations = annotationState.getAnnotations(toolName, annotationGroupSelector);\n            if (!annotations?.length) {\n                continue;\n            }\n            for (const annotation of annotations) {\n                const { interpolationUID, data, autoGenerated, metadata } = annotation;\n                if (interpolationUID) {\n                    annotation.interpolationCompleted = true;\n                }\n                if (!autoGenerated) {\n                    continue;\n                }\n                if (segmentIndex && segmentIndex !== data.segmentation.segmentIndex) {\n                    continue;\n                }\n                if (sliceIndex !== undefined &&\n                    metadata &&\n                    sliceIndex !== metadata.sliceIndex) {\n                    continue;\n                }\n                if (segmentationId &&\n                    segmentationId !== data.segmentation.segmentationId) {\n                    continue;\n                }\n                addContourSegmentationAnnotation(annotation);\n                annotation.autoGenerated = false;\n            }\n        }\n    }\n    static { this.handleAnnotationCompleted = (evt) => {\n        const annotation = evt.detail.annotation;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName, originalToolName } = annotation.metadata;\n        if (!this.toolNames.includes(toolName) &&\n            !this.toolNames.includes(originalToolName)) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn('Unable to find viewport for', annotation);\n            return;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n        };\n        const hasInterpolationUID = !!annotation.interpolationUID;\n        annotation.autoGenerated = false;\n        if (hasInterpolationUID) {\n            deleteRelatedAnnotations(viewportData);\n            interpolate(viewportData);\n            return;\n        }\n        const filterData = [\n            {\n                key: 'segmentIndex',\n                value: annotation.data.segmentation.segmentIndex,\n                parentKey: (annotation) => annotation.data.segmentation,\n            },\n            {\n                key: 'viewPlaneNormal',\n                value: annotation.metadata.viewPlaneNormal,\n                parentKey: (annotation) => annotation.metadata,\n            },\n            {\n                key: 'viewUp',\n                value: annotation.metadata.viewUp,\n                parentKey: (annotation) => annotation.metadata,\n            },\n        ];\n        let interpolationAnnotations = getInterpolationDataCollection(viewportData, filterData);\n        const { sliceIndex } = annotation.metadata;\n        const skipUIDs = new Set();\n        interpolationAnnotations.forEach((interpolationAnnotation) => {\n            if (interpolationAnnotation.interpolationCompleted ||\n                interpolationAnnotation.metadata.sliceIndex === sliceIndex) {\n                const { interpolationUID } = interpolationAnnotation;\n                skipUIDs.add(interpolationUID);\n            }\n        });\n        interpolationAnnotations = interpolationAnnotations.filter((interpolationAnnotation) => !skipUIDs.has(interpolationAnnotation.interpolationUID));\n        annotation.interpolationUID =\n            interpolationAnnotations[0]?.interpolationUID || uuidv4();\n        viewportData.interpolationUID = annotation.interpolationUID;\n        interpolate(viewportData);\n    }; }\n    static { this.handleAnnotationUpdate = (evt) => {\n        const annotation = evt.detail.annotation;\n        const { changeType = ChangeTypes.HandlesUpdated } = evt.detail;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName, originalToolName } = annotation.metadata;\n        if ((!this.toolNames.includes(toolName) &&\n            !this.toolNames.includes(originalToolName)) ||\n            !ChangeTypesForInterpolation.includes(changeType)) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn('Unable to find matching viewport for annotation interpolation', annotation);\n            return;\n        }\n        if (annotation.autoGenerated) {\n            addContourSegmentationAnnotation(annotation);\n            annotation.autoGenerated = false;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n            isInterpolationUpdate: changeType === ChangeTypes.InterpolationUpdated,\n        };\n        interpolate(viewportData);\n    }; }\n    static { this.handleAnnotationDelete = (evt) => {\n        const annotation = evt.detail.annotation;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName } = annotation.metadata;\n        if (!this.toolNames.includes(toolName) || annotation.autoGenerated) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn(\"No viewport, can't delete interpolated results\", annotation);\n            return;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n        };\n        annotation.autoGenerated = false;\n        deleteRelatedAnnotations(viewportData);\n    }; }\n}\nfunction getSliceData(viewport) {\n    const sliceData = {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getCurrentImageIdIndex(),\n    };\n    return sliceData;\n}\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","import { BasicStatsCalculator, InstanceBasicStatsCalculator, } from '../math/basic/BasicStatsCalculator';\nimport { getCalibratedLengthUnitsAndScale } from '../getCalibratedUnits';\nconst TEST_MAX_LOCATIONS = 10;\nfunction createVolumetricState() {\n    return {\n        maxIJKs: [],\n    };\n}\nfunction volumetricStatsCallback(state, data) {\n    const { value } = data;\n    const { maxIJKs } = state;\n    const length = maxIJKs.length;\n    if (typeof value !== 'number' ||\n        (length >= TEST_MAX_LOCATIONS && value < maxIJKs[0].value)) {\n        return;\n    }\n    const dataCopy = {\n        value: data.value,\n        pointLPS: data.pointLPS\n            ? [data.pointLPS[0], data.pointLPS[1], data.pointLPS[2]]\n            : undefined,\n        pointIJK: data.pointIJK\n            ? [data.pointIJK[0], data.pointIJK[1], data.pointIJK[2]]\n            : undefined,\n    };\n    if (!length || value >= maxIJKs[length - 1].value) {\n        maxIJKs.push(dataCopy);\n    }\n    else {\n        for (let i = 0; i < length; i++) {\n            if (value <= maxIJKs[i].value) {\n                maxIJKs.splice(i, 0, dataCopy);\n                break;\n            }\n        }\n    }\n    if (length >= TEST_MAX_LOCATIONS) {\n        maxIJKs.splice(0, 1);\n    }\n}\nfunction volumetricGetStatistics(state, stats, options) {\n    const { spacing, calibration } = options;\n    const { volumeUnit } = getCalibratedLengthUnitsAndScale({\n        calibration,\n        hasPixelSpacing: true,\n    }, []);\n    const volumeScale = spacing ? spacing[0] * spacing[1] * spacing[2] : 1;\n    stats.volume = {\n        value: Array.isArray(stats.count.value)\n            ? stats.count.value.map((v) => v * volumeScale)\n            : stats.count.value * volumeScale,\n        unit: volumeUnit,\n        name: 'volume',\n        label: 'Volume',\n    };\n    stats.maxIJKs = state.maxIJKs.filter((entry) => entry.pointIJK !== undefined);\n    stats.array.push(stats.volume);\n    state.maxIJKs = [];\n    return stats;\n}\nexport class VolumetricCalculator extends BasicStatsCalculator {\n    static { this.volumetricState = createVolumetricState(); }\n    static statsInit(options) {\n        super.statsInit(options);\n        this.volumetricState = createVolumetricState();\n    }\n    static statsCallback(data) {\n        super.statsCallback(data);\n        volumetricStatsCallback(this.volumetricState, data);\n    }\n    static getStatistics(options) {\n        const optionsWithUnit = {\n            ...options,\n            unit: options?.unit || 'none',\n            calibration: options?.calibration,\n            hasPixelSpacing: options?.hasPixelSpacing,\n        };\n        const stats = super.getStatistics(optionsWithUnit);\n        return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);\n    }\n}\nexport class InstanceVolumetricCalculator extends InstanceBasicStatsCalculator {\n    constructor(options) {\n        super(options);\n        this.volumetricState = createVolumetricState();\n    }\n    statsInit(options) {\n        super.statsInit(options);\n        this.volumetricState = createVolumetricState();\n    }\n    statsCallback(data) {\n        super.statsCallback(data);\n        volumetricStatsCallback(this.volumetricState, data);\n    }\n    getStatistics(options) {\n        const optionsWithUnit = {\n            ...options,\n            unit: options?.unit || 'none',\n            calibration: options?.calibration,\n            hasPixelSpacing: options?.hasPixelSpacing,\n        };\n        const stats = super.getStatistics(optionsWithUnit);\n        return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);\n    }\n}\nexport default VolumetricCalculator;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function setBrushSizeForToolGroup(toolGroupId, brushSize, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.configuration.brushSize = brushSize;\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const { renderingEngineId } = viewportsInfoArray[0];\n    const viewportIds = toolGroup.getViewportIds();\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\nexport function getBrushSizeForToolGroup(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n    const brushToolInstance = brushBasedToolInstances[0];\n    if (!brushToolInstance) {\n        return;\n    }\n    return brushToolInstance.configuration.brushSize;\n}\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function setBrushThresholdForToolGroup(toolGroupId, threshold) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        const activeStrategy = tool.configuration.activeStrategy;\n        if (!activeStrategy.toLowerCase().includes('threshold')) {\n            return;\n        }\n        tool.configuration = {\n            ...tool.configuration,\n            threshold: {\n                ...tool.configuration.threshold,\n                ...threshold,\n            },\n        };\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    if (!viewportsInfo.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\nexport function getBrushThresholdForToolGroup(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    const brushToolInstance = brushBasedToolInstances[0];\n    if (!brushToolInstance) {\n        return;\n    }\n    return brushToolInstance.configuration.threshold.range;\n}\n","import { utilities, getWebWorkerManager } from '@cornerstonejs/core';\nimport { triggerWorkerProgress } from './utilsForWorker';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport createMergedLabelmapForIndex from './createMergedLabelmapForIndex';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateSegmentationVolume from './getOrCreateSegmentationVolume';\nimport { getReferenceVolumeForSegmentation } from './getReferenceVolumeForSegmentation';\nasync function computeMetabolicStats({ segmentationIds, segmentIndex, }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const segmentation = getSegmentation(segmentationIds[0]);\n    const { imageIds: segImageIds } = segmentation.representationData\n        .Labelmap;\n    const isValidVolume = utilities.isValidVolume(segImageIds);\n    if (!isValidVolume) {\n        throw new Error('Invalid volume - TMTV cannot be calculated');\n    }\n    const stats = await calculateForVolume({\n        segmentationIds,\n        segmentIndex,\n    });\n    return stats;\n}\nasync function calculateForVolume({ segmentationIds, segmentIndex }) {\n    const labelmapVolumes = segmentationIds.map((id) => {\n        return getOrCreateSegmentationVolume(id);\n    });\n    const mergedLabelmap = createMergedLabelmapForIndex(labelmapVolumes, segmentIndex);\n    if (!mergedLabelmap) {\n        throw new Error('Invalid volume - TMTV cannot be calculated');\n    }\n    const { imageData, dimensions, direction, origin, voxelManager } = mergedLabelmap;\n    const spacing = imageData.getSpacing();\n    const segmentationScalarData = voxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n    };\n    const referenceVolume = getReferenceVolumeForSegmentation(segmentationIds[0]);\n    const imageInfo = {\n        dimensions: referenceVolume.dimensions,\n        spacing: referenceVolume.spacing,\n        origin: referenceVolume.origin,\n        direction: referenceVolume.direction,\n        scalarData: referenceVolume.voxelManager.getCompleteScalarDataArray(),\n    };\n    if (imageInfo.scalarData.length === 0 ||\n        segmentationInfo.scalarData.length === 0) {\n        return {\n            [segmentIndex]: {\n                name: 'TMTV',\n                value: 0,\n            },\n        };\n    }\n    const stats = await getWebWorkerManager().executeTask('compute', 'computeMetabolicStats', {\n        segmentationInfo,\n        imageInfo,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    return stats;\n}\nexport { computeMetabolicStats };\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateImageVolume from './getOrCreateImageVolume';\nexport function getReferenceVolumeForSegmentation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return null;\n    }\n    let referenceImageIds;\n    const labelmap = segmentation.representationData.Labelmap;\n    if ('imageIds' in labelmap) {\n        const { imageIds } = labelmap;\n        const firstImage = cache.getImage(imageIds[0]);\n        const volumeInfo = cache.getVolumeContainingImageId(firstImage.referencedImageId);\n        if (volumeInfo?.volume) {\n            return volumeInfo.volume;\n        }\n        referenceImageIds = imageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n    }\n    else if ('volumeId' in labelmap) {\n        const { volumeId, referencedVolumeId } = labelmap;\n        if (referencedVolumeId) {\n            const refVolume = cache.getVolume(referencedVolumeId);\n            if (refVolume) {\n                return refVolume;\n            }\n        }\n        const segVolume = cache.getVolume(volumeId);\n        if (segVolume) {\n            referenceImageIds = segVolume.imageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n        }\n    }\n    return getOrCreateImageVolume(referenceImageIds);\n}\n","import { generateContourSetsFromLabelmap } from '../contours';\nimport findLargestBidirectional from './findLargestBidirectional';\nimport getOrCreateSegmentationVolume from './getOrCreateSegmentationVolume';\nexport default async function contourAndFindLargestBidirectional(segmentation) {\n    const contours = await generateContourSetsFromLabelmap({\n        segmentations: segmentation,\n    });\n    if (!contours?.length || !contours[0].sliceContours.length) {\n        return;\n    }\n    const { segments = [\n        null,\n        { label: 'Unspecified', color: null, containedSegmentIndices: null },\n    ], } = segmentation;\n    const vol = getOrCreateSegmentationVolume(segmentation.segmentationId);\n    if (!vol) {\n        return;\n    }\n    const segmentIndex = segments.findIndex((it) => !!it);\n    if (segmentIndex === -1) {\n        return;\n    }\n    segments[segmentIndex].segmentIndex = segmentIndex;\n    return findLargestBidirectional(contours[0], vol.volumeId, segments[segmentIndex]);\n}\n","export default function createBidirectionalToolData(bidirectionalData, viewport) {\n    const { majorAxis, minorAxis, label = '', sliceIndex } = bidirectionalData;\n    const [major0, major1] = majorAxis;\n    const [minor0, minor1] = minorAxis;\n    const points = [major0, major1, minor0, minor1];\n    const bidirectionalToolData = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n            toolName: 'Bidirectional',\n            ...viewport.getViewReference({ sliceIndex }),\n        },\n        data: {\n            handles: {\n                points,\n                textBox: {\n                    hasMoved: false,\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n                activeHandleIndex: null,\n            },\n            label,\n            cachedStats: {},\n        },\n        isLocked: false,\n        isVisible: true,\n    };\n    return bidirectionalToolData;\n}\n","import { utilities, eventTarget } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport Events from '../../enums/Events';\nconst { VoxelManager, RLEVoxelMap } = utilities;\nexport function createLabelmapMemo(segmentationId, segmentationVoxelManager) {\n    return createRleMemo(segmentationId, segmentationVoxelManager);\n}\nexport function restoreMemo(isUndo) {\n    const { segmentationVoxelManager, undoVoxelManager, redoVoxelManager } = this;\n    const useVoxelManager = isUndo === false ? redoVoxelManager : undoVoxelManager;\n    useVoxelManager.forEach(({ value, pointIJK }) => {\n        segmentationVoxelManager.setAtIJKPoint(pointIJK, value);\n    });\n    const slices = useVoxelManager.getArrayOfModifiedSlices();\n    triggerSegmentationDataModified(this.segmentationId, slices);\n}\nexport function createRleMemo(segmentationId, segmentationVoxelManager) {\n    const voxelManager = VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n    const state = {\n        segmentationId,\n        restoreMemo,\n        commitMemo,\n        segmentationVoxelManager,\n        voxelManager,\n        id: utilities.uuidv4(),\n        operationType: 'labelmap',\n    };\n    return state;\n}\nfunction commitMemo() {\n    if (this.redoVoxelManager) {\n        return true;\n    }\n    if (!this.voxelManager.modifiedSlices.size) {\n        return false;\n    }\n    const { segmentationVoxelManager } = this;\n    const undoVoxelManager = VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n    RLEVoxelMap.copyMap(undoVoxelManager.map, this.voxelManager.map);\n    for (const key of this.voxelManager.modifiedSlices.keys()) {\n        undoVoxelManager.modifiedSlices.add(key);\n    }\n    this.undoVoxelManager = undoVoxelManager;\n    const redoVoxelManager = VoxelManager.createRLEVolumeVoxelManager({\n        dimensions: this.segmentationVoxelManager.dimensions,\n    });\n    this.redoVoxelManager = redoVoxelManager;\n    undoVoxelManager.forEach(({ index, pointIJK, value }) => {\n        const currentValue = segmentationVoxelManager.getAtIJKPoint(pointIJK);\n        if (currentValue === value) {\n            return;\n        }\n        redoVoxelManager.setAtIndex(index, currentValue);\n    });\n    return true;\n}\n","import { getEnabledElementByIds, volumeLoader, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nexport default async function createLabelmapVolumeForViewport(input) {\n    const { viewportId, renderingEngineId, options } = input;\n    let { segmentationId } = input;\n    const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n    if (!enabledElement) {\n        throw new Error('element disabled');\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof VolumeViewport)) {\n        throw new Error('Segmentation only supports VolumeViewport');\n    }\n    const { uid } = viewport.getDefaultActor();\n    if (segmentationId === undefined) {\n        segmentationId = `${uid}-based-segmentation-${options?.volumeId ?? csUtils.uuidv4().slice(0, 8)}`;\n    }\n    if (options) {\n        const properties = structuredClone(options);\n        await volumeLoader.createLocalVolume(segmentationId, properties);\n    }\n    else {\n        const volumeId = viewport.getVolumeId();\n        volumeLoader.createAndCacheDerivedLabelmapVolume(volumeId, {\n            volumeId: segmentationId,\n        });\n    }\n    return segmentationId;\n}\n","import { volumeLoader, utilities as csUtils, cache } from '@cornerstonejs/core';\nfunction createMergedLabelmapForIndex(labelmaps, segmentIndex = 1, volumeId = 'mergedLabelmap') {\n    labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n        if (!csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n            !csUtils.isEqual(direction, labelmaps[0].direction) ||\n            !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n            !csUtils.isEqual(origin, labelmaps[0].origin)) {\n            throw new Error('labelmaps must have the same size and shape');\n        }\n    });\n    const labelmap = labelmaps[0];\n    const arrayType = labelmap.voxelManager.getConstructor();\n    const outputData = new arrayType(labelmap.voxelManager.getScalarDataLength());\n    labelmaps.forEach((labelmap) => {\n        const voxelManager = labelmap.voxelManager;\n        const scalarDataLength = voxelManager.getScalarDataLength();\n        for (let i = 0; i < scalarDataLength; i++) {\n            if (voxelManager.getAtIndex(i) === segmentIndex) {\n                outputData[i] = segmentIndex;\n            }\n        }\n    });\n    const options = {\n        scalarData: outputData,\n        metadata: labelmap.metadata,\n        spacing: labelmap.spacing,\n        origin: labelmap.origin,\n        direction: labelmap.direction,\n        dimensions: labelmap.dimensions,\n    };\n    const cachedVolume = cache.getVolume(volumeId);\n    let mergedVolume;\n    if (cachedVolume) {\n        mergedVolume = cachedVolume;\n        mergedVolume.voxelManager.setCompleteScalarDataArray(outputData);\n    }\n    else {\n        mergedVolume = volumeLoader.createLocalVolume(volumeId, options);\n    }\n    return mergedVolume;\n}\nexport default createMergedLabelmapForIndex;\n","import { vec3 } from 'gl-matrix';\nimport { createIsInSegment, isLineInSegment } from './isLineInSegment';\nconst EPSILON = 1e-2;\nexport default function findLargestBidirectional(contours, segVolumeId, segment) {\n    const { sliceContours } = contours;\n    const { segmentIndex, containedSegmentIndices } = segment;\n    let maxBidirectional;\n    const isInSegment = createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices);\n    for (const sliceContour of sliceContours) {\n        const bidirectional = createBidirectionalForSlice(sliceContour, isInSegment, maxBidirectional);\n        if (!bidirectional) {\n            continue;\n        }\n        maxBidirectional = bidirectional;\n    }\n    if (maxBidirectional) {\n        Object.assign(maxBidirectional, segment);\n    }\n    return maxBidirectional;\n}\nexport function createBidirectionalForSlice(sliceContour, isInSegment, currentMax = { maxMajor: 0, maxMinor: 0 }) {\n    const { points } = sliceContour.polyData;\n    const { maxMinor: currentMaxMinor, maxMajor: currentMaxMajor } = currentMax;\n    let maxMajor = currentMaxMajor * currentMaxMajor;\n    let maxMinor = currentMaxMinor * currentMaxMinor;\n    let maxMajorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 < maxMajor) {\n                continue;\n            }\n            if (distance2 - EPSILON < maxMajor + EPSILON && maxMajorPoints) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMajor = distance2 - EPSILON;\n            maxMajorPoints = [index1, index2];\n            maxMinor = 0;\n        }\n    }\n    if (!maxMajorPoints) {\n        return;\n    }\n    maxMajor = Math.sqrt(maxMajor + EPSILON);\n    const handle0 = points[maxMajorPoints[0]];\n    const handle1 = points[maxMajorPoints[1]];\n    const unitMajor = vec3.sub(vec3.create(), handle0, handle1);\n    vec3.scale(unitMajor, unitMajor, 1 / maxMajor);\n    let maxMinorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 <= maxMinor) {\n                continue;\n            }\n            const delta = vec3.sub(vec3.create(), point1, point2);\n            const dot = Math.abs(vec3.dot(delta, unitMajor)) / Math.sqrt(distance2);\n            if (dot > EPSILON) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMinor = distance2;\n            maxMinorPoints = [index1, index2];\n        }\n    }\n    if (!maxMinorPoints) {\n        return;\n    }\n    maxMinor = Math.sqrt(maxMinor);\n    const handle2 = points[maxMinorPoints[0]];\n    const handle3 = points[maxMinorPoints[1]];\n    const bidirectional = {\n        majorAxis: [handle0, handle1],\n        minorAxis: [handle2, handle3],\n        maxMajor,\n        maxMinor,\n        ...sliceContour,\n    };\n    return bidirectional;\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { cache, volumeLoader, utilities as csUtils, } from '@cornerstonejs/core';\nfunction getOrCreateImageVolume(referencedImageIds) {\n    if (!referencedImageIds || referencedImageIds.length <= 1) {\n        return;\n    }\n    const isValidVolume = csUtils.isValidVolume(referencedImageIds);\n    if (!isValidVolume) {\n        return;\n    }\n    const volumeId = cache.generateVolumeId(referencedImageIds);\n    let imageVolume = cache.getVolume(volumeId);\n    if (imageVolume) {\n        return imageVolume;\n    }\n    imageVolume = volumeLoader.createAndCacheVolumeFromImagesSync(volumeId, referencedImageIds);\n    return imageVolume;\n}\nexport default getOrCreateImageVolume;\n","import { cache, volumeLoader, utilities, } from '@cornerstonejs/core';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nfunction getOrCreateSegmentationVolume(segmentationId) {\n    const { representationData } = getSegmentation(segmentationId);\n    let { volumeId } = representationData.Labelmap;\n    let segVolume;\n    if (volumeId) {\n        segVolume = cache.getVolume(volumeId);\n        if (segVolume) {\n            return segVolume;\n        }\n    }\n    const { imageIds: labelmapImageIds } = representationData.Labelmap;\n    volumeId = cache.generateVolumeId(labelmapImageIds);\n    if (!labelmapImageIds || labelmapImageIds.length === 1) {\n        return;\n    }\n    const isValidVolume = utilities.isValidVolume(labelmapImageIds);\n    if (!isValidVolume) {\n        return;\n    }\n    segVolume = volumeLoader.createAndCacheVolumeFromImagesSync(volumeId, labelmapImageIds);\n    return segVolume;\n}\nexport default getOrCreateSegmentationVolume;\n","import { cache } from '@cornerstonejs/core';\nexport function getReferenceVolumeForSegmentationVolume(segmentationVolumeId) {\n    const segmentationVolume = cache.getVolume(segmentationVolumeId);\n    if (!segmentationVolume) {\n        return null;\n    }\n    const referencedVolumeId = segmentationVolume.referencedVolumeId;\n    let imageVolume;\n    if (referencedVolumeId) {\n        imageVolume = cache.getVolume(referencedVolumeId);\n    }\n    else {\n        const imageIds = segmentationVolume.imageIds;\n        const image = cache.getImage(imageIds[0]);\n        const referencedImageId = image.referencedImageId;\n        const volumeInfo = cache.getVolumeContainingImageId(referencedImageId);\n        imageVolume = volumeInfo?.volume;\n    }\n    return imageVolume;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","import { getWebWorkerManager } from '@cornerstonejs/core';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport { triggerWorkerProgress, getSegmentationDataForWorker, prepareVolumeStrategyDataForWorker, prepareStackDataForWorker, } from './utilsForWorker';\nexport async function getSegmentLargestBidirectional({ segmentationId, segmentIndices, mode = 'individual', }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_LARGEST_BIDIRECTIONAL, 0);\n    const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);\n    if (!segData) {\n        return;\n    }\n    const { operationData, segImageIds, reconstructableVolume, indices } = segData;\n    const bidirectionalData = reconstructableVolume\n        ? await calculateVolumeBidirectional({\n            operationData,\n            indices,\n            mode,\n        })\n        : await calculateStackBidirectional({\n            segImageIds,\n            indices,\n            mode,\n        });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_LARGEST_BIDIRECTIONAL, 100);\n    return bidirectionalData;\n}\nasync function calculateVolumeBidirectional({ operationData, indices, mode }) {\n    const strategyData = prepareVolumeStrategyDataForWorker(operationData);\n    const { segmentationVoxelManager, segmentationImageData } = strategyData;\n    const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions: segmentationImageData.getDimensions(),\n        spacing: segmentationImageData.getSpacing(),\n        origin: segmentationImageData.getOrigin(),\n        direction: segmentationImageData.getDirection(),\n    };\n    const bidirectionalData = await getWebWorkerManager().executeTask('compute', 'getSegmentLargestBidirectionalInternal', {\n        segmentationInfo,\n        indices,\n        mode,\n    });\n    return bidirectionalData;\n}\nasync function calculateStackBidirectional({ segImageIds, indices, mode }) {\n    const { segmentationInfo } = prepareStackDataForWorker(segImageIds);\n    const bidirectionalData = await getWebWorkerManager().executeTask('compute', 'getSegmentLargestBidirectionalInternal', {\n        segmentationInfo,\n        indices,\n        mode,\n        isStack: true,\n    });\n    return bidirectionalData;\n}\n","import { utilities, getWebWorkerManager } from '@cornerstonejs/core';\nimport { triggerWorkerProgress, getSegmentationDataForWorker, prepareVolumeStrategyDataForWorker, prepareStackDataForWorker, getImageReferenceInfo, } from './utilsForWorker';\nimport { getPixelValueUnitsImageId } from '../getPixelValueUnits';\nimport VolumetricCalculator from './VolumetricCalculator';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nconst radiusForVol1 = Math.pow((3 * 1000) / (4 * Math.PI), 1 / 3);\nasync function getStatistics({ segmentationId, segmentIndices, mode = 'collective', }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);\n    if (!segData) {\n        return;\n    }\n    const { operationData, segVolumeId, segImageIds, reconstructableVolume, indices, } = segData;\n    const { refImageId, modalityUnitOptions } = getImageReferenceInfo(segVolumeId, segImageIds);\n    const unit = getPixelValueUnitsImageId(refImageId, modalityUnitOptions);\n    const stats = reconstructableVolume\n        ? await calculateVolumeStatistics({\n            operationData,\n            indices,\n            unit,\n            mode,\n        })\n        : await calculateStackStatistics({\n            segImageIds,\n            indices,\n            unit,\n            mode,\n        });\n    return stats;\n}\nasync function calculateVolumeStatistics({ operationData, indices, unit, mode, }) {\n    const strategyData = prepareVolumeStrategyDataForWorker(operationData);\n    const { segmentationVoxelManager, imageVoxelManager, segmentationImageData, imageData, } = strategyData;\n    if (!segmentationVoxelManager || !segmentationImageData) {\n        return;\n    }\n    const spacing = segmentationImageData.getSpacing();\n    const { boundsIJK: boundsOrig } = segmentationVoxelManager;\n    if (!boundsOrig) {\n        return VolumetricCalculator.getStatistics({ spacing });\n    }\n    const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions: segmentationImageData.getDimensions(),\n        spacing: segmentationImageData.getSpacing(),\n        origin: segmentationImageData.getOrigin(),\n        direction: segmentationImageData.getDirection(),\n    };\n    const imageInfo = {\n        scalarData: imageVoxelManager.getCompleteScalarDataArray(),\n        dimensions: imageData.getDimensions(),\n        spacing: imageData.getSpacing(),\n        origin: imageData.getOrigin(),\n        direction: imageData.getDirection(),\n    };\n    if (!imageInfo.scalarData?.length) {\n        return;\n    }\n    const stats = await getWebWorkerManager().executeTask('compute', 'calculateSegmentsStatisticsVolume', {\n        segmentationInfo,\n        imageInfo,\n        indices,\n        unit,\n        mode,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    if (mode === 'collective') {\n        return processSegmentationStatistics({\n            stats,\n            unit,\n            spacing,\n            segmentationImageData,\n            imageVoxelManager,\n        });\n    }\n    else {\n        const finalStats = {};\n        Object.entries(stats).forEach(([segmentIndex, stat]) => {\n            finalStats[segmentIndex] = processSegmentationStatistics({\n                stats: stat,\n                unit,\n                spacing,\n                segmentationImageData,\n                imageVoxelManager,\n            });\n        });\n        return finalStats;\n    }\n}\nconst updateStatsArray = (stats, newStat) => {\n    if (!stats.array) {\n        return;\n    }\n    const existingIndex = stats.array.findIndex((stat) => stat.name === newStat.name);\n    if (existingIndex !== -1) {\n        stats.array[existingIndex] = newStat;\n    }\n    else {\n        stats.array.push(newStat);\n    }\n};\nconst processSegmentationStatistics = ({ stats, unit, spacing, segmentationImageData, imageVoxelManager, }) => {\n    stats.mean.unit = unit;\n    stats.max.unit = unit;\n    stats.min.unit = unit;\n    if (unit !== 'SUV') {\n        return stats;\n    }\n    const radiusIJK = spacing.map((s) => Math.max(1, Math.round((1.1 * radiusForVol1) / s)));\n    for (const testMax of stats.maxIJKs) {\n        const testStats = getSphereStats(testMax, radiusIJK, segmentationImageData, imageVoxelManager, spacing);\n        if (!testStats) {\n            continue;\n        }\n        const { mean } = testStats;\n        if (!stats.peakValue || stats.peakValue.value <= mean.value) {\n            stats.peakValue = {\n                name: 'peakValue',\n                label: 'Peak Value',\n                value: mean.value,\n                unit,\n            };\n            stats.peakPoint = {\n                name: 'peakLPS',\n                label: 'Peak SUV Point',\n                value: testMax.pointLPS ? [...testMax.pointLPS] : null,\n                unit: null,\n            };\n            updateStatsArray(stats, stats.peakValue);\n            updateStatsArray(stats, stats.peakPoint);\n        }\n    }\n    if (stats.volume && stats.mean) {\n        const mtv = stats.volume.value;\n        const suvMean = stats.mean.value;\n        stats.lesionGlycolysis = {\n            name: 'lesionGlycolysis',\n            label: 'Lesion Glycolysis',\n            value: mtv * suvMean,\n            unit: `${stats.volume.unit}·${unit}`,\n        };\n        updateStatsArray(stats, stats.lesionGlycolysis);\n    }\n    return stats;\n};\nasync function calculateStackStatistics({ segImageIds, indices, unit, mode }) {\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const { segmentationInfo, imageInfo } = prepareStackDataForWorker(segImageIds);\n    const stats = await getWebWorkerManager().executeTask('compute', 'calculateSegmentsStatisticsStack', {\n        segmentationInfo,\n        imageInfo,\n        indices,\n        mode,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    const spacing = segmentationInfo[0].spacing;\n    const segmentationImageData = segmentationInfo[0];\n    const imageVoxelManager = imageInfo[0].voxelManager;\n    if (mode === 'collective') {\n        return processSegmentationStatistics({\n            stats,\n            unit,\n            spacing,\n            segmentationImageData,\n            imageVoxelManager,\n        });\n    }\n    else {\n        const finalStats = {};\n        Object.entries(stats).forEach(([segmentIndex, stat]) => {\n            finalStats[segmentIndex] = processSegmentationStatistics({\n                stats: stat,\n                unit,\n                spacing,\n                segmentationImageData,\n                imageVoxelManager,\n            });\n        });\n        return finalStats;\n    }\n}\nfunction getSphereStats(testMax, radiusIJK, segData, imageVoxels, spacing) {\n    const { pointIJK: centerIJK, pointLPS: centerLPS } = testMax;\n    if (!centerIJK) {\n        return;\n    }\n    const boundsIJK = centerIJK.map((ijk, idx) => [\n        ijk - radiusIJK[idx],\n        ijk + radiusIJK[idx],\n    ]);\n    const testFunction = (_pointLPS, pointIJK) => {\n        const i = (pointIJK[0] - centerIJK[0]) / radiusIJK[0];\n        const j = (pointIJK[1] - centerIJK[1]) / radiusIJK[1];\n        const k = (pointIJK[2] - centerIJK[2]) / radiusIJK[2];\n        const radius = i * i + j * j + k * k;\n        return radius <= 1;\n    };\n    const statsFunction = ({ pointIJK, pointLPS }) => {\n        const value = imageVoxels.getAtIJKPoint(pointIJK);\n        if (value === undefined) {\n            return;\n        }\n        VolumetricCalculator.statsCallback({ value, pointLPS, pointIJK });\n    };\n    VolumetricCalculator.statsInit({ storePointData: false });\n    utilities.pointInShapeCallback(segData, {\n        pointInShapeFn: testFunction,\n        callback: statsFunction,\n        boundsIJK,\n    });\n    return VolumetricCalculator.getStatistics({ spacing });\n}\nexport default getStatistics;\n","import { cache } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getCachedSegmentIndices, setCachedSegmentIndices } from './utilities';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nfunction getUniqueSegmentIndices(segmentationId) {\n    const cachedResult = getCachedSegmentIndices(segmentationId);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation found for segmentationId ${segmentationId}`);\n    }\n    let indices;\n    if (segmentation.representationData.Labelmap) {\n        indices = handleLabelmapSegmentation(segmentation, segmentationId);\n    }\n    else if (segmentation.representationData.Contour) {\n        indices = handleContourSegmentation(segmentation);\n    }\n    else if (segmentation.representationData.Surface) {\n        indices = handleSurfaceSegmentation(segmentation);\n    }\n    else {\n        throw new Error(`Unsupported segmentation type: ${segmentation.representationData}`);\n    }\n    setCachedSegmentIndices(segmentationId, indices);\n    return indices;\n}\nfunction handleLabelmapSegmentation(segmentation, segmentationId) {\n    const labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    const keySet = new Set();\n    if (labelmapData.imageIds) {\n        addImageSegmentIndices(keySet, labelmapData.imageIds);\n    }\n    else {\n        addVolumeSegmentIndices(keySet, segmentationId);\n    }\n    return Array.from(keySet)\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nfunction addVolumeSegmentIndices(keySet, segmentationId) {\n    const volume = cache.getVolume(segmentationId);\n    volume.voxelManager.forEach(({ value }) => {\n        if (value !== 0) {\n            keySet.add(value);\n        }\n    });\n}\nfunction addImageSegmentIndices(keySet, imageIds) {\n    imageIds.forEach((segmentationImageId) => {\n        const image = cache.getImage(segmentationImageId);\n        const scalarData = image.voxelManager.getScalarData();\n        scalarData.forEach((segmentIndex) => {\n            if (segmentIndex !== 0) {\n                keySet.add(segmentIndex);\n            }\n        });\n    });\n}\nfunction handleContourSegmentation(segmentation) {\n    const { annotationUIDsMap, geometryIds } = segmentation.representationData.Contour || {};\n    if (!geometryIds) {\n        throw new Error(`No geometryIds found for segmentationId ${segmentation.segmentationId}`);\n    }\n    const indices = new Set([...annotationUIDsMap.keys()]);\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        indices.add(geometry.data.segmentIndex);\n    });\n    return Array.from(indices).sort((a, b) => a - b);\n}\nfunction handleSurfaceSegmentation(segmentation) {\n    const geometryIds = segmentation.representationData.Surface?.geometryIds ?? [];\n    return Array.from(geometryIds.keys())\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nexport { getUniqueSegmentIndices };\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import { cache } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nexport default function isLineInSegment(point1, point2, isInSegment) {\n    const ijk1 = isInSegment.toIJK(point1);\n    const ijk2 = isInSegment.toIJK(point2);\n    const testPoint = vec3.create();\n    const { testIJK } = isInSegment;\n    const delta = vec3.sub(vec3.create(), ijk1, ijk2);\n    const testSize = Math.round(Math.max(...delta.map(Math.abs)));\n    if (testSize < 2) {\n        return true;\n    }\n    const unitDelta = vec3.scale(vec3.create(), delta, 1 / testSize);\n    for (let i = 1; i < testSize; i++) {\n        vec3.scaleAndAdd(testPoint, ijk2, unitDelta, i);\n        if (!testIJK(testPoint)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction createIsInSegmentMetadata({ dimensions, imageData, voxelManager, segmentIndex, containedSegmentIndices, }) {\n    const width = dimensions[0];\n    const pixelsPerSlice = width * dimensions[1];\n    return {\n        testCenter: (point1, point2) => {\n            const point = vec3.add(vec3.create(), point1, point2).map((it) => it / 2);\n            const ijk = imageData.worldToIndex(point).map(Math.round);\n            const [i, j, k] = ijk;\n            const index = i + j * width + k * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n        toIJK: (point) => imageData.worldToIndex(point),\n        testIJK: (ijk) => {\n            const [i, j, k] = ijk;\n            const index = Math.round(i) + Math.round(j) * width + Math.round(k) * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n    };\n}\nfunction createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices) {\n    const vol = cache.getVolume(segVolumeId);\n    if (!vol) {\n        console.warn(`No volume found for ${segVolumeId}`);\n        return;\n    }\n    return createIsInSegmentMetadata({\n        dimensions: vol.dimensions,\n        imageData: vol.imageData,\n        voxelManager: vol.voxelManager,\n        segmentIndex,\n        containedSegmentIndices,\n    });\n}\nexport { createIsInSegment, createIsInSegmentMetadata, isLineInSegment };\n","import { utilities } from '@cornerstonejs/core';\nimport normalizeViewportPlane from '../normalizeViewportPlane';\nconst { RLEVoxelMap, VoxelManager } = utilities;\nconst MAX_IMAGE_SIZE = 65535;\nexport var SegmentationEnum;\n(function (SegmentationEnum) {\n    SegmentationEnum[SegmentationEnum[\"SEGMENT\"] = -1] = \"SEGMENT\";\n    SegmentationEnum[SegmentationEnum[\"ISLAND\"] = -2] = \"ISLAND\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR\"] = -3] = \"INTERIOR\";\n    SegmentationEnum[SegmentationEnum[\"EXTERIOR\"] = -4] = \"EXTERIOR\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR_SMALL\"] = -5] = \"INTERIOR_SMALL\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR_TEST\"] = -6] = \"INTERIOR_TEST\";\n})(SegmentationEnum || (SegmentationEnum = {}));\nexport default class IslandRemoval {\n    constructor(options) {\n        this.fillInternalEdge = false;\n        this.maxInternalRemove = 128;\n        this.maxInternalRemove =\n            options?.maxInternalRemove ?? this.maxInternalRemove;\n        this.fillInternalEdge = options?.fillInternalEdge ?? this.fillInternalEdge;\n    }\n    initialize(viewport, segmentationVoxels, options) {\n        const hasSource = !!segmentationVoxels.sourceVoxelManager;\n        const segmentationVoxelManager = hasSource\n            ? segmentationVoxels.sourceVoxelManager\n            : segmentationVoxels;\n        const previewVoxelManager = hasSource\n            ? segmentationVoxels\n            : VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n        const { segmentIndex = 1, previewSegmentIndex = 1 } = options;\n        const clickedPoints = options.points || segmentationVoxelManager.getPoints();\n        if (!clickedPoints?.length) {\n            return;\n        }\n        const boundsIJK = segmentationVoxelManager\n            .getBoundsIJK()\n            .map((bound, i) => [\n            Math.min(bound[0], ...clickedPoints.map((point) => point[i])),\n            Math.max(bound[1], ...clickedPoints.map((point) => point[i])),\n        ]);\n        if (boundsIJK.find((it) => it[0] < 0 || it[1] > MAX_IMAGE_SIZE)) {\n            return;\n        }\n        const { toIJK, fromIJK, boundsIJKPrime, error } = normalizeViewportPlane(viewport, boundsIJK);\n        if (error) {\n            console.warn('Not performing island removal for planes not orthogonal to acquisition plane', error);\n            return;\n        }\n        const [width, height, depth] = fromIJK(segmentationVoxelManager.dimensions);\n        const segmentSet = new RLEVoxelMap(width, height, depth);\n        const getter = (i, j, k) => {\n            const index = segmentationVoxelManager.toIndex(toIJK([i, j, k]));\n            const oldVal = segmentationVoxelManager.getAtIndex(index);\n            if (oldVal === previewSegmentIndex || oldVal === segmentIndex) {\n                return SegmentationEnum.SEGMENT;\n            }\n        };\n        segmentSet.fillFrom(getter, boundsIJKPrime);\n        segmentSet.normalizer = { toIJK, fromIJK, boundsIJKPrime };\n        this.segmentSet = segmentSet;\n        this.previewVoxelManager = previewVoxelManager;\n        this.segmentIndex = segmentIndex;\n        this.previewSegmentIndex = previewSegmentIndex ?? segmentIndex;\n        this.selectedPoints = clickedPoints;\n        return true;\n    }\n    floodFillSegmentIsland() {\n        const { selectedPoints: clickedPoints, segmentSet } = this;\n        let floodedCount = 0;\n        const { fromIJK } = segmentSet.normalizer;\n        clickedPoints.forEach((clickedPoint) => {\n            const ijkPrime = fromIJK(clickedPoint);\n            const index = segmentSet.toIndex(ijkPrime);\n            const [iPrime, jPrime, kPrime] = ijkPrime;\n            if (segmentSet.get(index) === SegmentationEnum.SEGMENT) {\n                floodedCount += segmentSet.floodFill(iPrime, jPrime, kPrime, SegmentationEnum.ISLAND);\n            }\n        });\n        return floodedCount;\n    }\n    removeExternalIslands() {\n        const { previewVoxelManager, segmentSet } = this;\n        const { toIJK } = segmentSet.normalizer;\n        const callback = (index, rle) => {\n            const [, jPrime, kPrime] = segmentSet.toIJK(index);\n            if (rle.value !== SegmentationEnum.ISLAND) {\n                for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {\n                    const clearPoint = toIJK([iPrime, jPrime, kPrime]);\n                    const v = previewVoxelManager.getAtIJKPoint(clearPoint);\n                    previewVoxelManager.setAtIJKPoint(clearPoint, v === undefined ? 0 : null);\n                }\n            }\n        };\n        segmentSet.forEach(callback, { rowModified: true });\n    }\n    removeInternalIslands() {\n        const { segmentSet, previewVoxelManager, previewSegmentIndex } = this;\n        const { height, normalizer, width } = segmentSet;\n        const { toIJK } = normalizer;\n        segmentSet.forEachRow((baseIndex, row) => {\n            let lastRle;\n            for (const rle of [...row]) {\n                if (rle.value !== SegmentationEnum.ISLAND) {\n                    continue;\n                }\n                if (!lastRle) {\n                    if (this.fillInternalEdge && rle.start > 0) {\n                        for (let iPrime = 0; iPrime < rle.start; iPrime++) {\n                            segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                        }\n                    }\n                    lastRle = rle;\n                    continue;\n                }\n                for (let iPrime = lastRle.end; iPrime < rle.start; iPrime++) {\n                    segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                }\n                lastRle = rle;\n            }\n            if (this.fillInternalEdge && lastRle?.end < width) {\n                for (let iPrime = lastRle.end; iPrime < width; iPrime++) {\n                    segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                }\n            }\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR) {\n                return;\n            }\n            const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);\n            const rowPrev = jPrime > 0 ? segmentSet.getRun(jPrime - 1, kPrime) : null;\n            const rowNext = jPrime + 1 < height ? segmentSet.getRun(jPrime + 1, kPrime) : null;\n            const isLast = jPrime === height - 1;\n            const isFirst = jPrime === 0;\n            const prevCovers = IslandRemoval.covers(rle, rowPrev) ||\n                (isFirst && this.fillInternalEdge);\n            const nextCovers = IslandRemoval.covers(rle, rowNext) || (isLast && this.fillInternalEdge);\n            if (rle.end - rle.start > 2 && (!prevCovers || !nextCovers)) {\n                segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.EXTERIOR, { singlePlane: true });\n            }\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR) {\n                return;\n            }\n            const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);\n            const size = segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.INTERIOR_TEST);\n            const isBig = size > this.maxInternalRemove;\n            const newType = isBig\n                ? SegmentationEnum.EXTERIOR\n                : SegmentationEnum.INTERIOR_SMALL;\n            segmentSet.floodFill(rle.start, jPrime, kPrime, newType);\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR_SMALL) {\n                return;\n            }\n            for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {\n                const clearPoint = toIJK(segmentSet.toIJK(baseIndex + iPrime));\n                previewVoxelManager.setAtIJKPoint(clearPoint, previewSegmentIndex);\n            }\n        });\n        return previewVoxelManager.getArrayOfModifiedSlices();\n    }\n    static covers(rle, row) {\n        if (!row) {\n            return false;\n        }\n        let { start } = rle;\n        const { end } = rle;\n        for (const rowRle of row) {\n            if (start >= rowRle.start && start < rowRle.end) {\n                start = rowRle.end;\n                if (start >= end) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n","import { state } from '../../stateManagement/annotation';\nimport RectangleROIStartEndThresholdTool from '../../tools/segmentation/RectangleROIStartEndThresholdTool';\nimport RectangleROIThresholdTool from '../../tools/segmentation/RectangleROIThresholdTool';\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nfunction rectangleROIThresholdVolumeByRange(annotationUIDs, segmentationVolume, thresholdVolumeInformation, options) {\n    const annotations = annotationUIDs.map((annotationUID) => {\n        return state.getAnnotation(annotationUID);\n    });\n    _validateAnnotations(annotations);\n    let boundsIJK;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();\n        if (volumeSize === segmentationVolume.voxelManager.getScalarDataLength() ||\n            i === 0) {\n            boundsIJK = getBoundsIJKFromRectangleAnnotations(annotations, thresholdVolumeInformation[i].volume, options);\n        }\n    }\n    const outputSegmentationVolume = thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, { ...options, boundsIJK, segmentationId: options.segmentationId });\n    outputSegmentationVolume.modified();\n    return outputSegmentationVolume;\n}\nfunction _validateAnnotations(annotations) {\n    const validToolNames = [\n        RectangleROIThresholdTool.toolName,\n        RectangleROIStartEndThresholdTool.toolName,\n    ];\n    for (const annotation of annotations) {\n        const name = annotation.metadata.toolName;\n        if (!validToolNames.includes(name)) {\n            throw new Error('rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations');\n        }\n    }\n}\nexport default rectangleROIThresholdVolumeByRange;\n","import { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { state as annotationState, config as annotationConfig, } from '../../stateManagement/annotation';\nimport contourAndFindLargestBidirectional from './contourAndFindLargestBidirectional';\nimport createBidirectionalToolData from './createBidirectionalToolData';\nimport BidirectionalTool from '../../tools/annotation/BidirectionalTool';\nimport { getSegmentations } from '../../stateManagement/segmentation/getSegmentations';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nexport default async function segmentContourAction(element, configuration) {\n    console.warn('Deprecation Alert: There is a new getSegmentLargestBidirectional function that handles volume, stack and individual segment cases properly. This function is deprecated and will be removed in a future version.');\n    const { data: configurationData } = configuration;\n    const enabledElement = getEnabledElement(element);\n    const segment = (configurationData.getSegment || defaultGetSegment)(enabledElement, configurationData);\n    if (!segment) {\n        return;\n    }\n    const FrameOfReferenceUID = enabledElement.viewport.getFrameOfReferenceUID();\n    const segmentationsList = getSegmentations();\n    const { segmentIndex, segmentationId } = segment;\n    const bidirectionals = annotationState.getAnnotations(this.toolName || BidirectionalTool.toolName, FrameOfReferenceUID);\n    let hasExistingActiveSegment = false;\n    const existingLargestBidirectionals = bidirectionals.filter((existingBidirectionalItem) => {\n        const segment = existingBidirectionalItem.data.segment;\n        if (!segment) {\n            return false;\n        }\n        if (segment.segmentationId === segmentationId &&\n            segment.segmentIndex === segmentIndex) {\n            hasExistingActiveSegment = true;\n            existingBidirectionalItem.data.segment = segment;\n        }\n        return true;\n    });\n    if (!hasExistingActiveSegment) {\n        existingLargestBidirectionals.push({\n            data: { segment },\n        });\n    }\n    let newBidirectional;\n    existingLargestBidirectionals.forEach(async (existingLargestBidirectional) => {\n        const segments = [];\n        const updateSegment = existingLargestBidirectional.data\n            .segment;\n        const { segmentIndex, segmentationId } = updateSegment;\n        segments[segmentIndex] = updateSegment;\n        annotationState.removeAnnotation(existingLargestBidirectional.annotationUID);\n        const bidirectionalData = await contourAndFindLargestBidirectional({\n            ...segmentationsList.find((segmentation) => segmentation.segmentationId === segmentationId),\n            segments,\n        });\n        if (!bidirectionalData) {\n            return;\n        }\n        const bidirectionalToolData = createBidirectionalToolData(bidirectionalData, enabledElement.viewport);\n        bidirectionalToolData.annotationUID =\n            existingLargestBidirectional.annotationUID;\n        bidirectionalToolData.data.segment = updateSegment;\n        const annotationUID = annotationState.addAnnotation(bidirectionalToolData, FrameOfReferenceUID);\n        if (updateSegment.segmentIndex === segment.segmentIndex &&\n            updateSegment.segmentationId === segment.segmentationId) {\n            newBidirectional = bidirectionalData;\n            const { style } = segment;\n            if (style) {\n                annotationConfig.style.setAnnotationStyles(annotationUID, style);\n            }\n        }\n    });\n    if (newBidirectional) {\n        const { sliceIndex } = newBidirectional;\n        const imageIds = enabledElement.viewport.getImageIds();\n        utilities.jumpToSlice(element, {\n            imageIndex: imageIds.length - 1 - sliceIndex,\n        });\n        enabledElement.viewport.render();\n    }\n    else {\n        console.warn('No bidirectional found');\n    }\n    return newBidirectional;\n}\nexport function defaultGetSegment(enabledElement, configuration) {\n    const segmentationsList = getSegmentations();\n    if (!segmentationsList.length) {\n        return;\n    }\n    const segmentationId = configuration.segmentationId || segmentationsList[0].segmentationId;\n    const segmentIndex = configuration.segmentIndex ?? getActiveSegmentIndex(segmentationId);\n    if (!segmentIndex) {\n        return;\n    }\n    const segmentData = configuration.segmentData?.get(segmentIndex);\n    return {\n        label: `Segment ${segmentIndex}`,\n        segmentIndex,\n        segmentationId,\n        ...segmentData,\n    };\n}\n","import { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getVoxelOverlap, processVolumes } from './utilities';\nfunction thresholdSegmentationByRange(segmentationVolume, segmentationIndex, thresholdVolumeInformation, overlapType, segmentationId) {\n    if (!segmentationId) {\n        throw new Error('Segmentation ID is required to be passed inside thresholdSegmentationByRange');\n    }\n    const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);\n    const { voxelManager } = volumeInfoList[baseVolumeIdx];\n    const refVoxelManager = voxelManager;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    const segVoxelManager = segmentationVolume.voxelManager;\n    volumeInfoList.forEach((volumeInfo) => {\n        const { volumeSize } = volumeInfo;\n        if (volumeSize === scalarDataLength) {\n            _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo);\n        }\n        else {\n            _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType);\n        }\n    });\n    triggerSegmentationDataModified(segmentationId);\n    return segmentationVolume;\n}\nfunction _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType) {\n    const { imageData, lower, upper, dimensions } = volumeInfo;\n    let total, overlaps, range;\n    const segScalarDataLength = segVoxelManager.getScalarDataLength();\n    for (let i = 0; i < segScalarDataLength; i++) {\n        if (segScalarDataLength.getAtIndex(i) === segmentationIndex) {\n            const overlapBounds = getVoxelOverlap(imageData, dimensions, volumeInfoList[baseVolumeIdx].spacing, volumeInfoList[baseVolumeIdx].imageData.getPoint(i));\n            const callbackOverlap = ({ value }) => {\n                total = total + 1;\n                if (value >= range.lower && value <= range.upper) {\n                    overlaps = overlaps + 1;\n                }\n            };\n            total = 0;\n            overlaps = 0;\n            range = { lower, upper };\n            let overlapTest = false;\n            segVoxelManager.forEach(callbackOverlap, {\n                imageData,\n                boundsIJK: overlapBounds,\n            });\n            overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;\n            segVoxelManager.setAtIndex(i, overlapTest ? segmentationIndex : 0);\n        }\n    }\n    return { total, range, overlaps };\n}\nfunction _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo) {\n    const { lower, upper } = volumeInfo;\n    const scalarDataLength = segVoxelManager.getScalarDataLength();\n    for (let i = 0; i < scalarDataLength; i++) {\n        if (segVoxelManager.getAtIndex[i] === segmentationIndex) {\n            const value = refVoxelManager.getAtIndex(i);\n            segVoxelManager.setAtIndex(i, value >= lower && value <= upper ? segmentationIndex : 0);\n        }\n    }\n}\nexport default thresholdSegmentationByRange;\n","import { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getVoxelOverlap, processVolumes } from './utilities';\nfunction thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, options) {\n    const { imageData: segmentationImageData } = segmentationVolume;\n    const { overwrite, boundsIJK, segmentationId } = options;\n    if (!segmentationId) {\n        throw new Error('Segmentation ID is required to be passed inside thresholdVolumeByRange as options');\n    }\n    const overlapType = options?.overlapType || 0;\n    const segVoxelManager = segmentationVolume.voxelManager;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    if (overwrite) {\n        for (let i = 0; i < scalarDataLength; i++) {\n            segVoxelManager.setAtIndex(i, 0);\n        }\n    }\n    const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);\n    let overlaps, total, range;\n    const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n        const callbackOverlap = ({ value }) => {\n            total = total + 1;\n            if (value >= range.lower && value <= range.upper) {\n                overlaps = overlaps + 1;\n            }\n        };\n        const { imageData, dimensions, lower, upper } = volumeInfo;\n        const overlapBounds = getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter);\n        total = 0;\n        overlaps = 0;\n        range = { lower, upper };\n        let overlapTest = false;\n        const { voxelManager } = imageData.get('voxelManager');\n        voxelManager.forEach(callbackOverlap, {\n            imageData,\n            boundsIJK: overlapBounds,\n        });\n        if (overlapType === 0) {\n            overlapTest = overlaps > 0;\n        }\n        else if (overlapType == 1) {\n            overlapTest = overlaps === total;\n        }\n        return overlapTest;\n    };\n    const testRange = (volumeInfo, pointIJK) => {\n        const { imageData, lower, upper } = volumeInfo;\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const offset = voxelManager.toIndex(pointIJK);\n        const value = voxelManager.getAtIndex(offset);\n        if (value <= lower || value >= upper) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    const callback = ({ index, pointIJK, pointLPS }) => {\n        let insert = volumeInfoList.length > 0;\n        for (let i = 0; i < volumeInfoList.length; i++) {\n            if (volumeInfoList[i].volumeSize === scalarDataLength) {\n                insert = testRange(volumeInfoList[i], pointIJK);\n            }\n            else {\n                insert = testOverlapRange(volumeInfoList[i], volumeInfoList[baseVolumeIdx].spacing, pointLPS);\n            }\n            if (!insert) {\n                break;\n            }\n        }\n        if (insert) {\n            segVoxelManager.setAtIndex(index, options.segmentIndex || 1);\n        }\n    };\n    const voxelManager = segmentationVolume.voxelManager;\n    voxelManager.forEach(callback, {\n        imageData: segmentationImageData,\n        boundsIJK,\n    });\n    triggerSegmentationDataModified(options.segmentationId);\n    return segmentationVolume;\n}\nexport default thresholdVolumeByRange;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nconst equalsCheck = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\nexport function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {\n    const halfSpacingX = voxelSpacing[0] / 2;\n    const halfSpacingY = voxelSpacing[1] / 2;\n    const halfSpacingZ = voxelSpacing[2] / 2;\n    const voxelCornersIJK = new Array(8);\n    voxelCornersIJK[0] = csUtils.transformWorldToIndex(imageData, [\n        voxelCenter[0] - halfSpacingX,\n        voxelCenter[1] - halfSpacingY,\n        voxelCenter[2] - halfSpacingZ,\n    ]);\n    const offsets = [\n        [1, -1, -1],\n        [-1, 1, -1],\n        [1, 1, -1],\n        [-1, -1, 1],\n        [1, -1, 1],\n        [-1, 1, 1],\n        [1, 1, 1],\n    ];\n    for (let i = 0; i < 7; i++) {\n        const [xOff, yOff, zOff] = offsets[i];\n        voxelCornersIJK[i + 1] = csUtils.transformWorldToIndex(imageData, [\n            voxelCenter[0] + xOff * halfSpacingX,\n            voxelCenter[1] + yOff * halfSpacingY,\n            voxelCenter[2] + zOff * halfSpacingZ,\n        ]);\n    }\n    return getBoundingBoxAroundShapeIJK(voxelCornersIJK, dimensions);\n}\nexport function processVolumes(segmentationVolume, thresholdVolumeInformation) {\n    const { spacing: segmentationSpacing } = segmentationVolume;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    const volumeInfoList = [];\n    let baseVolumeIdx = 0;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const { imageData, spacing, dimensions, voxelManager } = thresholdVolumeInformation[i].volume;\n        const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();\n        if (volumeSize === scalarDataLength &&\n            equalsCheck(spacing, segmentationSpacing)) {\n            baseVolumeIdx = i;\n        }\n        const lower = thresholdVolumeInformation[i].lower;\n        const upper = thresholdVolumeInformation[i].upper;\n        volumeInfoList.push({\n            imageData,\n            lower,\n            upper,\n            spacing,\n            dimensions,\n            volumeSize,\n            voxelManager,\n        });\n    }\n    return {\n        volumeInfoList,\n        baseVolumeIdx,\n    };\n}\nconst segmentIndicesCache = new Map();\nexport const setSegmentationDirty = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = true;\n    }\n};\nexport const setSegmentationClean = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = false;\n    }\n};\nexport const getCachedSegmentIndices = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached && !cached.isDirty) {\n        return cached.indices;\n    }\n    return null;\n};\nexport const setCachedSegmentIndices = (segmentationId, indices) => {\n    segmentIndicesCache.set(segmentationId, { indices, isDirty: false });\n};\n","import { cache, utilities, eventTarget, Enums, triggerEvent, metaData, } from '@cornerstonejs/core';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getStrategyData } from '../../tools/segmentation/strategies/utils/getStrategyData';\nimport ensureSegmentationVolume from '../../tools/segmentation/strategies/compositions/ensureSegmentationVolume';\nimport ensureImageVolume from '../../tools/segmentation/strategies/compositions/ensureImageVolume';\nexport const triggerWorkerProgress = (workerType, progress) => {\n    triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n        progress,\n        type: workerType,\n    });\n};\nexport const getSegmentationDataForWorker = (segmentationId, segmentIndices) => {\n    const segmentation = getSegmentation(segmentationId);\n    const { representationData } = segmentation;\n    const { Labelmap } = representationData;\n    if (!Labelmap) {\n        console.debug('No labelmap found for segmentation', segmentationId);\n        return null;\n    }\n    const segVolumeId = Labelmap.volumeId;\n    const segImageIds = Labelmap.imageIds;\n    const operationData = {\n        segmentationId,\n        volumeId: segVolumeId,\n        imageIds: segImageIds,\n    };\n    let reconstructableVolume = false;\n    if (segImageIds) {\n        const refImageIds = segImageIds.map((imageId) => {\n            const image = cache.getImage(imageId);\n            return image.referencedImageId;\n        });\n        reconstructableVolume = utilities.isValidVolume(refImageIds);\n    }\n    let indices = segmentIndices;\n    if (!indices) {\n        indices = [getActiveSegmentIndex(segmentationId)];\n    }\n    else if (!Array.isArray(indices)) {\n        indices = [indices, 255];\n    }\n    return {\n        operationData,\n        segVolumeId,\n        segImageIds,\n        reconstructableVolume,\n        indices,\n    };\n};\nexport const prepareVolumeStrategyDataForWorker = (operationData) => {\n    return getStrategyData({\n        operationData,\n        strategy: {\n            ensureSegmentationVolumeFor3DManipulation: ensureSegmentationVolume.ensureSegmentationVolumeFor3DManipulation,\n            ensureImageVolumeFor3DManipulation: ensureImageVolume.ensureImageVolumeFor3DManipulation,\n        },\n    });\n};\nexport const prepareImageInfo = (imageVoxelManager, imageData) => {\n    const imageScalarData = imageVoxelManager.getCompleteScalarDataArray();\n    return {\n        scalarData: imageScalarData,\n        dimensions: imageData.getDimensions(),\n        spacing: imageData.getSpacing(),\n        origin: imageData.getOrigin(),\n        direction: imageData.getDirection(),\n    };\n};\nexport const prepareStackDataForWorker = (segImageIds) => {\n    const segmentationInfo = [];\n    const imageInfo = [];\n    for (const segImageId of segImageIds) {\n        const segImage = cache.getImage(segImageId);\n        const segPixelData = segImage.getPixelData();\n        const { origin, direction, spacing, dimensions } = utilities.getImageDataMetadata(segImage);\n        segmentationInfo.push({\n            scalarData: segPixelData,\n            dimensions,\n            spacing,\n            origin,\n            direction,\n        });\n        const refImageId = segImage.referencedImageId;\n        if (refImageId) {\n            const refImage = cache.getImage(refImageId);\n            if (!refImage) {\n                continue;\n            }\n            const refPixelData = refImage.getPixelData();\n            const refVoxelManager = refImage.voxelManager;\n            const refSpacing = [\n                refImage.rowPixelSpacing,\n                refImage.columnPixelSpacing,\n            ];\n            imageInfo.push({\n                scalarData: refPixelData,\n                dimensions: refVoxelManager\n                    ? refVoxelManager.dimensions\n                    : [refImage.columns, refImage.rows, 1],\n                spacing: refSpacing,\n            });\n        }\n    }\n    return { segmentationInfo, imageInfo };\n};\nexport const getImageReferenceInfo = (segVolumeId, segImageIds) => {\n    let refImageId;\n    if (segVolumeId) {\n        const segmentationVolume = cache.getVolume(segVolumeId);\n        const imageIds = segmentationVolume.imageIds;\n        const cachedImage = cache.getImage(imageIds[0]);\n        if (cachedImage) {\n            refImageId = cachedImage.referencedImageId;\n        }\n    }\n    else if (segImageIds?.length) {\n        const segImage = cache.getImage(segImageIds[0]);\n        refImageId = segImage.referencedImageId;\n    }\n    const refImage = cache.getImage(refImageId);\n    const scalingModule = metaData.get('scalingModule', refImageId);\n    const modalityUnitOptions = {\n        isPreScaled: Boolean(refImage?.preScale?.scaled),\n        isSuvScaled: typeof scalingModule?.suvbw === 'number',\n    };\n    return { refImageId, modalityUnitOptions };\n};\n","import { cache } from '@cornerstonejs/core';\nfunction validateRepresentationData(segmentationRepresentationData) {\n    if ('volumeId' in segmentationRepresentationData) {\n        segmentationRepresentationData =\n            segmentationRepresentationData;\n        const cachedVolume = cache.getVolume(segmentationRepresentationData.volumeId);\n        if (!cachedVolume) {\n            throw new Error(`volumeId of ${segmentationRepresentationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`);\n        }\n    }\n    else if ('imageIds' in segmentationRepresentationData) {\n        segmentationRepresentationData =\n            segmentationRepresentationData;\n        if (!segmentationRepresentationData.imageIds) {\n            throw new Error('The segmentationInput.representationData.imageIds is undefined, please provide a valid representationData.imageIds for stack data');\n        }\n    }\n    else {\n        throw new Error('The segmentationInput.representationData is undefined, please provide a valid representationData');\n    }\n}\nexport function validatePublic(segmentationInput) {\n    if (!segmentationInput.representation.data) {\n        throw new Error('The segmentationInput.representationData.data is undefined, please provide a valid representationData.data');\n    }\n    const representationData = segmentationInput.representation\n        .data;\n    validateRepresentationData(representationData);\n}\nexport function validate(segmentationRepresentationData) {\n    validateRepresentationData(segmentationRepresentationData);\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, clearFromImageIds, getPromiseRemovedHandler, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    minBefore: 2,\n    maxAfter: 2,\n    directionExtraImages: 10,\n    preserveExistingPool: false,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 5;\nconst enable = (element) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    updateToolState(element);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n};\nfunction prefetch(element) {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    const { currentImageIdIndex } = stack;\n    indicesToRequestCopy.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n    }\n    function doneCallback(imageId) {\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        const image = cache.getCachedImageBasedOnImageURI(imageId);\n        const { stats } = stackPrefetch;\n        const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n        if (decodeTimeInMS) {\n            stats.imageIds.set(imageId, decodeTimeInMS);\n            stats.decodeTimeInMS += decodeTimeInMS;\n            const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n            stats.loadTimeInMS += loadTimeInMS;\n        }\n        if (!stackPrefetch.indicesToRequest.length) {\n            if (image?.sizeInBytes) {\n                const { sizeInBytes } = image;\n                const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n                if (!stackPrefetch.cacheFill) {\n                    stats.initialTime = Date.now() - stats.start;\n                    stats.initialSize = stats.imageIds.size;\n                    updateToolState(element, usage);\n                    prefetch(element);\n                }\n                else if (stats.imageIds.size) {\n                    stats.fillTime = Date.now() - stats.start;\n                    const { size } = stats.imageIds;\n                    stats.fillSize = size;\n                }\n            }\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    stackPrefetch.indicesToRequest.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            updateToolState(element);\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nconst signum = (x) => (x < 0 ? -1 : 1);\nconst updateToolState = (element, usage) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    let { maxAfter = 2, minBefore = 2 } = configuration;\n    const { directionExtraImages = 10 } = configuration;\n    const stackPrefetchData = getToolState(element) ||\n        {\n            indicesToRequest: [],\n            currentImageIdIndex,\n            stackCount: 0,\n            enabled: true,\n            direction: 1,\n            stats: {\n                start: Date.now(),\n                imageIds: new Map(),\n                decodeTimeInMS: 0,\n                loadTimeInMS: 0,\n                totalBytes: 0,\n            },\n        };\n    const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n    stackPrefetchData.direction = signum(delta);\n    stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n    stackPrefetchData.enabled = true;\n    if (stackPrefetchData.stackCount < 100) {\n        stackPrefetchData.stackCount += directionExtraImages;\n    }\n    if (Math.abs(delta) > maxAfter || !delta) {\n        stackPrefetchData.stackCount = 0;\n        if (usage) {\n            const positionFraction = currentImageIdIndex / stack.imageIds.length;\n            minBefore = Math.ceil(usage * positionFraction);\n            maxAfter = Math.ceil(usage * (1 - positionFraction));\n            stackPrefetchData.cacheFill = true;\n        }\n        else {\n            stackPrefetchData.cacheFill = false;\n        }\n    }\n    else if (delta < 0) {\n        minBefore += stackPrefetchData.stackCount;\n        maxAfter = 0;\n    }\n    else {\n        maxAfter += stackPrefetchData.stackCount;\n        minBefore = 0;\n    }\n    const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n    const maxIndex = Math.min(stack.imageIds.length - 1, currentImageIdIndex + maxAfter);\n    const indicesToRequest = [];\n    for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n        indicesToRequest.push(i);\n    }\n    for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n        indicesToRequest.push(i);\n    }\n    stackPrefetchData.indicesToRequest = indicesToRequest;\n    addToolState(element, stackPrefetchData);\n};\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData) {\n        stackPrefetchData.enabled = false;\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackContextPrefetch = {\n    enable,\n    disable,\n    getConfiguration,\n    setConfiguration,\n};\nexport default stackContextPrefetch;\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, getPromiseRemovedHandler, nearestIndex, range, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    preserveExistingPool: true,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\nfunction prefetch(element) {\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    const stack = getStackData(element);\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    indicesToRequestCopy.forEach(function (imageIdIndex) {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n    const nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);\n    let imageId;\n    let nextImageIdIndex;\n    const preventCache = false;\n    function doneCallback(image) {\n        console.log('prefetch done: %s', image.imageId);\n        const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n        removeFromList(imageIdIndex);\n    }\n    let lowerIndex = nearest.low;\n    let higherIndex = nearest.high;\n    const imageIdsToPrefetch = [];\n    while (lowerIndex >= 0 ||\n        higherIndex < stackPrefetch.indicesToRequest.length) {\n        const currentIndex = stack.currentImageIdIndex;\n        const shouldSkipLower = currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n            configuration.maxImagesToPrefetch;\n        const shouldSkipHigher = stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n            configuration.maxImagesToPrefetch;\n        const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n        const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n        if (!shouldLoadHigher && !shouldLoadLower) {\n            break;\n        }\n        if (shouldLoadLower) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n        if (shouldLoadHigher) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    imageIdsToPrefetch.forEach((imageId) => {\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nfunction enable(element) {\n    const stack = getStackData(element);\n    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = {\n        indicesToRequest: range(0, stack.imageIds.length - 1),\n        enabled: true,\n        direction: 1,\n    };\n    const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);\n    stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n    addToolState(element, stackPrefetchData);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n}\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n        stackPrefetchData.enabled = false;\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\nexport default stackPrefetch;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nfunction triggerAnnotationRender(element) {\n    annotationRenderingEngine.renderViewport(element);\n}\nexport default triggerAnnotationRender;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","export default function filterViewportsWithFrameOfReferenceUID(viewports, FrameOfReferenceUID) {\n    const numViewports = viewports.length;\n    const viewportsWithFrameOfReferenceUID = [];\n    for (let vp = 0; vp < numViewports; vp++) {\n        const viewport = viewports[vp];\n        if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n            viewportsWithFrameOfReferenceUID.push(viewport);\n        }\n    }\n    return viewportsWithFrameOfReferenceUID;\n}\n","import { vec3 } from 'gl-matrix';\nexport function filterViewportsWithParallelNormals(viewports, camera, EPS = 0.999) {\n    return viewports.filter((viewport) => {\n        const vpCamera = viewport.getCamera();\n        const isParallel = Math.abs(vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >\n            EPS;\n        return isParallel;\n    });\n}\nexport default filterViewportsWithParallelNormals;\n","import { ToolModes } from '../../enums';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst { Active, Passive, Enabled } = ToolModes;\nexport default function filterViewportsWithToolEnabled(viewports, toolName) {\n    const numViewports = viewports.length;\n    const viewportsWithToolEnabled = [];\n    for (let vp = 0; vp < numViewports; vp++) {\n        const viewport = viewports[vp];\n        const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        if (!toolGroup) {\n            continue;\n        }\n        const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName);\n        if (hasTool) {\n            viewportsWithToolEnabled.push(viewport);\n        }\n    }\n    return viewportsWithToolEnabled;\n}\nfunction _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName) {\n    const { toolOptions } = toolGroup;\n    const tool = toolOptions[toolName];\n    if (!tool) {\n        return false;\n    }\n    const toolMode = tool.mode;\n    return toolMode === Active || toolMode === Passive || toolMode === Enabled;\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","export const version = '3.30.3';\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n"],"names":["config","getConfig","setConfig","newConfig","polysegInitialized","getPolySeg","addons","polySeg","console","warn","polyseg","init","DEFINED_CURSORS","Symbol","STANDARD_CURSORS","Set","MouseCursor","constructor","name","fallback","this","getName","addFallbackStyleProperty","style","getStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","get","has","set","setDefinedCursor","cursor","context","symbol","Map","Object","defineProperty","value","standardCursorNames","values","ELEMENT_CURSORS_MAP","initElementCursor","element","_getElementCursors","_setElementCursor","cursors","resetElementCursor","hideElementCursor","map","WeakMap","ImageMouseCursor","url","x","y","super","getUniqueInstanceName","Number","prefix","utilities","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","extend","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Height","Probe","RectangleROI","Label","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","assign","create","registerCursor","toolName","svgCursorNames","keys","STATE","AnnotationStyleStates","Highlighted","MODE","ToolModes","Active","SVGMouseCursor","pointer","color","urn","type","getCursorURN","descriptor","getDefinedSVGCursorDescriptor","options","blob","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","URL","createObjectURL","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","prototype","hasOwnProperty","bind","replace","match","key","svgSize","Math","max","cursorName","log","setElementCursor","CursorNames","svgDrawingHelper","annotationUID","ellipseUID","corner1","corner2","dataId","top","bottom","left","right","canvasCoordinates","width","lineWidth","lineDash","undefined","strokeWidth","svgNodeHash","existingEllipse","getSvgNode","w","hypot","h","angle","atan2","PI","center","attributes","cx","cy","rx","ry","stroke","fill","transform","setNodeTouched","svgEllipseElement","document","createElementNS","setAttribute","appendNode","handleGroupUID","handle","uniqueIndex","handleRadius","opacity","r","Error","side","parseFloat","height","existingHandleElement","newHandleElement","drawLine","lineUID","start","end","isNaN","markerStartId","markerEndId","shadow","strokeOpacity","existingLine","layerId","svgLayerElement","id","dropShadowStyle","x1","y1","x2","y2","newLine","drawPath","pathUID","points","pointsArrays","length","Array","isArray","fillColor","fillOpacity","closePath","existingNode","pointsAttribute","i","numArrays","numPoints","j","point","toFixed","d","newNode","drawPolyline","polylineUID","existingPolyLine","firstPoint","newPolyLine","drawRectByCoordinates","rectangleUID","_width","existingRect","topLeft","topRight","bottomLeft","bottomRight","leftEdgeCenter","svgRectElement","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","querySelector","removeChild","getBBox","insertBefore","firstChild","bBox","textUID","textLines","position","padding","fontFamily","fontSize","background","textGroupBoundingBox","svgns","existingTextGroup","textElement","textSpans","from","children","textSpan","appendChild","textAttributes","textGroupAttributes","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","drawHeight","heightUID","midX","endfirstLine","endsecondLine","firstLine","secondLine","threeLine","fanUID","innerRadius","outerRadius","startAngle","endAngle","zIndex","_getHash","existingFanElement","startRad","endRad","outerStartX","cos","outerStartY","sin","outerEndX","outerEndY","innerStartX","innerStartY","largeArcFlag","pathData","setAttributesIfNecessary","newFanElement","toString","setNewAttributesIfValid","drawArrow","arrowUID","viaMarker","markerSize","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","drawRedactionRect","tlhc","min","abs","svgNode","forEach","currentValue","getAttribute","newValue","removeAttribute","enable","eventTarget","addEventListener","ANNOTATION_COMPLETED","handleAnnotationCompleted","ANNOTATION_MODIFIED","handleAnnotationUpdate","ANNOTATION_REMOVED","handleAnnotationDelete","disable","removeEventListener","Passive","Enabled","onCameraModified","evt","tool","Enums","CAMERA_MODIFIED","onCameraReset","onResetCamera","CAMERA_RESET","onImageRendered","detail","IMAGE_RENDERED","onImageSpacingCalibrated","IMAGE_SPACING_CALIBRATED","KEY_DOWN","KEY_UP","MOUSE_CLICK","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_DOUBLE_CLICK","MOUSE_DRAG","MOUSE_MOVE","MOUSE_UP","MOUSE_WHEEL","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_PRESS","mouseDoubleClickListener","mouseDownListener","mouseMoveListener","capture","preventGhostClick","touchStartListener","passive","wheelListener","segmentationId","modifiedSlicesToUse","representationData","getSegmentation","viewportIds","getViewportIdsWithSegmentation","hasVolumeViewport","some","viewportId","viewport","getEnabledElementByViewportId","VolumeViewport","hasStackViewport","StackViewport","hasBothStackAndVolume","segmentationVolume","cache","getVolume","volumeId","imageData","vtkOpenGLTexture","slicesToUpdate","numSlices","getDimensions","setUpdatedFrame","modified","performVolumeLabelmapUpdate","SegmentationRepresentations","Labelmap","representations","getSegmentationRepresentation","filter","representation","enabledElement","actorEntries","actorEntry","segImageData","actor","getMapper","getInputData","currentSegmentationImageIds","segmentationImage","getImage","performStackLabelmapUpdate","_imageChangeEventListener","eventData","renderingEngineId","getEnabledElementByIds","labelmapRepresentations","actors","getActors","updateLabelmapSegmentationImageReferences","labelmapActors","flatMap","find","derivedImageIds","includes","referencedId","removeActors","uid","currentImageId","getCurrentImageId","shouldTriggerSegmentationRender","derivedImageId","derivedImage","segmentationActorInput","dimensions","spacing","direction","getImageDataMetadata","currentImage","imageId","origin","currentOrigin","originToUse","voxelManager","getConstructor","newPixelData","getScalarData","scalarArray","numberOfComponents","setDimensions","setSpacing","setDirection","setOrigin","getPointData","setScalars","addImages","representationUID","callback","imageActor","setInputData","segmentationImageData","setDerivedImage","render","getEnabledElement","BaseVolumeViewport","PRE_STACK_NEW_IMAGE","async","contourSegmentationCompletedListener","sourceAnnotation","annotation","isContourSegmentationAnnotation","viewports","getViewportsForAnnotation","viewportWithToolRegistered","silent","toolGroup","getToolGroupForViewport","errorMessage","hasTool","getToolOptions","isFreehandContourSegToolRegisteredForViewport","getViewport","contourSegmentationAnnotations","sourceAnnotationUID","getAllAnnotations","targetAnnotation","areSameSegment","isReferenceViewable","metadata","getValidContourSegmentationAnnotations","triggerEvent","Events","ANNOTATION_CUT_MERGE_PROCESS_COMPLETED","sourcePolyline","data","contour","polyline","intersectingContours","targetPolyline","isContourHole","contourHoleProcessingEnabled","annotationCompletedListener","removed","getRenderingEngines","renderingEngine","getViewports","vp","triggerAnnotationRenderForViewportIds","t","annotationRemovedListener","removeContourSegmentationAnnotation","csToolsInitialized","defaultConfiguration","_removeCornerstoneEventListeners","elementEnabledEvent","ELEMENT_ENABLED","elementDisabledEvent","ELEMENT_DISABLED","addEnabledElement","removeEnabledElement","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","ANNOTATION_SELECTION_CHANGE","SEGMENTATION_MODIFIED","SEGMENTATION_DATA_MODIFIED","SEGMENTATION_REPRESENTATION_MODIFIED","SEGMENTATION_REPRESENTATION_ADDED","destroy","annotationManager","getAnnotationManager","segmentationStateManager","restoreAnnotations","resetState","annotationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedViewports","_throwIfDestroyed","elements","_viewportElements","_triggerRender","delete","size","_render","addViewportElement","removeViewportElement","_reset","renderViewport","_setViewportsToBeRenderedNextFrame","hasBeenDestroyed","_setAllViewportsToBeRenderedNextFrame","add","elementsEnabled","indexOf","window","requestAnimationFrame","getRenderingEngine","enabledTools","eventDetail","draw","anyRendered","renderAnnotation","rendered","ANNOTATION_RENDERED","cancelAnimationFrame","clear","FrameOfReferenceSpecificAnnotationManager","getGroupKey","annotationGroupSelector","FrameOfReferenceUID","_imageVolumeModifiedHandler","frameOfReferenceSpecificAnnotations","annotations","invalidated","getFramesOfReference","getAnnotations","groupKey","getAnnotation","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","addAnnotation","preprocessingFn","push","removeAnnotation","groupAnnotations","toolAnnotations","index","findIndex","splice","removeAnnotations","removedAnnotations","annotationsForTool","saveAnnotations","structuredClone","state","flat","getNumberOfAllAnnotations","count","removeAllAnnotations","IMAGE_VOLUME_MODIFIED","setPreprocessingFn","defaultFrameOfReferenceSpecificAnnotationManager","globalLockedAnnotationUIDsSet","setAnnotationLocked","locked","makeEventDetail","lockedAnnotationUIDsSet","added","isLocked","lock","unlock","publish","unlockAllAnnotations","clearLockedAnnotationsSet","getAnnotationsLocked","isAnnotationLocked","getAnnotationsLockedCount","checkAndSetAnnotationLocked","freeze","item","ANNOTATION_LOCK_CHANGE","selectedAnnotationUIDs","setAnnotationSelected","selected","preserveSelected","clearSelectionSet","isSelected","selectAnnotation","deselectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","defaultManager","setAnnotationManager","manager","clearParentAnnotation","childUID","parentAnnotationUID","parentAnnotation","childUIDIndex","childAnnotationUIDs","addChildAnnotation","childAnnotation","parentUID","getParentAnnotation","getChildAnnotations","childAnnotationUID","HTMLDivElement","triggerAnnotationAddedForElement","triggerAnnotationAddedForFOR","triggerAnnotationRemoved","annotationManagerUID","invalidateAnnotation","currAnnotation","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","hide","showAllAnnotations","isAnnotationVisible","lastVisible","hidden","isVisible","ANNOTATION_VISIBILITY_CHANGE","checkAndSetAnnotationVisibility","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxVisibility","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","angleArcLineDash","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","toolGroupId","toolGroups","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","toolStyle","specifications","_getToolStyle","property","annotationToolStyles","viewportToolStyles","global","toolGroupToolStyles","globalStyles","toolStyles","styleSpecifier","mode","alternatives","list","getHierarchalPropertyStyles","highlighted","Selected","Locked","autoGenerated","AutoGenerated","Default","eventType","ANNOTATION_ADDED","getToolGroupsWithToolName","viewportsToRender","viewportsInfo","viewportInfo","triggerAnnotationModified","changeType","ChangeTypes","HandlesUpdated","triggerAnnotationCompleted","_triggerAnnotationCompleted","triggerContourAnnotationCompleted","AnnotationGroup","annotationUIDs","_isVisible","visibleFilter","unboundVisibleFilter","setVisible","baseEvent","findNearby","uids","remove","annotationState","resetAnnotationManager","renderers","Contour","Surface","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","triggerSegmentationRenderBySegmentationId","renderSegmentation","_pendingRenderQueue","_getAllViewports","_renderFlaggedSegmentations","nextViewportIds","shift","_getViewportIdsForSegmentation","segmentationRepresentations","viewportRenderList","segmentationRenderList","_addPlanarFreeHandToolIfAbsent","display","error","Promise","resolve","allSettled","then","results","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","tools","addTool","setToolPassive","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","imageIds","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","segmentation","defaultSegmentationStateManager","getDefaultRenderingConfig","cfun","ofun","addPoint","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","updateSegmentation","payload","draftState","triggerSegmentationModified","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","debug","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","segments","segmentIndex","active","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","volumeViewport","isBaseVolumeSegmentation","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","referencedImageId","asOverlay","_updateLabelmapImageIdReferenceMap","stackViewport","_updateAllLabelmapSegmentationImageReferences","getImageIds","sliceIndex","withNavigation","labelmapData","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getCurrentLabelmapImageIdForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","every","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","getActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","entries","segment","addColorLUT","removeColorLUT","_getStackIdForImageIds","slice","round","join","getAllViewportSegmentationRepresentations","getSegmentationRepresentationsBySegmentationId","result","viewportReps","filteredReps","indexToUse","colorLUTToUse","missingColorLUTs","addSegmentationRepresentations","segmentationInputArray","segmentationInput","addContourRepresentationToViewport","contourInputArray","input","addContourRepresentationToViewportMap","viewportInputMap","inputArray","addLabelmapRepresentationToViewport","labelmapInputArray","addLabelmapRepresentationToViewportMap","addSurfaceRepresentationToViewport","surfaceInputArray","addSurfaceRepresentationToViewportMap","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","label","cachedStats","rest","normalizedSegment","geometryId","geometry","getGeometry","normalizeContourSegments","surfaceData","normalizeSurfaceSegments","normalizeSegments","addSegmentations","suppressEvents","setColorLUT","colorLUTsIndex","segmentationRepresentation","getSegmentIndexColor","colorValue","setSegmentIndexColor","colorReference","getActiveSegmentIndex","activeSegmentIndex","getSegmentations","viewportSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","computeStackLabelmapFromVolume","convertVolumeToStackLabelmap","computeVolumeLabelmapFromStack","args","getActorEntry","filterFn","filteredActors","getLabelmapActorUID","getLabelmapActorEntry","getLabelmapActorEntries","getActorEntries","startsWith","getSurfaceActorEntry","getSurfaceRepresentationUID","updateSegmentations","segmentationUpdateArray","segmentationUpdate","visibility","setSegmentIndexVisibility","getSegmentIndexVisibility","getHiddenSegmentIndices","reduce","acc","getStyle","setStyle","renderInactiveSegmentations","getRenderInactiveSegmentations","resetToGlobalStyle","hasCustomStyle","getAnnotationMapFromSegmentation","contourRepresentationData","annotationMap","segmentIndices","annotationUIDsInSegmentMap","annotationUIDsInSegment","hasChildAnnotations","childPolylinesInformation","isClosed","closed","holesClosed","childInfo","childPolylines","holesPolyline","holesUIDs","closePolyline","lastPoint","extractSegmentPolylines","polyLinesMap","polylines","annotationsInfo","annotationInfo","getPolylinesMap","polylinesCanvasMap","convertContourPolylineToCanvasSpace","decimateContours","epsilon","polylineCanvas","decimatedPolyline2D","decimate","point2D","canvasToWorld","removeCompleteContourAnnotation","removeContourHoles","holeDetectionResults","findContourHoles","hole","holeIndexes","removeContourIslands","threshold","islands","findIslands","smoothContours","knotsRatioPercentage","smoothedPolyline","interpolateSegmentPoints","convertContourHoles","targetSegmentationId","targetSegmentationIndex","annotationsUIDsSet","targetUIDsSet","targetSegmentation","clearSegmentValue","setAtIndex","triggerSegmentationDataModified","removeSegment","setNextSegmentAsActive","isThisSegmentActive","updatedSegments","sort","a","b","currentIndex","nextSegmentIndex","previousSegmentIndex","setActiveSegmentIndex","helpers","convertStackToVolumeLabelmap","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","colorLUTOrIndex","JSON","parse","stringify","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegmentIndices","parseInt","getAnnotationsUIDMapFromSegmentation","getViewportsAssociatedToSegmentation","getViewportAssociatedToSegmentation","getViewportWithMatchingViewPlaneNormal","dotThreshold","annotationViewPlaneNormal","viewPlaneNormal","normalizedAnnotationNormal","camera","getCamera","normalizedCameraNormal","dotProduct","_getViewportIndex","arr","ar","_containsViewport","synchronizerId","eventName","eventHandler","_viewportOptions","_onEvent","_ignoreFiredEvents","_targetViewports","_eventSource","currentTarget","_sourceViewports","s","fireEvent","_enabled","_eventName","_eventHandler","_options","eventSource","_auxiliaryEvents","auxiliaryEvents","isDisabled","_hasSourceElements","setOptions","setEnabled","enabled","getOptions","addTarget","addSource","source","_updateDisableHandlers","getSourceViewports","getTargetViewports","removeSource","removeTarget","getViewportElement","hasSourceViewport","hasTargetViewport","sourceViewport","sourceEvent","promises","targetViewport","ex","vp1","vp2","unique","vps","concat","u","_getUniqueViewports","_remove","disableHandler","getEventSource","synchronizers","sync","synchronizer","pop","synchronizerIndex","synchronizersFilteredByIds","notDisabled","Disabled","PRIMARY_BINDINGS","mouseButton","MouseBindings","Primary","ToolGroup","toolOptions","currentActivePrimaryToolName","prevActivePrimaryToolName","restoreToolOptions","_toolInstances","getViewportIds","getViewportsInfo","getToolInstance","toolInstanceName","toolInstance","getToolInstances","configuration","toolDefinition","hasToolName","localToolInstance","toolClass","ToolClass","instantiatedTool","addToolInstance","parentClassName","ToolClassToUse","ParentClass","ToolInstance","addViewport","renderingEngineUIDToUse","_findRenderingEngine","vpId","getActivePrimaryMouseButtonTool","setViewportsCursorByToolName","TOOLGROUP_VIEWPORT_ADDED","removeViewports","indices","vpInfo","TOOLGROUP_VIEWPORT_REMOVED","setActiveStrategy","strategyName","setToolMode","setToolDisabled","setToolEnabled","setToolActive","toolBindingsOptions","bindings","binding","TouchBinding","numTouchPoints","MouseBinding","obj","hasSameBinding","_hasMousePrimaryButtonBinding","_setCursorForViewports","onSetToolActive","_renderViewports","TOOL_ACTIVATED","_triggerToolModeChangedEvent","prevToolOptions","matchBindings","removeAllBindings","getDefaultPrimaryBindings","matchBinding","onSetToolPassive","onSetToolEnabled","onSetToolDisabled","toolOptionsForTool","_getCursor","Settings","getRuntimeSettings","setToolConfiguration","overwrite","_configuration","onSetToolConfiguration","getDefaultMousePrimary","getToolConfiguration","configurationPath","getPrevActivePrimaryToolName","setActivePrimaryTool","activeToolName","getCurrentActivePrimaryToolName","clone","newToolGroupId","fnToolFilter","sourceToolInstance","sourceToolOptions","sourceToolMode","primaryBindings","primary","TOOL_MODE_CHANGED","renderingEngines","matchingEngines","engine","binding1","binding2","modifierKey","tg","toolGroupIndex","svgLayer","svgLayerId","classList","pointerEvents","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","viewportUid","renderingEngineUid","dataset","elementHash","svgNodeCache","_setSvgNodeCache","enabledElements","hasToolByName","removeTool","cancelActiveManipulations","toolsWithData","cancel","VIEWPORT_ELEMENT","_removeViewportFromSynchronizers","_removeViewportFromToolGroup","_removeEnabledElement","foundElementIndex","el","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","defaultState","isInteractingWithTool","isMultiPartToolActive","resetCornerstoneToolsState","resetSvgNodeCache","areViewportsCoplanar","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","setCamera","getSpatialRegistration","targetId","sourceId","imageSliceSyncCallback","sViewport","disabled","imageId1","sourceImagePositionPatient","metaData","imagePositionPatient","targetImageIds","registrationMatrixMat4","getFrameOfReferenceUID","useInitialPosition","targetImagePositionPatientWithRegistrationMatrix","closestImageIdIndex2","targetPoint","closestImageIdIndex","distance","Infinity","imageIndexToSet","getCurrentImageIdIndex","imageIndex","presentationViewSyncCallback","_synchronizerInstance","_sourceEvent","presentationView","getViewPresentation","setViewPresentation","slabThicknessSyncCallback","slabThickness","getSlabThickness","setSlabThickness","voiSyncCallback","modifiedEvent","range","invertStateChanged","invert","colormap","tProperties","voiRange","syncInvertState","syncColormap","_actors","setProperties","zoomPanSyncCallback","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createStackImageSynchronizer","createCameraPositionSynchronizer","synchronizerName","createSynchronizer","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","createImageSliceSynchronizer","createPresentationViewSynchronizer","viewPresentation","createVOISynchronizer","VOI_MODIFIED","COLORMAP_MODIFIED","createZoomPanSynchronizer","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","CONSTANTS","AdvancedMagnifyTool","Actions","toolProps","defaultToolProps","supportedInteractionTypes","magnifyingGlass","radius","zoomFactor","zoomFactorList","autoPan","actions","showZoomFactorsList","method","Secondary","KeyboardBindings","Shift","addNewAnnotation","currentPoints","worldPos","world","canvasPos","canvas","canvasHandlePoints","_getCanvasHandlePoints","viewUp","getReferencedImageId","magnifyViewportId","getToolName","sourceViewportId","isCanvasAnnotation","handles","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","delta","len","viewportIdsToRender","getViewportIdsWithToolToRender","preventDefault","dispose","isPointNearTool","canvasCoords","proximity","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","toolSelectedCallback","editData","_activateModify","handleSelectedCallback","handleIndex","p","_endCallback","newAnnotation","_deactivateModify","isDrawing","_dragDrawCallback","deltaPoints","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","renderStatus","filteredAnnotations","filterInteractableAnnotationsForElement","activeHandleCanvasCoords","drawHandles","circleUID","drawCircle","magnifyViewport","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","canvasPoint","viewportElement","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","focus","onChangeCallback","createElement","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","stackActorReInitialized","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","_resizeViewport","_syncViewports","disableElement","parentNode","magnifyToolGroup","_inheritBorderRadius","magnifyElement","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","parallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","_cloneStack","setStack","_cloneVolumes","volumeInputArray","setVolumes","_cloneViewport","sourceViewportOptions","viewportInput","defaultOptions","enableElement","_cancelMouseEventCallback","target","closest","canvasCurrent","magnifyRadius","dist","distanceToPoint","maxDist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","newPosition","_addBrowserEventListeners","_removeBrowserEventListeners","sourceCanvas","_syncViewportsCameras","focalPoint","sqrt","pow","updatedFocalPoint","updatedPosition","_syncStackViewports","setImageIdIndex","sourceProperties","getProperties","getImageData","resize","AnnotationEraserTool","preMouseDownCallback","_deleteNearbyAnnotations","preTouchStartCallback","interactionType","annotationsToRemove","interactableAnnotations","createAnnotationMemo","deleting","RENDERING_DEFAULTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","viewportIndicatorsConfig","panSize","enableHDPIHandles","referenceLinesCenterGapRadius","referenceLinesCenterGapRatio","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","mobile","toolCenter","initializeViewport","_getAnnotations","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","normal","clientWidth","clientHeight","_getViewportsInfo","getToolGroup","resetCrosshairs","resetPan","resetZoom","resetToCenter","resetRotation","resetCamera","resetSlabThickness","_computeToolCenter","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","firstPlane","secondPlane","thirdPlane","setToolCenter","jumpWorld","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_pointNearTool","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","_autoPanViewportIfNecessary","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","worldToCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","mobileConfig","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","buildFromDegree","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","devicePixelRatio","handleUID","referenceColorCoordinates","xOffset","yOffset","circleRadius","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","viewportsAnnotationsToUpdate","sameScene","_applyDeltaShiftToSelectedViewportCameras","_dragCallback","dir1","dir2","centerCanvas","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","translate","otherViewportsIds","renderViewports","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","lastPoints","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","pan","visiblePointCanvas","visiblePointWorld","deltaPointsWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","c","_applyDeltaShiftToViewportCamera","newFocalPoint","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","getVolumeId","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","jumpToWorld","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","_activateDraw","viewportProperties","rotation","originalViewportRotation","magnifyToolElement","STACK","_dragEndCallback","_deactivateDraw","getTargetId","split","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","resolution","AXES","CUSTOM","polyDataURL","_resizeObservers","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","subscribeToElementResize","resizeObserver","ResizeObserver","setTimeout","observe","getOffscreenMultiRenderWindow","getRenderWindow","filterViewportsWithToolEnabled","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","polyData","shallowCopy","getOutputData","setActiveScalars","mapper","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","EPSILON","OverlayGridTool","A","sourceImageIds","_init","imagePlaneModule","pointSets","calculateImageIdPointSets","viewportData","rows","columns","rowCosines","columnCosines","rowPixelSpacing","columnPixelSpacing","pointSet1","pointSet2","imageIdNormal","getImageIdNormal","isParallel","targetViewportPlane","targetData","initializeViewportData","pointSetsToUse","pointSetToUse","topBottomVec","isPerpendicular","lineStartsWorld","lineEndsWorld","lineStartWorld","lineEndWorld","vec1","vec2","dot","imageOrientationPatient","rowCosineVec","colCosineVec","PanTool","touchDragCallback","mouseDragCallback","PlanarRotateTool","mouseWheelCallback","wheel","setAngle","startPoints","currentPointWorld","startPointWorld","centerWorld","v1","v2","cross","rotAngle","rotMat","Float32Array","rotatedViewUp","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","e","crosshairUIDs","upper","lower","centerSpace","lineLength","plane","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","ReferenceLines","enforceSameFrameOfReference","showFullDimension","sourceViewportCanvasCornersInWorld","sourceViewPlaneNormal","topRightVec","newNormal","handleFullDimension","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","indexToWorld","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","offset","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","updateCursorSize","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","dragCallback","sculpt","registerShapes","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mouseCanvasPoint","deltaWorld","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertIndex","insertHandleRadially","last","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","canvasPoints","toolIndex","distanceFromTool","renderShape","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","polyLineUID","actorWorldPointsMap","polyDataUtils","colorArray","colorComponentToString","component","componentString","floor","colorToString","getProperty","getColor","StackScrollTool","debounceIfNotLoaded","loop","deltaY","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","debounceLoading","scrollSlabs","numberOfSlices","getNumberOfSlices","offsetHeight","TrackballRotateTool","rotateIncrementDegrees","rotateSampleDistanceFactor","_hasResolutionChanged","getDefaultActor","originalSampleDistance","getSampleDistance","setSampleDistance","cleanUp","once","_viewportAddedListener","disconnect","rotateCamera","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPointsCanvas","lastPointsCanvas","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","angleX","acos","sign","upVec","atV","rightV","forwardV","angleY","DIRECTIONS","VolumeRotateTool","cz","ax","ay","az","WindowLevelRegionTool","minWindowWidth","applyWindowLevelRegion","bottomLeftCanvas","topRightCanvas","bottomRightCanvas","topLeftCanvas","bottomRightWorld","topLeftWorld","getAnnotationStyle","drawRect","windowLevel","startCanvas","endCanvas","pixelLuminanceData","minMaxMean","minPixelValue","maxPixelValue","windowWidth","windowCenter","mean","voiLutFunction","VOILUTFunction","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","scalarData","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint8Array","Uint16Array","Int16Array","frame","buffer","_getMinMax","modality","newRange","viewportsContainingVolumeUID","isPreScaled","properties","volume","Modality","scaling","preScale","scaled","scalingParameters","suvbw","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","imageDynamicRange","imageVolume","calculatedDynamicRange","getMiddleSliceData","pixel","BitsStored","metadataDynamicRange","_getImageDynamicRangeFromViewport","ratio","getRange","imageDataRange","getScalars","getData","voxel","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","initialMousePosWorld","dirVec","_dragParallelProjection","pinch","deltaDistance","k","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","imageWidth","imageHeight","canvasAspect","displayArea","scaledImageWidth","imageArea","scaledImageHeight","minParallelScaleRequired","minScaleInWorld","maxScaleInWorld","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","_zoom","currentPointsList","parallelProjection","_panCallback","eventDetails","page","client","AngleTool","showAngleArc","arcOffset","getTextLines","defaultGetTextLines","angleStartedNotYetCompleted","getViewReference","movingTextBox","canvasPoint1","canvasPoint2","line1","canvasPoint3","line2","doneEditMemo","createMemo","worldPosDelta","_throttledCalculateCachedStats","_calculateCachedStats","anglePoints","temp","getLinkedTextBoxStyle","canvasTextBoxCoords","textBoxPosition","textBoxUID","boundingBox","drawLinkedTextBox","trailing","hydrate","instance","hydrateBase","serializableOptions","worldPos1","worldPos2","worldPos3","targetIds","StatsUpdated","cachedVolumeStats","String","fromCharCode","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","arrowHeadStyle","memo","setAnnotationLabel","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","stopImmediatePropagation","updatedText","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","transformWorldToIndex","BidirectionalTool","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","dx","dy","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","unit","dataId1","dataId2","secondLineUID","getTextBoxCoordsCanvas","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","image","index3","index4","handles1","handles2","scale","scale1","units1","scale2","units2","dist1","_calculateLength","dist2","widthUnit","vector1","vector2","majorAxis","minorAxis","major0","major1","minor0","minor1","pos1","pos2","dz","CircleROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","simplified","canvasHandles","radiusCanvas","newRadiusCanvas","canvasCorners","getCanvasCircleCorners","areaUnit","getStackViewports","referencedImageURI","hasImageURI","currentImageURI","area","stdDev","radiusUnit","perimeter","wasInvalidated","pos1Index","pos2Index","boundsIJK","xRadius","yRadius","zRadius","ellipseObj","worldWidth","worldHeight","isEmptyArea","aspect","pixelUnitsOptions","isSuvScaled","modalityUnit","pointsInShape","statsCallback","isInObject","pointLPS","pointInEllipse","fast","returnPoints","stats","getStatistics","statsArray","array","radiusLine","areaLine","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","_mouseDownCallback","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","mid1","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","DragProbeTool","postMouseDownCallback","postTouchStartCallback","ETDRSGridTool","degrees","diameters","dXCanvas","dYCanvas","canvasEnd","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","measurement","p1","p2","p1Canvas","p2Canvas","EllipticalROITool","initialRotation","getRotation","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","newHalfCanvasWidth","canvasRight","newHalfCanvasHeight","getCanvasEllipseCorners","centerPoint","_getCanvasEllipseCenter","post2Index","ellipse","rotLocation","normalized","ellipseCanvasPoints","HeightTool","_calculateHeight","outside","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","createAnnotationForViewport","eventDispatchDetail","it","setPoint","LabelTool","textGroupElement","bbox","translateX","translateY","matches","initialWorldPos","anchorWorldPos","LabelChange","LengthTool","undo","redo","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","setupBaseEditData","scissors","nearestEdge","repeatInterpolation","interpolation","originalPoints","worldToSlice","sliceToWorld","handleSmoothing","hIndex","testPoint","startSearch","findPathToPoint","minPoint","findMinNearby","acceptedPath","path","addPoints","updateAnnotation","scissorsNext","InterpolationUpdated","renderAnnotationInstance","renderContext","showInterpolationPolyline","polylineCanvasPoints","isContourSegmentationTool","LivewireContourTool","contourHoleAdditionModifierKey","snapHandleNearby","cancelInProgress","proximitySquared","startPoint","endPoint","clearAnnotation","clearEditData","Completed","triggerChangeEvent","doubleClick","worldPosOriginal","controlPoints","currentPath","getControlPoints","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","pathPoints","prependPath","confirmedPath","getLastPoint","addControlPoint","_mouseMoveCallback","lastCanvasPoint","imgWidth","imgHeight","slicePoint","editHandle","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","getCalibratedLengthUnitsAndScale","maxX","canvasMaxX","maxY","canvasMaxY","minX","canvasMinX","minY","canvasMinY","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","_renderStats","textboxStyle","throttle","nextPos","viewportImageData","vtkImageData","sliceImageData","sliceToIndexMatrix","indexToSliceMatrix","ijkPoint","startPos","createInstanceFromRawPixelData","currentPathNext","confirmedPathNext","createAnnotation","event","handlePoints","numHandles","previousHandle","nextHandle","slicePos","pathPointsLeft","pathPointsRight","reverse","appendPath","contourSegmentationAnnotation","annotationStyle","textbox","livewirePath","pointArray","imagePoints","targetWindingDirection","Clockwise","updateContourPolyline","ProbeTool","probeDefaults","textCanvasOffset","mergeDefaultProps","ijk","getAtIJKPoint","imageURI","calibratedResults","hasEnhancedRegionValues","units","RegionSegmentPlusTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","worldPoint","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","growCutData","referencedVolumeId","seeds","positiveSeedIndices","negativeSeedIndices","worldIslandPoints","runGrowCut","getRemoveIslandData","getGrowCutLabelmap","mergedOptions","growCut","RegionSegmentTool","currentWorldPoint","circleBorderPoint","circleCenterPoint","sphereInfo","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","SplineContourSegmentationTool","annotationCutMergeCompletedBinded","annotationCutMergeCompleted","initializeListeners","removeListeners","splineToolNames","simplifiedSpline","convertContourSegmentationAnnotation","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","SplineTypes","spline","Cardinal","Class","CatmullRom","Linear","BSpline","drawPreviewEnabled","enableTwoPointPreview","lastControlPointDeletionKeys","AddControlPoint","DeleteControlPoint","Ctrl","fireChangeOnUpdate","isPointNearCurve","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","closeContour","addNewPoint","closestControlPoint","getClosestControlPointWithinDistance","moveAnnotation","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","getClosestPoint","addControlPointAtU","uValue","deleteControlPointCallback","annotationCompletedBinded","annotationCompleted","cancelAnnotation","annotationLocked","childAnnotations","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","getPolylinePoints","updateWindingDirection","numControlPoints","previewPolylinePoints","getPreviewPolylinePoints","controlPointsConnectors","createInterpolatedSplineControl","increment","isSplineAnnotation","createSplineObjectFromType","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","setControlPoints","fixedResolution","fixedScale","splineInstance","SplineClass","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","lineSegment","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","values2","transformIndexToWorld","UltrasoundPleuraBLineTool","USPleuraBLineAnnotationType","BLINE","PLEURA","bLineColor","pleuraColor","drawDepthGuide","depth_ratio","depthGuideColor","depthGuideThickness","depthGuideDashLength","depthGuideDashGap","depthGuideOpacity","fanOpacity","showFanAnnotations","updatePercentageCallback","pleuraAnnotations","bLineAnnotations","annotationType","getActiveAnnotationType","newPoint","isInsideFanShape","getFanShapeGeometryParameters","fanCenter","indexToCanvasRatio","getIndexToCanvasRatio","unMergedPleuraIntervals","mergedPleuraIntervals","pleuraIntervalsDisplayed","bLineIntervalsDisplayed","drawAnnotation","getColorForLineType","lineInterval","fanNumber","interval","clippedInterval","fanDataId","drawFan","calculateBLinePleuraPercentage","activeAnnotationType","filterAnnotations","filterFunction","countAnnotations","getImageIdIndex","annotationMapping","counts","bLine","pleura","deleteAnnotations","setActiveAnnotationType","deleteLastAnnotationType","annotationList","updateFanGeometryConfiguration","fanGeometry","isFanShapeGeometryParametersValid","deriveFanGeometryFromViewport","calculateFanGeometry","pleuraIntervals","bLineIntervals","diffVector","radToDegree","rad","degreeToRad","indexToCanvas","depth_radius","theta_start","theta_range","arc_length","num_dashes","theta_step","theta1","theta2","start_point","end_point","calculateFanShapeCorners","imageBuffer","hull","roughContour","rough","slack","n","next","walk","to","idx","i2","i3","P2","P3","pathA","pathB","globalYmin","upperPath","topY","arcPts","P1","best","P4","pickPoints","refined","edgeBuf","opts","directions","snapQuadrant","pt","xmin","xmax","ymin","ymax","xi","yi","xAlign","yAlign","refineCornersDirectional","step","angleRad","deriveFanGeometry","params","centerResult","intersectLine","tempAngle","d1","d4","d2","d3","exportContourJpeg","pixelData","strokeStyle","quality","ctx","getContext","totalPixels","channels","imgData","createImageData","out","baseIn","baseOut","v","putImageData","beginPath","moveTo","lineTo","toDataURL","getPixelData","saveBinaryData","filename","href","download","body","click","downloadFanJpeg","contourType","jpegDataUrl","fan","startAngleInDegrees","endAngleInDegrees","exportFanJpeg","generateConvexHullFromContour","segmentLargestUSOutlineFromBuffer","channelCount","mask","isForeground","labels","currentLabel","regionSizes","getter","px","py","pixelCount","onFlood","diagonals","floodFill","largestLabel","isBorder","nx","ny","outer","dirs","current","prev","dx0","dy0","startDir","nextPt","bdx","bdy","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","bottomLeftWorld","topRightWorld","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldPos1Index","worldPos2Index","worldToIndexVec3","iMin","iMax","jMin","jMax","kMin","kMax","yMultiple","zMultiple","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","volumeActors","getVolumeActors","coloneIndex","substring","_getTargetStackUID","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","linePoints","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","referencedVolume","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkTopLeft","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","getCompleteScalarDataArray","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","TRANSFORM_MATRIX","getTransformMatrix","CardinalSpline","props","_scale","_fixedScale","s2","CatmullRomSpline","CubicSpline","getPreviewCurveSegments","controlPointPreview","closeSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","curveSegments","curveSegment","_getCurveSegment","getSplineCurves","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","curveSegmentIndex","p0","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","_getLineSegments","numLineSegments","inc","maxU","lineSegments","previousLineSegmentsLength","aabb","curveSegmentLength","lineSegAABB","lineSegLength","LinearSpline","QuadraticBezier","hasTangentPoints","QuadraticSpline","getLineSegments","Spline","_controlPoints","_invalidated","_length","_resolution","_fixedResolution","_closed","_update","_aabb","addControlPoints","_getLineSegmentAt","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","updateControlPoint","newControlPoint","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","squaredDist","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","getClosestPointOnControlPointLines","_convertCurveSegmentsToPolyline","closeDistance","previewCurveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","isVerticalLine","xIntersection","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","AnnotationDisplayTool","arguments","frameOfReference","viewReference","DefaultHistoryMemo","BaseTool","defaults","strategies","defaultStrategy","activeStrategy","strategyOptions","mergedDefaults","initialProps","defaultProps","additionalProps","applyActiveStrategy","operationData","call","applyActiveStrategyCallback","callbackType","extraArgs","setConfiguration","newConfiguration","getViewReferenceId","createZoomPanMemo","zoom","zoomPanMemo","restoreMemo","currentPan","currentZoom","commitMemo","startGroupRecording","endGroupRecording","polySegConversionInProgressForViewportId","processedViewportSegmentations","contourRepresentation","canComputeRequestedRepresentation","computeContourData","hasContourDataButNotMatchingViewport","viewportNormal","uidSet","randomAnnotationUIDs","annotationNormal","_checkContourNormalsMatchViewport","validGeometry","geometryData","contours","_checkContourGeometryMatchViewport","viewportProcessed","viewportStatus","RENDERED","computeSurfaceData","pointsAndPolys","polys","polyDataCache","clipAndCacheSurfacesForViewport","rawResults","extractContourData","createAndAddContourSegmentationsFromClippedSurfaces","renderImmediate","labelMapConfigCache","polySegConversionInProgress","_setLabelmapColorAndOpacity","labelmapActorEntry","activeSegmentation","isActiveLabelmap","labelmapStyle","numColors","outlineWidth","renderOutline","outlineOpacity","activeSegmentOutlineWidthDelta","_getLabelmapConfig","segmentsHidden","segmentColor","segmentSpecificLabelmapConfig","fillAlpha","renderFill","forceOpacityUpdate","forceColorUpdate","_needsTransferFunctionUpdate","addRGBPoint","segmentOpacity","removePoint","addPointLong","setClamping","labelmapActor","preLoad","setRGBTransferFunction","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","outlineWidths","setLabelOutlineThickness","setVisibility","labelmapConfig","segmentsLabelmapConfig","configToUse","fillAlphaInactive","outlineWidthInactive","renderFillInactive","renderOutlineInactive","outlineOpacityInactive","cacheUID","oldConfig","cfunMTime","getMTime","ofunMTime","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","oldCfunMTime","oldOfunMTime","_addLabelmapToViewport","labelmapActorEntries","computeLabelmapData","SurfaceData","updateSurfaceData","surfaces","isHidden","surface","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","_editData","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","segmentationVoxelManager","Preview","OnInteractionEnd","acceptPreview","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","toolMetadata","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","circleUID1","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","throttleTimeout","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","handlesToStart","startWorld","endWorld","indexOfNormal","handlePoint","newProjectionPoints","pointsInsideVolume","baseTopLeftCanvas","baseBottomRightCanvas","basePos1","basePos2","measureInfo","modalityUnitOptions","currentCanvasCoordinates","worldProjectionPointIndex","indexOfProjection","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","pos","_context","CircleScissorsTool","FILL_INSIDE","ERASE_INSIDE","activeLabelmapSegmentation","segmentsLocked","segmentLocking","segmentationImageId","LabelMapEditWithContourTool","annotationsToViewportMap","viewportIdsChecked","allowOpenContours","onViewportAddedToToolGroupBinded","onViewportAddedToToolGroup","onSegmentationModifiedBinded","onSegmentationModified","annotationModified","cleanUpListeners","checkContourSegmentation","activeSeg","viewportContoursToLabelmap","isEqual","PaintFillTool","activeSegmentationRepresentation","currentSegmentationImageId","getDirection","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","framesModified","getFramesModified","boundaries","minJ","maxJ","seedIndex3D","z","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","toIndex","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","RectangleROIStartEndThresholdTool","projectionPointsImageIds","indexOfDirection","roundedStartCoord","roundedEndCoord","coord","roundedCoord","firstOrLastSlice","startIJK","endIJK","indexToWorldVec3","projectionAxisIndex","habdles","projectionPoint","RectangleROIThresholdTool","RectangleScissorsTool","SegmentBidirectionalTool","existingAnnotation","SegmentLabelTool","hoverTimeout","searchRadius","hoverTimer","_setHoveredSegment","_setHoveredSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","hoveredSegmentLabel","SegmentSelectTool","SelectMode","Inside","Border","_setActiveSegment","_setActiveSegmentForType","getSegmentIndexAtLabelmapBorder","getHoveredContourSegmentationAnnotation","SphereScissorsTool","getEditData","EnsureImageVolumeFor3DManipulation","referencedImageIds","imageVoxelManager","EnsureSegmentationVolumeFor3DManipulation","segImageIds","segVolume","initializeCircle","Initialize","centerIJK","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","worldInfo","sphereObj","radius2","precalculated","precalculatePointInEllipse","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","fillInsideCircle","strategyFunction","thresholdInsideCircle","fillOutsideCircle","initializeRectangle","pointInShapeFn","rectangleCornersIJK","isStackViewport","isAligned","getSpacing","EPS","pointsBoundsLPS","getBoundingBoxAroundShapeWorld","xMin","xMax","yMin","yMax","zMin","zMax","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","thresholdInsideRectangle","ContourWindingDirection","AnnotationMultiSlice","setStartRange","startRange","setRange","setEndRange","endRange","rangeEndSliceIndex","getSliceIndexForImage","multiSliceReference","MetadataReferenceModified","setViewportFrameRange","setSingle","getFrameRange","getFrameRangeStr","setFrameRange","annotationHydration","worldPoints","getClosestImageIdForStackViewport","getClassName","getTargetVolumeId","distanceImagePairs","ImagePositionPatient","dir","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","calculateBoundingBox","isWorld","is3D","clipBounds","calibratedPixelSpacingMetadataProvider","calibrateImageSpacing","calibrationOrScale","USER","calibrateSpacing","ViewportStatus","debounced","dynamicVolumesPlayingMap","playClip","playClipOptions","playClipTimeouts","playClipIsTimeVarying","dynamicCineEnabled","playClipContext","waitForRendered","numScrollSteps","currentStepIndex","getTargetImageIdIndex","frameTimeVectorEnabled","waitForRenderedCount","scroll","_createStackViewportCinePlayContext","_getVolumeFromViewport","isDynamicVolume","numDimensionGroups","dimensionGroupNumber","_createDynamicVolumeViewportCinePlayContext","cachedScrollInfo","scrollInfo","getScrollInfo","volumeViewPlaneNormal","_createVolumeViewportCinePlayContext","VideoViewport","getSliceIndex","play","fps","setPlaybackRate","getFrameRate","_createVideoViewportCinePlayContext","_createCinePlayContext","playClipData","isDynamicCinePlaying","_stopDynamicVolumeCine","_stopClip","stopDynamicCine","intervalId","framesPerSecond","lastFrameTimeStamp","ignoreFrameTimeVector","usingFrameTimeVector","frameTimeVector","speed","frameTimeVectorSpeedMultiplier","bounce","timeouts","isTimeVarying","vector","sample","delay","sum","limit","_getPlayClipTimeouts","playClipAction","newStepIndex","CLIP_STOPPED","_stopClipWithData","playClipTimeoutHandler","setInterval","CLIP_STARTED","stopClip","toolState","pause","dynamicCineElement","clearInterval","dynamicVolumeId","addToolState","getToolState","getToolStateByViewportId","addContourSegmentationAnnotation","firstAnnotation","secondAnnotation","firstSegmentation","secondSegmentation","areViewReferencesEqual","contourSegmentationOperation","sourceAnnotationOrUID","targetAnnotationOrUID","getViewportFromAnnotation","intersectionInfo","hasIntersection","copyAnnotation","copyContourSegment","targetSegmentIndex","targetAnnotationUIDsMap","copyContourAnnotation","newAnnotationsUID","newChildAnnotation","findAllIntersectingContours","sourceAABB","targetAABB","lineSegmentsIntersect","projectedPolyline","getViewReferenceFromAnnotation","bounds","DEFAULT_CONTOUR_SEG_TOOL_NAME","endPointWorld","originalToolName","interpolationUID","interpolationCompleted","DEFAULT_CONTOUR_SEG_TOOLNAME","LogicalOperation","getPolylinesInfoWorld","polylinesInfo","annotationUIDList","applyLogicalOperation","segment1","segment2","operation","polyLinesInfoCanvas1","polyLinesInfoCanvas2","segmentation1","segmentation2","polyLinesInfoWorld1","polyLinesInfoWorld2","extractPolylinesInCanvasSpace","polylinesMerged","Union","Subtract","Intersect","XOR","polyLinesWorld","resultSegment","existingAnnotationUIDs","currentSet","addPolylinesToSegmentation","addSegmentInSegmentation","subtract","intersect","xor","copy","deleteOperation","processMultipleIntersections","holeOperations","mergeOperations","primaryHoleTarget","holeAnnotation","holeContour","holePolylineCanvas","windingDirection","CounterClockwise","createPolylineHole","updateViewportsForAnnotations","allAnnotationsToRemove","allResultPolylines","allHoles","holes","getContourHolesData","sourceStartPoint","shouldMerge","resultPolyline","subtractedPolylines","holeData","baseAnnotation","newAnnotations","createNewAnnotationFromPolyline","parentPolyline","reassignHolesToNewAnnotations","processSequentialIntersections","updatedToolNames","intersectPolylinesSets","set1","set2","polyA","polyB","intersection","intersectionRegions","intersectPolylines","region","subtractPolylineSets","polylinesSetA","polylinesSetB","currentPolylines","polylineB","newPolylines","currentPolyline","subtractedPolyline","cleaned","subtractMultiplePolylineSets","basePolylineSet","subtractorSets","subtractAnnotationPolylines","baseAnnotations","subtractorAnnotations","unifyPolylineSets","processedFromA","processedFromB","polylineA","merged","mergedPolyline","unifyMultiplePolylineSets","polylineSets","unifyAnnotationPolylines","annotationsSetA","annotationsSetB","xorPolylinesSets","allIdentical","foundMatch","TOLERANCE","convertContourPolylineToWorld","checkIntersection","combinePolylines","mergePolylines","contourHolesData","unassignedContourHolesSet","reassignedContourHolesMap","assignHoleToPolyline","newPolyline","contourHolesDataArray","contourHoleData","templateAnnotation","removeDuplicatePoints","cleanupPolylines","validPolylines","seenPolylines","polylineKey","findNextLink","lines","contourPoints","cell","nextLine","remainingLines","findContours","firstCell","extraContours","findContoursFromReducedSet","findHandlePolylineIndex","closestDistance","testIndex","islandIndexes","getSignedArea","getContourHolesDataCanvas","worldHoleContours","canvasHoleContours","worldHoleContour","canvasHoleContour","getContourHolesDataWorld","getDeduplicatedVTKPolyDataPoints","bypass","getPoints","getLines","pointsArray","getNumberOfPoints","_","getPoint","linesArray","getNumberOfCells","getCell","newPoints","newIndex","areCoplanarContours","firstViewPlaneNormal","secondViewPlaneNormal","firstPolyline","secondPolyline","firstDistance","secondDistance","processContourHoles","useXOR","retContours","closedContours","contourWithHoles","contourWithoutHoles","hContour","outerContour","innerContour","vertices","pointsNotEnclosed","inside","xj","yj","getIsPointInsidePolygon","checkEnclosed","contourHoleSet","holeIndex","isPolygonInsidePolygon","inner","containsPoints","closedPolylines","originalIndex","outerArea","potentialHole","generateContourSetsFromLabelmap","registerComputeWorker","WorkerTypes","GENERATE_CONTOUR_SETS","segVolumeId","getOrCreateSegmentationVolume","vol","segmentationInfo","getOrigin","contourSets","getWebWorkerManager","executeTask","refImages","refImageId","refImageDataMetadata","processedContourSets","contourSet","sliceContours","refImageIndex","imageDataMetadata","scanAxisNormal","FrameNumber","AnnotationToPointData","TOOL_NAMES","convert","metadataProvider","validateAnnotation","ContourSequence","getContourSequence","ReferencedROINumber","ROIDisplayColor","random","register","RectangleROIStartEndThreshold","acceptAutogeneratedInterpolations","selector","InterpolationManager","acceptAutoGenerated","polylineData","transforms","polylineWorldPoints","currentClosedState","lastToFirstDist","updatedWindingDirection","sumOverDimensionGroups","dimensionGroups","arrayLength","getScalarDataLength","resultArray","getDimensionGroupScalarData","operationFunctions","SUM","AVERAGE","sumArray","averageOverDimensionGroups","SUBTRACT","scalarData1","scalarData2","generateImageFromTimeData","dynamicVolume","dimensionGroupNumbers","frameNumbers","operationFunction","updateVolumeFromTimeData","targetVolume","targetVoxelManager","resetModifiedSlices","modifiedSlices","maskVolumeId","worldCoordinate","dataInTime","ijkCoords","maskImageData","segVoxelManager","scalarDataLength","nonZeroVoxelIndices","actualLen","getAtIndex","nonZeroVoxelValuesInTime","isSameVolume","valuesInTime","getAtIndexAndDimensionGroup","toIJK","segPointLPS","segValue","pointIJK","segPointIJK","overlapIJKMinMax","perDimensionGroupSum","averageCallback","averageValues","_getDimensionGroupDataMask","coordinate","worldToIndex","scalarIndex","_getDimensionGroupDataCoordinate","getAnnotationNearPoint","getAnnotationNearPointOnEnabledElement","found","findAnnotationNearPointByTool","currentId","CalibrationTypes","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","calibration","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","ERMF","ERROR","PROJECTION","CALIBRATED","UNKNOWN","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","getPixelValueUnitsImageId","getPixelValueUnits","generalSeriesModule","petSeriesModule","_handlePTModality","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","row","rowCosine","column","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getEnabledElements","roundNumber","arePolylinesIdentical","poly1","poly2","identicalForward","identicalReverse","cyclicForward","cyclicReverse","numPoint","DEFAULT_EPSILON","epsilonSquared","partitionQueue","polylinePointFlags","numDecimatedPoints","startIndex","endIndex","maxDistIndex","decimatedPolyline","srcIndex","dstIndex","refPoint","aX","aY","bX","numPolylinePoints","distFirstToLastPoints","distanceToPointSquared","findClosestPoint","sourcePoints","minDistance","MAX_SAFE_INTEGER","sourcePoint","_distanceBetween","moveAnnotationToViewPlane","projectedDistance","acquisitionMapping","ijkPrime","fromIJK","jkMapping","ikMapping","normalizeViewportPlane","boundsIJKPrime","mapping","getOrientationStringLPS","orientation","orientationX","orientationY","orientationZ","MIN","invertOrientationStringLPS","orientationString","inverted","smoothAnnotation","pointInSurroundingSphereCallback","spacings","maxRadiusIJK","ceil","sphereCornersIJK","getBoundingBoxAroundShape","_computeBoundsIJKWithCamera","_getBounds","createScalarVolumeVoxelManager","pointToString","decimals","idx3","getPolyDataPointIndexes","linesData","segmentSize","findStartingPoint","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","contourIndexes","referenceVolume","AllBoundsIJK","pointsToUse","g","accumulator","registered","workerManager","computeWorkerConfig","computeWorker","maxWorkerInstances","autoTerminateOnIdle","idleTimeThreshold","registerWorker","Worker","uuidv4","ChangeTypesForInterpolation","toolNames","sliceData","getSliceData","hasInterpolationUID","filterData","parentKey","interpolationAnnotations","skipUIDs","interpolationAnnotation","isInterpolationUpdate","SegmentStatsCalculator","calculators","statsInit","statsData","calculator","volumetricStatsCallback","maxIJKs","dataCopy","volumetricGetStatistics","volumeScale","entry","VolumetricCalculator","volumetricState","optionsWithUnit","InstanceVolumetricCalculator","setBrushSizeForToolGroup","viewportsInfoArray","getBrushSizeForToolGroup","toolInstances","brushToolInstance","setBrushThresholdForToolGroup","getBrushThresholdForToolGroup","computeMetabolicStats","segmentationIds","COMPUTE_STATISTICS","labelmapVolumes","mergedLabelmap","createMergedLabelmapForIndex","referenceImageIds","labelmap","firstImage","volumeInfo","getVolumeContainingImageId","getOrCreateImageVolume","getReferenceVolumeForSegmentation","imageInfo","calculateForVolume","contourAndFindLargestBidirectional","containedSegmentIndices","createBidirectionalToolData","bidirectionalData","VoxelManager","RLEVoxelMap","createLabelmapMemo","createRleMemo","isUndo","undoVoxelManager","redoVoxelManager","useVoxelManager","setAtIJKPoint","slices","getArrayOfModifiedSlices","createRLEHistoryVoxelManager","operationType","copyMap","createRLEVolumeVoxelManager","createLabelmapVolumeForViewport","labelmaps","outputData","cachedVolume","mergedVolume","setCompleteScalarDataArray","findLargestBidirectional","maxBidirectional","isInSegment","sliceContour","bidirectional","createBidirectionalForSlice","currentMax","maxMajor","maxMinor","currentMaxMinor","currentMaxMajor","maxMajorPoints","distance2","testCenter","handle0","handle1","unitMajor","maxMinorPoints","lpad","string","character","seed","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","stack","visits","currentArgs","flood","job","getArgs","prevArgs","previousArgs","visited","iKey","markAsVisited","node","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","generateVolumeId","getReferenceVolumeForSegmentationVolume","segmentationVolumeId","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","isPointInsidePolyline3D","getSegmentIndexAtWorldForContour","getSegmentLargestBidirectional","COMPUTE_LARGEST_BIDIRECTIONAL","segData","reconstructableVolume","calculateVolumeBidirectional","isStack","calculateStackBidirectional","radiusForVol1","updateStatsArray","newStat","existingIndex","stat","processSegmentationStatistics","radiusIJK","testMax","testStats","getSphereStats","peakValue","peakPoint","mtv","suvMean","lesionGlycolysis","imageVoxels","centerLPS","_pointLPS","boundsOrig","finalStats","calculateVolumeStatistics","calculateStackStatistics","getUniqueSegmentIndices","cachedResult","keySet","addImageSegmentIndices","addVolumeSegmentIndices","handleLabelmapSegmentation","handleContourSegmentation","handleSurfaceSegmentation","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","byteLength","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","minZ","maxZ","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolume","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","targetBuffer","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","sphereRadius","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","numPixelsPerSlice","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nz","neighborVoxelIndex","neighborPixelValue","worldVecRowDir","worldVecSliceDir","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","ijkVecRowDir","ijkVecColDir","vec","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","startValue","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerIndex","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","isLineInSegment","ijk1","ijk2","testIJK","testSize","unitDelta","createIsInSegment","createIsInSegmentMetadata","SegmentationEnum","IslandRemoval","fillInternalEdge","maxInternalRemove","initialize","segmentationVoxels","hasSource","sourceVoxelManager","previewVoxelManager","previewSegmentIndex","clickedPoints","getBoundsIJK","bound","depth","segmentSet","fillFrom","oldVal","SEGMENT","normalizer","selectedPoints","floodFillSegmentIsland","floodedCount","clickedPoint","iPrime","jPrime","kPrime","ISLAND","removeExternalIslands","rle","clearPoint","rowModified","removeInternalIslands","forEachRow","baseIndex","lastRle","INTERIOR","rowPrev","getRun","rowNext","isLast","isFirst","prevCovers","covers","nextCovers","EXTERIOR","singlePlane","newType","INTERIOR_TEST","INTERIOR_SMALL","rowRle","thresholdVolumeInformation","validToolNames","_validateAnnotations","outputSegmentationVolume","segmentContourAction","configurationData","getSegment","defaultGetSegment","segmentationsList","bidirectionals","hasExistingActiveSegment","existingLargestBidirectionals","existingBidirectionalItem","newBidirectional","existingLargestBidirectional","updateSegment","bidirectionalToolData","segmentData","segmentationIndex","overlapType","baseVolumeIdx","volumeInfoList","refVoxelManager","volumeSize","_handleSameSizeVolume","overlaps","segScalarDataLength","overlapBounds","callbackOverlap","overlapTest","_handleDifferentSizeVolume","testOverlapRange","voxelSpacing","voxelCenter","testRange","insert","equalsCheck","getVoxelOverlap","halfSpacingX","halfSpacingY","halfSpacingZ","voxelCornersIJK","offsets","xOff","yOff","zOff","processVolumes","segmentationSpacing","segmentIndicesCache","setSegmentationDirty","cached","isDirty","getCachedSegmentIndices","setCachedSegmentIndices","triggerWorkerProgress","workerType","progress","WEB_WORKER_PROGRESS","getSegmentationDataForWorker","refImageIds","prepareVolumeStrategyDataForWorker","ensureSegmentationVolumeFor3DManipulation","ensureImageVolumeFor3DManipulation","prepareStackDataForWorker","segImageId","segImage","segPixelData","refImage","refPixelData","refSpacing","getImageReferenceInfo","cachedImage","scalingModule","Boolean","validateRepresentationData","segmentationRepresentationData","validatePublic","validate","updatedLabel","imageRetrieveMetadataProvider","resetPrefetchTimeout","maxImagesToPrefetch","minBefore","maxAfter","directionExtraImages","preserveExistingPool","prefetch","stackPrefetchData","stackPrefetch","indicesToRequest","removeFromList","imageIdIndex","indicesToRequestCopy","currentImageIdIndex","getImageLoadObject","isLoaded","imageLoadPoolManager","filterRequests","requestFn","retrieveOptions","IMAGE_RETRIEVE_CONFIGURATION","imageLoader","getCachedImageBasedOnImageURI","decodeTimeInMS","loadTimeInMS","sizeInBytes","getMaxCacheSize","cacheFill","fillTime","fillSize","initialTime","initialSize","updateToolState","doneCallback","requestType","addRequest","onImageUpdated","stackCount","totalBytes","positionFraction","minIndex","maxIndex","promiseRemovedHandler","IMAGE_CACHE_IMAGE_REMOVED","getConfiguration","clearRequestStack","nearest","nextImageIdIndex","lowerIndex","low","higherIndex","high","imageIdsToPrefetch","shouldLoadLower","shouldLoadHigher","indexOfCurrentImage","getDeltaPoints","curr","getMeanPoints","_subtractPoints2D","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaRotation","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","filterViewportsWithFrameOfReferenceUID","numViewports","viewportsWithFrameOfReferenceUID","vpCamera","viewportsWithToolEnabled","_toolGroupHasActiveEnabledOrPassiveTool","toolMode","DEFAULTS","MULTIPLIER","RANGE_TEXT_POSITION","Right","TICKS_BAR_SIZE","Colorbar","_isMouseOver","_isInteracting","_mouseOverCallback","showTicks","_mouseOutCallback","hideTicks","_addVOIEventListeners","initialState","multipliers","getVOIMultipliers","_getPointsFromMouseEvent","startVOIRange","local","voiLower","voiUpper","newVoiRange","_mouseUpCallback","_removeVOIEventListeners","_eventListenersManager","_colormaps","getColormapsMap","_activeColormapName","getInitialColormapName","_canvas","_createCanvas","_ticksBar","_createTicksBar","_rangeTextPosition","ticks","appendTo","rootElement","_addRootElementEventListeners","activeColormapName","colormapName","imageRange","currentVoiRange","onVoiChange","showFullImageRange","showFullPixelValueRange","reset","createRootElement","onContainerResize","updateTicksBar","containerSize","colormaps","items","Name","cm","ticksProps","clientPoint","clientX","clientY","pagePoint","pageX","pageY","getBoundingClientRect","pageXOffset","pageYOffset","containerWidth","containerHeight","ticksBar","rangeTextPosition","ticksBarTop","ticksBarLeft","Top","Left","initialDragState","defaultImageRange","ViewportColorbar","_getImageRange","_getVOIRange","autoHideTicks","_hideTicksTimeoutId","timeLeft","_hideTicksTime","_stackNewImageCallback","_element","_imageVolumeModifiedCallback","_volumeId","_viewportVOIModifiedCallback","showAndAutoHideTicks","_viewportColormapModifiedCallback","_addCornerstoneEventListener","getImageActor","minValue","maxValue","getRGBTransferFunction","ColorbarRangeTextPosition","calculateMinMaxMean","pixelLuminance","globalMin","globalMax","numPixels","spv","extractWindowLevelRegionToolData","extractImageDataVolume","getCornerstoneImage","extractImageDataStack","getLuminanceFromRegion","luminance","spIndex","red","green","blue","version","HASH_UNDEFINED","funcTag","genTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","freeGlobal","freeSelf","self","root","Function","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","getNative","nativeCreate","symbolProto","symbolToString","Hash","ListCache","MapCache","assocIndexOf","eq","baseGet","object","isSymbol","test","isKey","stringToPath","toKey","baseIsNative","isObject","func","pattern","tag","isFunction","isHostObject","toSource","getMapData","__data__","getValue","memoize","baseToString","number","quote","resolver","TypeError","memoized","apply","Cache","other","isObjectLike","exports","defaultValue"],"sourceRoot":""}